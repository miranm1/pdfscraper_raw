using System;
using System.IO;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using iTextSharp.text.pdf; // using Visual Studio install in the Package Manager Console - install-package iTextSharp
using iTextSharp.text.pdf.parser;

// This program will pull tabulated data from ET-Rate Tables in the LCRAS Reports from 1995 to 2011.
// It collects 13 values from a specific label, unless there is 12 values only.  These 13 values are 
// the monthly values and the sum total of the months. For this specific program I have divided the parts 
// for collection into 5 different parts. These 5 parts are (1)Reference ET, (2)Precipitation, (3)Crops, (4)Open Water,
// and (5)Riparian Crops. The program works by finding a specific page in the pdf and converting all the text 
// on that page into one large string. Then a Regular Expression is needed to match the text in the string 
// variable. An example of this would be @"Open water " + @"((\-?\d+)+?(\.\d+)?)\s".  The first part is the matching
// label and the other part is the value. The matching function is very percise be aware of spaces and parentheses
// that would require escape charactrers. If it successfully finds a match it will be printed into the output file 
// immediately. 

// notes:
// Regular Expression to include positive and negative integers and positive and negative decimal values 
// @"((\-?\d+)+?(\.\d+)?)\s"

namespace ScrapePDFs
{ 
    class Program
	{
        // Main entry point for the program
        static void Main(string[] args)
        {
           int pdfnum = 0; //number of pdfs you are to go through

            //create prompted for what data would like to be collected
            //take in user input for data to be collected
            //use to switch statement to select data that is to be collected from pdf and printed into a text file. 
            //5 choices would be (1)Reference ET, (2)Precipitation, (3)Crops, (4)Open Water, (5)Riparian 
            
            while (pdfnum <= 16)
            {
                switch (pdfnum)
                {
                    case 0: // 1995
                        {
                            // creates variable to hold in a list of string variables 
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\Appendix95.pdf";
                            // Diagnostic messages on the command line
                            Console.WriteLine("Processing pdf 95 for Reference ET");
                            var header = new List<string>(new string[] { "Year 95 Reference ET Values:" });
                            string outFile = "U:\\ReferenceET_95to11.txt"; // string of path for file 
                            TextWriter tw = new StreamWriter(outFile); // opens file for output
                            foreach (String s in header) // prints a hearder into the file
                            { tw.Write(s); } // the header will print the year of the pdf to separate the data sets
                            tw.WriteLine();

                            int i = 0;
                            int page = 0;
                            // Read PDF into a string variable
                            while (i < 6)
                            {
                                string result = ""; //empty string to label numbers 
                                // Switch statement created to go to certain pages the ET Crops are for each area.
                                switch (i) 
                                {
                                    case 0:
                                        {
                                            page = 20; 
                                            result = "MohaveET  ";
                                            break;
                                        }
                                    case 1:
                                        {
                                            page = 90;
                                            result = "ParkerET  ";
                                            break;
                                        }
                                    case 2:
                                        {
                                            page = 160;
                                            result = "PaloVerdeET  ";
                                            break;
                                        }
                                    case 3:
                                        {
                                            page = 230;
                                            result = "NorthGilaET  ";
                                            break;
                                        }
                                    case 4:
                                        {
                                            page = 300;
                                            result = "YumaValleyET  ";
                                            break;
                                        }
                                    case 5:
                                        {
                                            page = 370;
                                            result = "YumaMesaET  ";
                                            break;
                                        }
                                }
                                // Method call to find pdf page and convert page into a string 
                                var pdf = pdfText(fName, page);

                                // Regular expression to look for our target data in the PDF
                                // This is the pattern used for matching in the pdf file
                                // \d+ = any digit plus extra digit attached
                                // \D = any non digit
                                // \s = any white space in the string
                                // The \d+\D\s represent one one of the numbers found in the tables. 
                                // There are 13 in total numbers.  Numbers 1-12 are the monthly numbers and
                                // the last number represents the total sum of the first 12 numbers

                                string pattern = @"Total ET , inches\n0\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                // If statement created to make readable for the program because 
                                // a value was missing in the month of Decemeber
                                if (i == 4)
                                {
                                    pattern = @"Total ET , inches\n0\n" + @"\d+\D\d+\s" +
                                     @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                     @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                     @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                }
                                // Library call to look for any matches in the page
                                MatchCollection matches = Regex.Matches(pdf, pattern);

                                // If no matches are found display error message
                                if (matches.Count < 1) 
                                {
                                    result = result + "File Not Readable";
                                }
                                // Else print 
                                else
                                {
                                    result = result + matches[0].Value.Replace("Total ET , inches\n0\n", "").Trim();
                                }
                                // Add our found result to the output container
                                outPut.Add(result);
                                i += 1;
                            }

                            foreach (String s in outPut)
                            { tw.WriteLine(s); }
                            tw.WriteLine();
                            tw.Close();
                            break;
                        }
                    case 1: // 1996
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\Appendix96.pdf";
                            // Diagnostic messages on the command line
                            Console.WriteLine("Processing pdf 96 for Reference ET");
                            var header = new List<string>(new string[] { "Year 96 Reference ET Values:" });
                            //var outFile = System.IO.Path.GetTempFileName() + ".txt";
                            string outFile = "U:\\ReferenceET_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            { tw.Write(s); }
                            tw.WriteLine();

                            int i = 0;
                            int page = 0;
                            // Read PDF into a string variable
                            while (i < 6)
                            {
                                string result = "";

                                switch (i)
                                {
                                    case 0:
                                        {
                                            page = 18;
                                            result = "MohaveET  ";
                                            break;
                                        }
                                    case 1:
                                        {
                                            page = 87;
                                            result = "ParkerET  ";
                                            break;
                                        }
                                    case 2:
                                        {
                                            page = 156;
                                            result = "PaloVerdeET  ";
                                            break;
                                        }
                                    case 3:
                                        {
                                            page = 225;
                                            result = "NorthGilaET  ";
                                            break;
                                        }
                                    case 4:
                                        {
                                            page = 294;
                                            result = "YumaValleyET  ";
                                            break;
                                        }
                                    case 5:
                                        {
                                            page = 363;
                                            result = "YumaMesaET  ";
                                            break;
                                        }
                                }
                                var pdf = pdfText(fName, page); 
                              
                                string pattern = @"Total ET0, inches\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                if (i == 2)
                                {
                                    pattern = @"Total ET0, inches \(from data file 9672rawd\.wk4\)\n" + @"\d+\D\d+\s" +
                                     @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                     @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                     @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                }
                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                if (matches.Count < 1)
                                {
                                    result = result + "File Not Readable";
                                }
                                else
                                {
                                    if(i == 2)
                                    {
                                        result = result + matches[0].Value.Replace("Total ET0, inches (from data file 9672rawd.wk4)", "").Trim();
                                    }
                                    else 
                                    result = result + matches[0].Value.Replace("Total ET0, inches\n", "").Trim();
                                }
                                // Add our found result to the output container
                                outPut.Add(result);
                                i += 1;
                            }

                      
                            foreach (String s in outPut)
                            { tw.WriteLine(s); }
                            tw.WriteLine();
                            tw.Close();
                            break;
                        }
                    case 2: // 1997
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\Appendix97.pdf";
                            // Diagnostic messages on the command line
                            Console.WriteLine("Processing pdf 97 for Reference ET");
                            var header = new List<string>(new string[] { "Year 97 Reference ET Values:" });
                            //var outFile = System.IO.Path.GetTempFileName() + ".txt";
                            string outFile = "U:\\ReferenceET_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            { tw.Write(s); }
                            tw.WriteLine();

                            int i = 0;
                            int page = 0;
                            // Read PDF into a string variable
                            while (i < 7)
                            {
                                string result = "";
                                string pattern = "";
                                switch (i)
                                {
                                    case 0:
                                        {
                                            page = 31;
                                            result = "MohaveET  ";
                                            pattern = @"Total ET0, inches from averaging file AVG_ETS\.WK4\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 1:
                                        {
                                            page = 100;
                                            pattern = @"Total ET0, inches from averaging file AVG_ETS\.WK4\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            result = "ParkerET  ";
                                            break;
                                        }
                                    case 2:
                                        {
                                            page = 169;
                                            result = "PaloVerdeET  ";
                                            pattern = @"Total ETo, inches \(from averaged data in file AVG_ETS\.WK4\)\n" + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 3:
                                        {
                                            page = 307;
                                            result = "NorthGilaET  ";
                                            pattern = @"Total ET0, inches \(from averaged data in file AVG_ETS\.WK4\)\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 4:
                                        {
                                            page = 376;
                                            result = "YumaValleyET  ";
                                            pattern = @"Total ET0, inches\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 5:
                                        {
                                            page = 445;
                                            result = "YumaMesaET  ";
                                            pattern = @"Total ET0, inches\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 6:
                                        {
                                            page = 238;
                                            result = "BlytheNEET  ";
                                            pattern = @"Total ETo, inches \(from average ETo data in file AVG_ET97\.WK4\)\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                }
                                var pdf = pdfText(fName, page); // include extra backslash for path
                             
                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                if (matches.Count < 1)
                                {
                                    result = result + "File Not Readable";
                                }
                                else
                                {
                                    if (result == "MohaveET  " || result == "ParkerET  ")
                                    {
                                        result = result + matches[0].Value.Replace("Total ET0, inches from averaging file AVG_ETS.WK4", "").Trim();
                                    }
                                    else if (result == "PaloVerdeET  ")
                                    {
                                        result = result + matches[0].Value.Replace("Total ETo, inches (from averaged data in file AVG_ETS.WK4)", "").Trim();
                                    }
                                    else if(result == "NorthGilaET  ")
                                    {
                                        result = result + matches[0].Value.Replace("Total ET0, inches (from averaged data in file AVG_ETS.WK4)", "").Trim();
                                    }
                                    else if (result == "BlytheNEET  ")
                                    {
                                        result = result + matches[0].Value.Replace("Total ETo, inches (from average ETo data in file AVG_ET97.WK4)", "").Trim();
                                    }
                                    else
                                       result = result + matches[0].Value.Replace("Total ET0, inches\n", "").Trim();
                                }
                                // Add our found result to the output container
                                outPut.Add(result);
                                i += 1;
                            }

                            foreach (String s in outPut)
                            { tw.WriteLine(s); }
                            tw.WriteLine();
                            tw.Close();
                            break;
                          
                        }
                    case 3: // 1998
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\Appendix98.pdf";
                            // Diagnostic messages on the command line
                            Console.WriteLine("Processing pdf 98 for Reference ET");
                            var header = new List<string>(new string[] { "Year 98 Reference ET Values:" });
                            //var outFile = System.IO.Path.GetTempFileName() + ".txt";
                            string outFile = "U:\\ReferenceET_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            { tw.Write(s); }
                            tw.WriteLine();

                            int i = 0;
                            int page = 0;
                            // Read PDF into a string variable
                            while (i < 6)
                            {
                                string result = "";
                                string pattern = "";
                                switch (i)
                                {
                                    case 0:
                                        {
                                            page = 30;
                                            result = "MohaveET  ";
                                            pattern = @"Total ETo, inches \n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 1:
                                        {
                                            page = 98;
                                            pattern = @"Total ET0, inches \n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            result = "ParkerET  ";
                                            break;
                                        }
                                    case 2:
                                        {
                                            page = 166;
                                            result = "PaloVerde/BlytheET  ";
                                            pattern = @"Total ETo, inches\n" + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 3:
                                        {
                                            page = 235;
                                            result = "NorthGilaET  ";
                                            pattern = @"Total ET0, inches \n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 4:
                                        {
                                            page = 303;
                                            result = "YumaValleyET  ";
                                            pattern = @"Total ET0, inches\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 5:
                                        {
                                            page = 371;
                                            result = "YumaMesaET  ";
                                            pattern = @"Total ET0, inches\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                   
                                }
                                var pdf = pdfText(fName, page); 
                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                if (matches.Count < 1)
                                {
                                    result = result + "File Not Readable";
                                }
                                else
                                {
                                    if(result == "MohaveET  ")
                                    {
                                        result = result + matches[0].Value.Replace("Total ETo, inches \n", "").Trim();
                                    }
                                    else if(result == "PaloVerde/BlytheET  ")
                                    {
                                        result = result + matches[0].Value.Replace("Total ETo, inches", "").Trim();
                                    }
                                    else if(result == "NorthGilaET  " || result == "YumaMesaET  " || result == "ParkerET  ")
                                    {
                                        result = result + matches[0].Value.Replace("Total ET0, inches", "").Trim();
                                    }
                                    else
                                        result = result + matches[0].Value.Replace("Total ET0, inches\n", "").Trim();
                                }
                                // Add our found result to the output container
                                outPut.Add(result);
                                i += 1;
                            }
                            
                            foreach (String s in outPut)
                            { tw.WriteLine(s); }
                            tw.WriteLine();
                            tw.Close();
                            break;
                        }
                    case 4: // 1999
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\Appendix99.pdf";
                            // Diagnostic messages on the command line
                            Console.WriteLine("Processing pdf 99 for Reference ET");
                            var header = new List<string>(new string[] { "Year 99 Reference ET Values:" });
                            //var outFile = System.IO.Path.GetTempFileName() + ".txt";
                            string outFile = "U:\\ReferenceET_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            { tw.Write(s); }
                            tw.WriteLine();

                            int i = 0;
                            int page = 0;
                            // Read PDF into a string variable
                            while (i < 3)
                            {
                                string result = "";
                                string pattern = "";
                                switch (i)
                                {
                                    case 0:
                                        {
                                            page = 19;
                                            result = "MohaveET  ";
                                            pattern = @"Reference ET, inches \n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 1:
                                        {
                                            page = 118;
                                            pattern = @"Reference ET, inches \n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            result = "Parker/PaloVerdeET  ";
                                            break;
                                        }
                                    case 2:
                                        {
                                            page = 220;
                                            result = "YumaET  ";
                                            pattern = @"Reference ET, inches " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    
                                        

                                }
                                var pdf = pdfText(fName, page); 
                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                if (matches.Count < 1)
                                {
                                    result = result + "File Not Readable";
                                }
                                else
                                {
                                    
                                        result = result + matches[0].Value.Replace("Reference ET, inches", "").Trim();
                                }
                                // Add our found result to the output container
                                outPut.Add(result);
                                i += 1;
                            }

                            foreach (String s in outPut)
                            { tw.WriteLine(s); }
                            tw.WriteLine();
                            tw.Close();
                            break;
                        }
                    case 5: // 2000
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\2000AppendixPart1.pdf";
                            // Diagnostic messages on the command line
                            Console.WriteLine("Processing pdf 00 for Reference ET");
                            var header = new List<string>(new string[] { "Year 00 Reference ET Values:" });
                            //var outFile = System.IO.Path.GetTempFileName() + ".txt";
                            string outFile = "U:\\ReferenceET_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            { tw.Write(s); }
                            tw.WriteLine();

                            int i = 0;
                            int page = 0;
                            // Read PDF into a string variable
                            while (i < 3)
                            {
                                string result = "";
                                string pattern = "";
                                switch (i)
                                {
                                    case 0:
                                        {
                                            page = 67;
                                            result = "MohaveET  ";
                                            pattern = @"Reference ET, inches \n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 1:
                                        {
                                            page = 152;
                                            pattern = @"Reference ET, inches \n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            result = "Parker/PaloVerdeET  ";
                                            break;
                                        }
                                    case 2:
                                        {
                                            page = 237;
                                            result = "YumaET  ";
                                            pattern = @"Reference ET, inches " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }



                                }
                                var pdf = pdfText(fName, page);
                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                if (matches.Count < 1)
                                {
                                    result = result + "File Not Readable";
                                }
                                else
                                {

                                    result = result + matches[0].Value.Replace("Reference ET, inches", "").Trim();
                                }
                                // Add our found result to the output container
                                outPut.Add(result);
                                i += 1;
                            }
                            
                            foreach (String s in outPut)
                            { tw.WriteLine(s); }
                            tw.WriteLine();
                            tw.Close();
                            break;
                        }
                    case 6: // 2001
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\01AppendixPart1.pdf";
                            // Diagnostic messages on the command line
                            Console.WriteLine("Processing pdf 01 for Reference ET");
                            var header = new List<string>(new string[] { "Year 01 Reference ET Values:" });
                            //var outFile = System.IO.Path.GetTempFileName() + ".txt";
                            string outFile = "U:\\ReferenceET_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            { tw.Write(s); }
                            tw.WriteLine();

                            int i = 0;
                            int page = 0;
                            // Read PDF into a string variable
                            while (i < 3)
                            {
                                string result = "";
                                string pattern = "";
                                switch (i)
                                {
                                    case 0:
                                        {
                                            page = 67;
                                            result = "MohaveET  ";
                                            pattern = @"Reference ET, inches \n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 1:
                                        {
                                            page = 158;
                                            pattern = @"Reference ET, inches \n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            result = "Parker/PaloVerdeET  ";
                                            break;
                                        }
                                    case 2:
                                        {
                                            page = 249;
                                            result = "YumaET  ";
                                            pattern = @"Reference ET, inches \n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }



                                }
                                var pdf = pdfText(fName, page);
                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                if (matches.Count < 1)
                                {
                                    result = result + "File Not Readable";
                                }
                                else
                                {

                                    result = result + matches[0].Value.Replace("Reference ET, inches", "").Trim();
                                }
                                // Add our found result to the output container
                                outPut.Add(result);
                                i += 1;
                            }
                            foreach (String s in outPut)
                            { tw.WriteLine(s); }
                            tw.WriteLine();
                            tw.Close();
                            break;
                        }
                    case 7: // 2002
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\02AppendixPart1.pdf";
                            // Diagnostic messages on the command line
                            Console.WriteLine("Processing pdf 02 for Reference ET");
                            var header = new List<string>(new string[] { "Year 02 Reference ET Values:" });
                            //var outFile = System.IO.Path.GetTempFileName() + ".txt";
                            string outFile = "U:\\ReferenceET_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            { tw.Write(s); }
                            tw.WriteLine();

                            int i = 0;
                            int page = 0;
                            // Read PDF into a string variable
                            while (i < 3)
                            {
                                string result = "";
                                string pattern = "";
                                switch (i)
                                {
                                    case 0:
                                        {
                                            page = 66;
                                            result = "MohaveET  ";
                                            pattern = @"Reference ET, inches \n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 1:
                                        {
                                            page = 157;
                                            pattern = @"Reference ET, inches \n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            result = "Parker/PaloVerdeET  ";
                                            break;
                                        }
                                    case 2:
                                        {
                                            page = 248;
                                            result = "YumaET  ";
                                            pattern = @"Reference ET, inches \n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }



                                }
                                var pdf = pdfText(fName, page);
                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                if (matches.Count < 1)
                                {
                                    result = result + "File Not Readable";
                                }
                                else
                                {

                                    result = result + matches[0].Value.Replace("Reference ET, inches", "").Trim();
                                }
                                // Add our found result to the output container
                                outPut.Add(result);
                                i += 1;
                            }

                            foreach (String s in outPut)
                            { tw.WriteLine(s); }
                            tw.WriteLine();
                            tw.Close();
                            break;
                        }
                    case 8: // 2003
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\2003LCRAS.pdf";
                            // Diagnostic messages on the command line
                            Console.WriteLine("Processing pdf 03 for Reference ET");
                            var header = new List<string>(new string[] { "Year 03 Reference ET Values:" });
                            //var outFile = System.IO.Path.GetTempFileName() + ".txt";
                            string outFile = "U:\\ReferenceET_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            { tw.Write(s); }
                            tw.WriteLine();

                            int i = 0;
                            int page = 0;
                            // Read PDF into a string variable
                            while (i < 3)
                            {
                                string result = "";
                                string pattern = "";
                                switch (i)
                                {
                                    case 0:
                                        {
                                            page = 105;
                                            result = "MohaveET  ";
                                            pattern = @"Reference ET, inches \n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 1:
                                        {
                                            page = 196;
                                            pattern = @"Reference ET, inches \n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            result = "Parker/PaloVerdeET  ";
                                            break;
                                        }
                                    case 2:
                                        {
                                            page = 287;
                                            result = "YumaET  ";
                                            pattern = @"Reference ET, inches \n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }



                                }
                                var pdf = pdfText(fName, page);
                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                if (matches.Count < 1)
                                {
                                    result = result + "File Not Readable";
                                }
                                else
                                {

                                    result = result + matches[0].Value.Replace("Reference ET, inches", "").Trim();
                                }
                                // Add our found result to the output container
                                outPut.Add(result);
                                i += 1;
                            }

                            foreach (String s in outPut)
                            { tw.WriteLine(s); }
                            tw.WriteLine();
                            tw.Close();
                            break;
                        }
                    case 9: // 2004
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\2004LCRAS.pdf";
                            // Diagnostic messages on the command line
                            Console.WriteLine("Processing pdf 04 for Reference ET");
                            var header = new List<string>(new string[] { "Year 04 Reference ET Values:" });
                            string outFile = "U:\\ReferenceET_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            { tw.Write(s); }
                            tw.WriteLine();

                            int i = 0;
                            int page = 0;
                            // Read PDF into a string variable
                            while (i < 5)
                            {
                                string result = "";
                                string pattern = "";
                                switch (i)
                                {
                                    case 0:
                                        {
                                            page = 115;
                                            result = "MohaveET  ";
                                            pattern = @"Reference ET \(inches\) " + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 1:
                                        {
                                            page = 206;
                                            result = "Parker/PaloVerdeET  ";
                                            pattern = @"Reference ET " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 2:
                                        {
                                            page = 485;
                                            result = "YumaET  ";
                                            pattern = @"Reference ET " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 3:
                                        {
                                            page = 388;
                                            result = "Imperial/CoachellaValleyET  ";
                                            pattern = @"Reference ET " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 4:
                                        {
                                            page = 297;
                                            result = "Wellton-MohawkET  ";
                                            pattern = @"Reference ET " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }



                                }
                                var pdf = pdfText(fName, page);
                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                if (matches.Count < 1)
                                {
                                    result = result + "File Not Readable";
                                }
                                else
                                {
                                    if(result == "MohaveET  ")
                                    {
                                        result = result + matches[0].Value.Replace("Reference ET (inches)", "").Trim();
                                    }
                                    else
                                    result = result + matches[0].Value.Replace("Reference ET", "").Trim();
                                }
                                // Add our found result to the output container
                                outPut.Add(result);
                                i += 1;
                            }
                            foreach (String s in outPut)
                            { tw.WriteLine(s); }
                            tw.WriteLine();
                            tw.Close();
                            break;
                        }
                    case 10: // 2005
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\2005LCRAS.pdf";
                            // Diagnostic messages on the command line
                            Console.WriteLine("Processing pdf 05 for Reference ET");
                            var header = new List<string>(new string[] { "Year 05 Reference ET Values:" });
                            //var outFile = System.IO.Path.GetTempFileName() + ".txt";
                            string outFile = "U:\\ReferenceET_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            { tw.Write(s); }
                            tw.WriteLine();

                            int i = 0;
                            int page = 0;
                            // Read PDF into a string variable
                            while (i < 5)
                            {
                                string result = "";
                                string pattern = "";
                                switch (i)
                                {
                                    case 0:
                                        {
                                            page = 111;
                                            result = "MohaveET  ";
                                            pattern = @"Reference ET \(inches\) " + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 1:
                                        {
                                            page = 203;
                                            result = "Parker/PaloVerdeET  ";
                                            pattern = @"Reference ET " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 2:
                                        {
                                            page = 484;
                                            result = "YumaET  ";
                                            pattern = @"Reference ET " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 3:
                                        {
                                            page = 387;
                                            result = "Imperial/CoachellaValleyET  ";
                                            pattern = @"Reference ET " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 4:
                                        {
                                            page = 295;
                                            result = "Wellton-MohawkET  ";
                                            pattern = @"Reference ET " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }



                                }
                                var pdf = pdfText(fName, page);
                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                if (matches.Count < 1)
                                {
                                    result = result + "File Not Readable";
                                }
                                else
                                {
                                    if (result == "MohaveET  ")
                                    {
                                        result = result + matches[0].Value.Replace("Reference ET (inches)", "").Trim();
                                    }
                                    else
                                        result = result + matches[0].Value.Replace("Reference ET", "").Trim();
                                }
                                // Add our found result to the output container
                                outPut.Add(result);
                                i += 1;
                            }
                            foreach (String s in outPut)
                            { tw.WriteLine(s); }
                            tw.WriteLine();
                            tw.Close();
                            break;
                        }
                    case 11: // 2006
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\2006LCRAS.pdf";
                            // Diagnostic messages on the command line
                            Console.WriteLine("Processing pdf 06 for Reference ET");
                            var header = new List<string>(new string[] { "Year 06 Reference ET Values:" });
                            //var outFile = System.IO.Path.GetTempFileName() + ".txt";
                            string outFile = "U:\\ReferenceET_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            { tw.Write(s); }
                            tw.WriteLine();

                            int i = 0;
                            int page = 0;
                            // Read PDF into a string variable
                            while (i < 5)
                            {
                                string result = "";
                                string pattern = "";
                                switch (i)
                                {
                                    case 0:
                                        {
                                            page = 111;
                                            result = "MohaveET  ";
                                            pattern = @"Reference ET \(inches\) " + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 1:
                                        {
                                            page = 203;
                                            result = "Parker/PaloVerdeET  ";
                                            pattern = @"Reference ET " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 2:
                                        {
                                            page = 484;
                                            result = "YumaET  ";
                                            pattern = @"Reference ET " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 3:
                                        {
                                            page = 387;
                                            result = "Imperial/CoachellaValleyET  ";
                                            pattern = @"Reference ET " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 4:
                                        {
                                            page = 295;
                                            result = "Wellton-MohawkET  ";
                                            pattern = @"Reference ET " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }



                                }
                                var pdf = pdfText(fName, page);
                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                if (matches.Count < 1)
                                {
                                    result = result + "File Not Readable";
                                }
                                else
                                {
                                    if (result == "MohaveET  ")
                                    {
                                        result = result + matches[0].Value.Replace("Reference ET (inches)", "").Trim();
                                    }
                                    else
                                        result = result + matches[0].Value.Replace("Reference ET", "").Trim();
                                }
                                // Add our found result to the output container
                                outPut.Add(result);
                                i += 1;
                            }

                            //var outFile = System.IO.Path.GetTempFileName() + ".txt";
                            //tw = new StreamWriter(outFile);
                            foreach (String s in outPut)
                            { tw.WriteLine(s); }
                            tw.WriteLine();
                            tw.Close();
                            // Open the file
                            //System.Diagnostics.Process.Start(outFile);
                            break;
                        } 
                    case 12: // 2007
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\2007LCRAS.pdf";
                            // Diagnostic messages on the command line
                            Console.WriteLine("Processing pdf 07 for Reference ET");
                            var header = new List<string>(new string[] { "Year 07 Reference ET Values:" });
                            //var outFile = System.IO.Path.GetTempFileName() + ".txt";
                            string outFile = "U:\\ReferenceET_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            { tw.Write(s); }
                            tw.WriteLine();

                            int i = 0;
                            int page = 0;
                            // Read PDF into a string variable
                            while (i < 5)
                            {
                                string result = "";
                                string pattern = "";
                                switch (i)
                                {
                                    case 0:
                                        {
                                            page = 111;
                                            result = "MohaveET  ";
                                            pattern = @"Reference ET \(inches\) " + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 1:
                                        {
                                            page = 203;
                                            result = "Parker/PaloVerdeET  ";
                                            pattern = @"Reference ET " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 2:
                                        {
                                            page = 484;
                                            result = "YumaET  ";
                                            pattern = @"Reference ET " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 3:
                                        {
                                            page = 387;
                                            result = "Imperial/CoachellaValleyET  ";
                                            pattern = @"Reference ET " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 4:
                                        {
                                            page = 295;
                                            result = "Wellton-MohawkET  ";
                                            pattern = @"Reference ET " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }



                                }
                                var pdf = pdfText(fName, page);
                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                if (matches.Count < 1)
                                {
                                    result = result + "File Not Readable";
                                }
                                else
                                {
                                    if (result == "MohaveET  ")
                                    {
                                        result = result + matches[0].Value.Replace("Reference ET (inches)", "").Trim();
                                    }
                                    else
                                        result = result + matches[0].Value.Replace("Reference ET", "").Trim();
                                }
                                // Add our found result to the output container
                                outPut.Add(result);
                                i += 1;
                            }
                            foreach (String s in outPut)
                            { tw.WriteLine(s); }
                            tw.WriteLine();
                            tw.Close();
                            break;
                        }
                    case 13: // 2008
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\2008LCRAS.pdf";
                            // Diagnostic messages on the command line
                            Console.WriteLine("Processing pdf 08 for Reference ET");
                            var header = new List<string>(new string[] { "Year 08 Reference ET Values:" });
                            //var outFile = System.IO.Path.GetTempFileName() + ".txt";
                            string outFile = "U:\\ReferenceET_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            { tw.Write(s); }
                            tw.WriteLine();

                            int i = 0;
                            int page = 0;
                            // Read PDF into a string variable
                            while (i < 5)
                            {
                                string result = "";
                                string pattern = "";
                                switch (i)
                                {
                                    case 0:
                                        {
                                            page = 104;
                                            result = "FortMojave/MohaveValleyET  ";
                                            pattern = @"Reference ET \(inches\) " + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 1:
                                        {
                                            page = 196;
                                            result = "Parker/PaloVerdeET  ";
                                            pattern = @"Reference ET " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 2:
                                        {
                                            page = 477;
                                            result = "YumaET  ";
                                            pattern = @"Reference ET " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 3:
                                        {
                                            page = 380;
                                            result = "Imperial/CoachellaValleyET  ";
                                            pattern = @"Reference ET " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 4:
                                        {
                                            page = 288;
                                            result = "Wellton-MohawkET  ";
                                            pattern = @"Reference ET " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }



                                }
                                var pdf = pdfText(fName, page);
                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                if (matches.Count < 1)
                                {
                                    result = result + "File Not Readable";
                                }
                                else
                                {
                                    if (result == "FortMojave/MohaveValleyET  ")
                                    {
                                        result = result + matches[0].Value.Replace("Reference ET (inches)", "").Trim();
                                    }
                                    else
                                        result = result + matches[0].Value.Replace("Reference ET", "").Trim();
                                }
                                // Add our found result to the output container
                                outPut.Add(result);
                                i += 1;
                            }
                            foreach (String s in outPut)
                            { tw.WriteLine(s); }
                            tw.WriteLine();
                            tw.Close();
                            // Open the file
                            //System.Diagnostics.Process.Start(outFile);
                            break;
                        }
                    case 14: // 2009
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\report09.pdf";
                            // Diagnostic messages on the command line
                            Console.WriteLine("Processing pdf 09 For Reference ET");
                            var header = new List<string>(new string[] { "Year 09 Reference ET Values:" });
                            //var outFile = System.IO.Path.GetTempFileName() + ".txt";
                            string outFile = "U:\\ReferenceET_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            { tw.Write(s); }
                            tw.WriteLine();

                            int i = 0;
                            int page = 0;
                            // Read PDF into a string variable
                            while (i < 5)
                            {
                                string result = "";
                                string pattern = "";
                                switch (i)
                                {
                                    case 0:
                                        {
                                            page = 97;
                                            result = "FortMojave/MohaveValleyET  ";
                                            pattern = @"Reference ET " + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 1:
                                        {
                                            page = 98;
                                            result = "Parker/PaloVerdeET  ";
                                            pattern = @"Reference ET " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 2:
                                        {
                                            page = 100;
                                            result = "YumaET  ";
                                            pattern = @"Reference ET " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 3:
                                        {
                                            page = 101;
                                            result = "Imperial/CoachellaValleyET  ";
                                            pattern = @"Reference ET " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 4:
                                        {
                                            page = 99;
                                            result = "Wellton-MohawkET  ";
                                            pattern = @"Reference ET " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }



                                }
                                var pdf = pdfText(fName, page);
                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                if (matches.Count < 1)
                                {
                                    result = result + "File Not Readable";
                                }
                                else
                                {
                                    result = result + matches[0].Value.Replace("Reference ET", "").Trim();
                                }
                                // Add our found result to the output container
                                outPut.Add(result);
                                i += 1;
                            }
                            foreach (String s in outPut)
                            { tw.WriteLine(s); }
                            tw.WriteLine();
                            tw.Close();
                            // Open the file
                            //System.Diagnostics.Process.Start(outFile);
                            break;
                        }
                    case 15: // 2010
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\report10.pdf";
                            // Diagnostic messages on the command line
                            Console.WriteLine("Processing pdf 10 for Reference ET");
                            var header = new List<string>(new string[] { "Year 10 Reference ET Values:" });
                            //var outFile = System.IO.Path.GetTempFileName() + ".txt";
                            string outFile = "U:\\ReferenceET_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            { tw.Write(s); }
                            tw.WriteLine();

                            int i = 0;
                            int page = 0;
                            // Read PDF into a string variable
                            while (i < 5)
                            {
                                string result = "";
                                string pattern = "";
                                switch (i)
                                {
                                    case 0:
                                        {
                                            page = 95;
                                            result = "FortMojave/MohaveValleyET  ";
                                            pattern = @"Reference ET " + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 1:
                                        {
                                            page = 96;
                                            result = "Parker/PaloVerdeET  ";
                                            pattern = @"Reference ET " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 2:
                                        {
                                            page = 98;
                                            result = "YumaET  ";
                                            pattern = @"Reference ET " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 3:
                                        {
                                            page = 99;
                                            result = "Imperial/CoachellaValleyET  ";
                                            pattern = @"Reference ET " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 4:
                                        {
                                            page = 97;
                                            result = "Wellton-MohawkET  ";
                                            pattern = @"Reference ET " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }



                                }
                                var pdf = pdfText(fName, page);
                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                if (matches.Count < 1)
                                {
                                    result = result + "File Not Readable";
                                }
                                else
                                {
                                   result = result + matches[0].Value.Replace("Reference ET", "").Trim();
                                }
                                // Add our found result to the output container
                                outPut.Add(result);
                                i += 1;
                            }
                            foreach (String s in outPut)
                            { tw.WriteLine(s); }
                            tw.WriteLine();
                            tw.Close();
                            // Open the file
                            //System.Diagnostics.Process.Start(outFile);
                            break;
                        } 
                    case 16: // 2011
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\report11.pdf";
                            // Diagnostic messages on the command line
                            Console.WriteLine("Processing pdf 11 for Reference ET");
                            var header = new List<string>(new string[] { "Year 11 Reference ET Values:" });
                            //var outFile = System.IO.Path.GetTempFileName() + ".txt";
                            string outFile = "U:\\ReferenceET_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            { tw.Write(s); }
                            tw.WriteLine();

                            int i = 0;
                            int page = 0;
                            // Read PDF into a string variable
                            while (i < 5)
                            {
                                string result = "";
                                string pattern = "";
                                switch (i)
                                {
                                    case 0:
                                        {
                                            page = 107;
                                            result = "FortMojave/MohaveValleyET  ";
                                            pattern = @"Reference ET " + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 1:
                                        {
                                            page = 109;
                                            result = "Parker/PaloVerdeET  ";
                                            pattern = @"Reference ET " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 2:
                                        {
                                            page = 113;
                                            result = "YumaET  ";
                                            pattern = @"Reference ET " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 3:
                                        {
                                            page = 115;
                                            result = "Imperial/CoachellaValleyET  ";
                                            pattern = @"Reference ET " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 4:
                                        {
                                            page = 111;
                                            result = "Wellton-MohawkET  ";
                                            pattern = @"Reference ET " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }



                                }
                                var pdf = pdfText(fName, page);
                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                if (matches.Count < 1)
                                {
                                    result = result + "File Not Readable";
                                }
                                else
                                {
                                    result = result + matches[0].Value.Replace("Reference ET", "").Trim();
                                }
                                // Add our found result to the output container
                                outPut.Add(result);
                                i += 1;
                            }
                            foreach (String s in outPut)
                            { tw.WriteLine(s); }
                            tw.WriteLine();
                            tw.Close();
                            // Open the file
                            System.Diagnostics.Process.Start(outFile);
                            break;
                        }
                }//bracket for switch in main while
                pdfnum++; // update increment to go through each pdf
            }//bracket for main while loop for Reference ET 95-2011
            Console.WriteLine(); // newline in console 
            pdfnum = 0; // reset pdf increment 
            while(pdfnum <= 16)
            {
                switch (pdfnum)
                {
                    case 0:
                        {
                            // creates variable to hold in a list of string variables 
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\Appendix95.pdf";
                            // Diagnostic messages on the command line
                            Console.WriteLine("Processing pdf 95 for Precipitation");
                            var header = new List<string>(new string[] { "Year 95 Precipitation Values:" });
                            //var outFile = System.IO.Path.GetTempFileName() + ".txt";
                            string outFile = "U:\\Precipitation_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile);
                            foreach (String s in header)
                            { tw.Write(s); }
                            tw.WriteLine();

                            int i = 0;
                            int page = 0;
                            // Read PDF into a string variable
                            while (i < 6)
                            {
                                string pattern = "";
                                string result = "";
                                // Switch statement created to go to certain pages the ET Crops are for each area.
                                switch (i)
                                {
                                    case 0:
                                        {
                                            page = 20;
                                            result = "MohavePrecip  ";
                                            pattern = @"Total Precipitation, inches\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 1:
                                        {
                                            page = 90;
                                            result = "ParkerPrecip  ";
                                            pattern = @"Total Precipitation, inches\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 2:
                                        {
                                            page = 160;
                                            result = "PaloVerdePrecip  ";
                                            pattern = @"Total Precipitation, inches  \(These values from PVID rainfall gage, not CIMIS station\)\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 3:
                                        {
                                            page = 230;
                                            result = "NorthGilaPrecip  ";
                                            pattern = @"Total Precipitation, inches\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 4:
                                        {
                                            page = 300;
                                            result = "YumaValleyPrecip  ";
                                            pattern = @"Total Precipitation, inches\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 5:
                                        {
                                            page = 370;
                                            result = "YumaMesaPrecip  ";
                                            pattern = @"Total Precipitation, inches\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                }
                                // Method call to find pdf page and convert page into a string 
                                var pdf = pdfText(fName, page);
                                MatchCollection matches = Regex.Matches(pdf, pattern);

                                // If no matches are found display error message
                                if (matches.Count < 1)
                                {
                                    result = result + "File Not Readable";
                                }
                                // Else print 
                                else
                                {
                                    if(i == 2)
                                    {
                                        result = result + matches[0].Value.Replace("Total Precipitation, inches  (These values from PVID rainfall gage, not CIMIS station)", "").Trim();
                                    }
                                    else
                                    result = result + matches[0].Value.Replace("Total Precipitation, inches", "").Trim();
                                }
                                // Add our found result to the output container
                                outPut.Add(result);
                                i += 1;
                            }

                            foreach (String s in outPut)
                            { tw.WriteLine(s); }
                            tw.WriteLine();
                            tw.Close();
                            break;
                        }
                    case 1:
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\Appendix96.pdf";
                            // Diagnostic messages on the command line
                            Console.WriteLine("Processing pdf 96 for Precipitation");
                            var header = new List<string>(new string[] { "Year 96 Precipitation Values:" });
                            //var outFile = System.IO.Path.GetTempFileName() + ".txt";
                            string outFile = "U:\\Precipitation_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            { tw.Write(s); }
                            tw.WriteLine();

                            int i = 0;
                            int page = 0;
                            // Read PDF into a string variable
                            while (i < 6)
                            {
                                string result = "";
                                string pattern = "";
                                switch (i)
                                {
                                    case 0:
                                        {
                                            page = 18;
                                            result = "MohavePrecip  ";
                                            pattern = @"Total Precipitation, inches \(taken from worksheet file 9620rain\.wk4\)\n" + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 1:
                                        {
                                            page = 87;
                                            result = "ParkerPrecip  ";
                                            pattern = @"Total Precipitation, inches \(taken from worksheet file 9608rain\.wk4\)\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 2:
                                        {
                                            page = 156;
                                            result = "PaloVerdePrecip  ";
                                            pattern = @"Total Precipitation, inches \(from data file 9672rawd\.wk4\)\n" + @"\d+\D\d+\s" +
                                     @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                     @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                     @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 3:
                                        {
                                            page = 225;
                                            result = "NorthGilaPrecip  ";
                                            pattern = @"Total Precipitation, inches \(taken from worksheet file 9614rain\.wk4\)\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 4:
                                        {
                                            page = 294;
                                            result = "YumaValleyPrecip  ";
                                            pattern = @"Total Precipitation, inches \(taken from worksheet file 9602rain\.wk4\)\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 5:
                                        {
                                            page = 363;
                                            result = "YumaMesaPrecip  ";
                                            pattern = @"Total Precipitation, inches \(taken from worksheet file 9603rain\.wk4\)\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                }
                                var pdf = pdfText(fName, page);
                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                if (matches.Count < 1)
                                {
                                    result = result + "File Not Readable";
                                }
                                else
                                {
                                    if (i == 0)
                                    {
                                        result = result + matches[0].Value.Replace("Total Precipitation, inches (taken from worksheet file 9620rain.wk4)", "").Trim();
                                    }
                                    else if (i == 1)
                                    {
                                        result = result + matches[0].Value.Replace("Total Precipitation, inches (taken from worksheet file 9608rain.wk4)", "").Trim();
                                    }
                                    else if (i == 2)
                                    {
                                        result = result + matches[0].Value.Replace("Total Precipitation, inches (from data file 9672rawd.wk4)", "").Trim();
                                    }
                                    else if(i == 3)
                                    {
                                        result = result + matches[0].Value.Replace("Total Precipitation, inches (taken from worksheet file 9614rain.wk4)", "").Trim();
                                    }
                                    else if (i == 4)
                                    {
                                        result = result + matches[0].Value.Replace("Total Precipitation, inches (taken from worksheet file 9602rain.wk4)", "").Trim();
                                    }
                                    else
                                        result = result + matches[0].Value.Replace("Total Precipitation, inches (taken from worksheet file 9603rain.wk4)", "").Trim();
                                   
                                }
                                // Add our found result to the output container
                                outPut.Add(result);
                                i += 1;
                            }

                            foreach (String s in outPut)
                            { tw.WriteLine(s); }
                            tw.WriteLine();
                            tw.Close();

                            //
                            break;
                        }
                    case 2:
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\Appendix97.pdf";
                            // Diagnostic messages on the command line
                            Console.WriteLine("Processing pdf 97 for Precipitation");
                            var header = new List<string>(new string[] { "Year 97 Precipitation Values:" });
                            //var outFile = System.IO.Path.GetTempFileName() + ".txt";
                            string outFile = "U:\\Precipitation_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            { tw.Write(s); }
                            tw.WriteLine();

                            int i = 0;
                            int page = 0;
                            // Read PDF into a string variable
                            while (i < 7)
                            {
                                string result = "";
                                string pattern = "";
                                switch (i)
                                {
                                    case 0:
                                        {
                                            page = 31;
                                            result = "MohavePrecip  ";
                                            pattern = @"Total Precipitation, inches \(taken from worksheet file 9720rain\.wk4\)\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 1:
                                        {
                                            page = 100;
                                            result = "ParkerPrecip  ";
                                            pattern = @"Total Precipitation, inches \(taken from worksheet file 9708rain\.wk4\)\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            
                                            break;
                                        }
                                    case 2:
                                        {
                                            page = 169;
                                            result = "PaloVerdePrecip  ";
                                            pattern = @"Total Precipitation, inches \(from data file pv97dat\.wk4\)\n" + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 3:
                                        {
                                            page = 307;
                                            result = "NorthGilaPrecip  ";
                                            pattern = @"Total Precipitation, inches \(taken from worksheet file 9714rain\.wk4\)\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 4:
                                        {
                                            page = 376;
                                            result = "YumaValleyPrecip  ";
                                            pattern = @"Total Precipitation, inches \(taken from worksheet file 9702rain\.wk4\)\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 5:
                                        {
                                            page = 445;
                                            result = "YumaMesaPrecip  ";
                                            pattern = @"Total Precipitation, inches \(taken from worksheet file 9703rain\.wk4\)\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 6:
                                        {
                                            page = 238;
                                            result = "BlytheNEPrecip  ";
                                            pattern = @"Total Precipitation, inches \(from data file pv97dat\.wk4\)\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                }
                                var pdf = pdfText(fName, page); // include extra backslash for path

                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                if (matches.Count < 1)
                                {
                                    result = result + "File Not Readable";
                                }
                                else
                                {
                                    if (i == 0)
                                    {
                                        result = result + matches[0].Value.Replace("Total Precipitation, inches (taken from worksheet file 9720rain.wk4)", "").Trim();
                                    }
                                    else if (i == 1)
                                    {
                                        result = result + matches[0].Value.Replace("Total Precipitation, inches (taken from worksheet file 9708rain.wk4)", "").Trim();
                                    }
                                    else if (i == 2)
                                    {
                                        result = result + matches[0].Value.Replace("Total Precipitation, inches (from data file pv97dat.wk4)\n", "").Trim();
                                    }
                                    else if (i == 3)
                                    {
                                        result = result + matches[0].Value.Replace("Total Precipitation, inches (taken from worksheet file 9714rain.wk4)", "").Trim();
                                    }
                                    else if (i == 4)
                                    {
                                        result = result + matches[0].Value.Replace("Total Precipitation, inches (taken from worksheet file 9702rain.wk4)", "").Trim();
                                    }
                                    else if (i == 5)
                                    {
                                        result = result + matches[0].Value.Replace("Total Precipitation, inches (taken from worksheet file 9703rain.wk4)", "").Trim();
                                    }
                                    else 
                                        result = result + matches[0].Value.Replace("Total Precipitation, inches (from data file pv97dat.wk4)", "").Trim();
                                }
                                // Add our found result to the output container
                                outPut.Add(result);
                                i += 1;
                            }

                            foreach (String s in outPut)
                            { tw.WriteLine(s); }
                            tw.WriteLine();
                            tw.Close();
                            
                            break;

                        }
                    case 3:
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\Appendix98.pdf";
                            // Diagnostic messages on the command line
                            Console.WriteLine("Processing pdf 98 for Precipitation");
                            var header = new List<string>(new string[] { "Year 98 Precipitation Values:" });
                            //var outFile = System.IO.Path.GetTempFileName() + ".txt";
                            string outFile = "U:\\Precipitation_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            { tw.Write(s); }
                            tw.WriteLine();

                            int i = 0;
                            int page = 0;
                            // Read PDF into a string variable
                            while (i < 6)
                            {
                                string result = "";
                                string pattern = "";
                                switch (i)
                                {
                                    case 0:
                                        {
                                            page = 30;
                                            result = "MohavePrecip  ";
                                            pattern = @"Total Precipitation, inches \(from data file 9820rain\.wk4\)\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 1:
                                        {
                                            page = 98;
                                            result = "ParkerPrecip  ";
                                            pattern = @"Total Precipitation, inches \(taken from data file 9808rain\.wk4\)\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                         
                                            break;
                                        }
                                    case 2:
                                        {
                                            page = 166;
                                            result = "PaloVerde/BlythePrecip  ";
                                            pattern = @"Total Precipitation, inches \(from data file pvppt98\.wk4\)\n" + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 3:
                                        {
                                            page = 235;
                                            result = "NorthGilaPrecip  ";
                                            pattern = @"Total Precipitation, inches \(taken from data file 9814rain\.wk4\)\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 4:
                                        {
                                            page = 303;
                                            result = "YumaValleyPrecip  ";
                                            pattern = @"Total Precipitation, inches \(taken from data file 9802rain\.wk4\)\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 5:
                                        {
                                            page = 371;
                                            result = "YumaMesaPrecip  ";
                                            pattern = @"Total Precipitation, inches \(taken from data file 9803rain\.wk4\)\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }

                                }
                                var pdf = pdfText(fName, page);
                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                if (matches.Count < 1)
                                {
                                    result = result + "File Not Readable";
                                }
                                else
                                {
                                    if (i == 0)
                                    {
                                        result = result + matches[0].Value.Replace("Total Precipitation, inches (from data file 9820rain.wk4)", "").Trim();
                                    }
                                    else if (i == 1)
                                    {
                                        result = result + matches[0].Value.Replace("Total Precipitation, inches (taken from data file 9808rain.wk4)", "").Trim();
                                    }
                                    else if (i == 2)
                                    {
                                        result = result + matches[0].Value.Replace("Total Precipitation, inches (from data file pvppt98.wk4)", "").Trim();
                                    }
                                    else if (i == 3)
                                    {
                                        result = result + matches[0].Value.Replace("Total Precipitation, inches (taken from data file 9814rain.wk4)", "").Trim();
                                    }
                                    else if (i == 4)
                                    {
                                        result = result + matches[0].Value.Replace("Total Precipitation, inches (taken from data file 9802rain.wk4)", "").Trim();
                                    }
                                    else                                     
                                        result = result + matches[0].Value.Replace("Total Precipitation, inches (taken from data file 9803rain.wk4)", "").Trim();
                                    
                                }
                                // Add our found result to the output container
                                outPut.Add(result);
                                i += 1;
                            }

                            foreach (String s in outPut)
                            { tw.WriteLine(s); }
                            tw.WriteLine();
                            tw.Close();
                            
                            break;
                        }
                    case 4:
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\Appendix99.pdf";
                            // Diagnostic messages on the command line
                            Console.WriteLine("Processing pdf 99 for Precipitation");
                            var header = new List<string>(new string[] { "Year 99 Precipitation Values:" });
                            //var outFile = System.IO.Path.GetTempFileName() + ".txt";
                            string outFile = "U:\\Precipitation_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            { tw.Write(s); }
                            tw.WriteLine();

                            int i = 0;
                            int page = 0;
                            // Read PDF into a string variable
                            while (i < 3)
                            {
                                string result = "";
                                string pattern = "";
                                switch (i)
                                {
                                    case 0:
                                        {
                                            page = 19;
                                            result = "MohavePrecip  ";
                                            pattern = @"Precipitation, inches \(from data file ftmorain\.wk4\)\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 1:
                                        {
                                            page = 118;
                                            result = "Parker/PaloVerdePrecip  ";
                                            pattern = @"Precipitation, inches \(from data file pvcrrain\.wk4\)\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                          
                                            break;
                                        }
                                    case 2:
                                        {
                                            page = 220;
                                            result = "YumaPrecip  ";
                                            pattern = @"Precipitation " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }



                                }
                                var pdf = pdfText(fName, page);
                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                if (matches.Count < 1)
                                {
                                    result = result + "File Not Readable";
                                }
                                else
                                {
                                    if(i == 0)
                                    {
                                        result = result + matches[0].Value.Replace("Precipitation, inches (from data file ftmorain.wk4)", "").Trim();
                                    }
                                    else if(i == 1)
                                    {
                                        result = result + matches[0].Value.Replace("Precipitation, inches (from data file pvcrrain.wk4)", "").Trim();
                                    }
                                    else
                                        result = result + matches[0].Value.Replace("Precipitation", "").Trim();
                                }
                                // Add our found result to the output container
                                outPut.Add(result);
                                i += 1;
                            }

                            foreach (String s in outPut)
                            { tw.WriteLine(s); }
                            tw.WriteLine();
                            tw.Close();
                            
                            break;
                        }
                    case 5:
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\2000AppendixPart1.pdf";
                            // Diagnostic messages on the command line
                            Console.WriteLine("Processing pdf 00 for Precipitation");
                            var header = new List<string>(new string[] { "Year 00 Precipitation Values:" });
                            //var outFile = System.IO.Path.GetTempFileName() + ".txt";
                            string outFile = "U:\\Precipitation_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            { tw.Write(s); }
                            tw.WriteLine();

                            int i = 0;
                            int page = 0;
                            // Read PDF into a string variable
                            while (i < 3)
                            {
                                string result = "";
                                string pattern = "";
                                switch (i)
                                {
                                    case 0:
                                        {
                                            page = 67;
                                            result = "MohavePrecipitation  ";
                                            pattern = @"Total Precipitation, inches \(from data file ftmorain\.wk4, note daily precipitation Oct\. 1st thru Dec\. 31st for Bullhead City NWS station unavailable\)\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 1:
                                        {
                                            page = 152;
                                            result = "Parker/PaloVerdePrecipitation  ";
                                            pattern = @"Precipitation, inches \(from data file pvcrrain\.wk4\)\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            
                                            break;
                                        }
                                    case 2:
                                        {
                                            page = 237;
                                            result = "YumaPrecipitation  ";
                                            pattern = @"Precipitation " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }



                                }
                                var pdf = pdfText(fName, page);
                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                if (matches.Count < 1)
                                {
                                    result = result + "File Not Readable";
                                }
                                else
                                {

                                    if (i == 0)
                                    {
                                        result = result + matches[0].Value.Replace("Total Precipitation, inches (from data file ftmorain.wk4, note daily precipitation Oct. 1st thru Dec. 31st for Bullhead City NWS station unavailable)", "").Trim();
                                    }
                                    else if (i == 1)
                                    {
                                        result = result + matches[0].Value.Replace("Precipitation, inches (from data file pvcrrain.wk4)", "").Trim();
                                    }
                                    else
                                        result = result + matches[0].Value.Replace("Precipitation", "").Trim();
                                }
                                // Add our found result to the output container
                                outPut.Add(result);
                                i += 1;
                            }

                            foreach (String s in outPut)
                            { tw.WriteLine(s); }
                            tw.WriteLine();
                            tw.Close();
                            
                            break;
                        }
                    case 6:
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\01AppendixPart1.pdf";
                            // Diagnostic messages on the command line
                            Console.WriteLine("Processing pdf 01 for Precipitation");
                            var header = new List<string>(new string[] { "Year 01 Precipitation Values:" });
                            //var outFile = System.IO.Path.GetTempFileName() + ".txt";
                            string outFile = "U:\\Precipitation_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            { tw.Write(s); }
                            tw.WriteLine();

                            int i = 0;
                            int page = 0;
                            // Read PDF into a string variable
                            while (i < 3)
                            {
                                string result = "";
                                string pattern = "";
                                switch (i)
                                {
                                    case 0:
                                        {
                                            page = 67;
                                            result = "MohavePrecipitation  ";
                                            pattern = @"Total Precipitation, inches \(from data file 01ftmorain\.wk4\)\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 1:
                                        {
                                            page = 158;
                                            result = "Parker/PaloVerdePrecipitation  ";
                                            pattern = @"Precipitation, inches \(from data file 01pvcrrain\.xls\)\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            
                                            break;
                                        }
                                    case 2:
                                        {
                                            page = 249;
                                            result = "YumaPrecipitation  ";
                                            pattern = @"Precipitation, inches \(from data file yumarain\.xls\)\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }



                                }
                                var pdf = pdfText(fName, page);
                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                if (matches.Count < 1)
                                {
                                    result = result + "File Not Readable";
                                }
                                else
                                {

                                    if (i == 0)
                                    {
                                        result = result + matches[0].Value.Replace("Total Precipitation, inches (from data file 01ftmorain.wk4)", "").Trim();
                                    }
                                    else if (i == 1)
                                    {
                                        result = result + matches[0].Value.Replace("Precipitation, inches (from data file 01pvcrrain.xls)", "").Trim();
                                    }
                                    else
                                        result = result + matches[0].Value.Replace("Precipitation, inches (from data file yumarain.xls)", "").Trim();
                                }
                                // Add our found result to the output container
                                outPut.Add(result);
                                i += 1;
                            }
                            foreach (String s in outPut)
                            { tw.WriteLine(s); }
                            tw.WriteLine();
                            tw.Close();
                          
                            break;
                        }
                    case 7:
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\02AppendixPart1.pdf";
                            // Diagnostic messages on the command line
                            Console.WriteLine("Processing pdf 02 for Precipitation");
                            var header = new List<string>(new string[] { "Year 02 Precipitation Values:" });
                            //var outFile = System.IO.Path.GetTempFileName() + ".txt";
                            string outFile = "U:\\Precipitation_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            { tw.Write(s); }
                            tw.WriteLine();

                            int i = 0;
                            int page = 0;
                            // Read PDF into a string variable
                            while (i < 3)
                            {
                                string result = "";
                                string pattern = "";
                                switch (i)
                                {
                                    case 0:
                                        {
                                            page = 66;
                                            result = "MohavePrecipitation  ";
                                            pattern = @"Total Precipitation, inches \(from data file 01ftmorain\.wk4\)\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 1:
                                        {
                                            page = 157;
                                            result = "Parker/PaloVerdePrecipitation  ";
                                            pattern = @"Precipitation, inches \(from data file 01pvcrrain\.xls\)\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                            break;
                                        }
                                    case 2:
                                        {
                                            page = 248;
                                            result = "YumaPrecipitation  ";
                                            pattern = @"Precipitation, inches \(from data file yumarain\.xls\)\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }



                                }
                                var pdf = pdfText(fName, page);
                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                if (matches.Count < 1)
                                {
                                    result = result + "File Not Readable";
                                }
                                else
                                {
                                    if (i == 0)
                                    {
                                        result = result + matches[0].Value.Replace("Total Precipitation, inches (from data file 01ftmorain.wk4)", "").Trim();
                                    }
                                    else if (i == 1)
                                    {
                                        result = result + matches[0].Value.Replace("Precipitation, inches (from data file 01pvcrrain.xls)", "").Trim();
                                    }
                                    else
                                        result = result + matches[0].Value.Replace("Precipitation, inches (from data file yumarain.xls)", "").Trim();
                                }
                                // Add our found result to the output container
                                outPut.Add(result);
                                i += 1;
                            }

                            foreach (String s in outPut)
                            { tw.WriteLine(s); }
                            tw.WriteLine();
                            tw.Close();
                            
                            break;
                        }
                    case 8:
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\2003LCRAS.pdf";
                            // Diagnostic messages on the command line
                            Console.WriteLine("Processing pdf 03 for Precipitation");
                            var header = new List<string>(new string[] { "Year 03 Precipitation Values:" });
                            //var outFile = System.IO.Path.GetTempFileName() + ".txt";
                            string outFile = "U:\\Precipitation_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            { tw.Write(s); }
                            tw.WriteLine();

                            int i = 0;
                            int page = 0;
                            // Read PDF into a string variable
                            while (i < 3)
                            {
                                string result = "";
                                string pattern = "";
                                switch (i)
                                {
                                    case 0:
                                        {
                                            page = 105;
                                            result = "MohavePrecipitation  ";
                                            pattern = @"Total Precipitation, inches\.\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 1:
                                        {
                                            page = 196;
                                            result = "Parker/PaloVerdePrecipitation  ";
                                            pattern = @"Precipitation, inches\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                           
                                            break;
                                        }
                                    case 2:
                                        {
                                            page = 287;
                                            result = "YumaPrecipitation  ";
                                            pattern = @"Precipitation, inches\.\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }



                                }
                                var pdf = pdfText(fName, page);
                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                if (matches.Count < 1)
                                {
                                    result = result + "File Not Readable";
                                }
                                else
                                {

                                    if (i == 0)
                                    {
                                        result = result + matches[0].Value.Replace("Total Precipitation, inches.", "").Trim();
                                    }
                                    else if (i == 1)
                                    {
                                        result = result + matches[0].Value.Replace("Precipitation, inches", "").Trim();
                                    }
                                    else
                                        result = result + matches[0].Value.Replace("Precipitation, inches.", "").Trim();
                                }
                                // Add our found result to the output container
                                outPut.Add(result);
                                i += 1;
                            }

                            foreach (String s in outPut)
                            { tw.WriteLine(s); }
                            tw.WriteLine();
                            tw.Close();
                            
                            break;
                        }
                    case 9:
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\2004LCRAS.pdf";
                            // Diagnostic messages on the command line
                            Console.WriteLine("Processing pdf 04 for Precipitation");
                            var header = new List<string>(new string[] { "Year 04 Precipitation Values:" });
                            string outFile = "U:\\Precipitation_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            { tw.Write(s); }
                            tw.WriteLine();

                            int i = 0;
                            int page = 0;
                            // Read PDF into a string variable
                            while (i < 5)
                            {
                                string result = "";
                                string pattern = "";
                                switch (i)
                                {
                                    case 0:
                                        {
                                            page = 115;
                                            result = "MohavePrecipitation  ";
                                            pattern = @"Precipitation \(inches\) " + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 1:
                                        {
                                            page = 206;
                                            result = "Parker/PaloVerdePrecipitation  ";
                                            pattern = @"Precipitation " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 2:
                                        {
                                            page = 485;
                                            result = "YumaPrecipitation  ";
                                            pattern = @"Precipitation " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 3:
                                        {
                                            page = 388;
                                            result = "Imperial/CoachellaValleyPrecipitation  ";
                                            pattern = @"Precipitation " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 4:
                                        {
                                            page = 297;
                                            result = "Wellton-MohawkPrecipitation  ";
                                            pattern = @"Precipitation " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }



                                }
                                var pdf = pdfText(fName, page);
                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                if (matches.Count < 1)
                                {
                                    result = result + "File Not Readable";
                                }
                                else
                                {
                                    if (i == 0)
                                    {
                                        result = result + matches[0].Value.Replace("Precipitation (inches)", "").Trim();
                                    }
                                    else
                                        result = result + matches[0].Value.Replace("Precipitation", "").Trim();
                                }
                                // Add our found result to the output container
                                outPut.Add(result);
                                i += 1;
                            }
                            foreach (String s in outPut)
                            { tw.WriteLine(s); }
                            tw.WriteLine();
                            tw.Close();
                            
                            break;
                        }
                    case 10:
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\2005LCRAS.pdf";
                            // Diagnostic messages on the command line
                            Console.WriteLine("Processing pdf 05 for Precipitation");
                            var header = new List<string>(new string[] { "Year 05 Precipitation Values:" });
                            //var outFile = System.IO.Path.GetTempFileName() + ".txt";
                            string outFile = "U:\\Precipitation_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            { tw.Write(s); }
                            tw.WriteLine();

                            int i = 0;
                            int page = 0;
                            // Read PDF into a string variable
                            while (i < 5)
                            {
                                string result = "";
                                string pattern = "";
                                switch (i)
                                {
                                    case 0:
                                        {
                                            page = 111;
                                            result = "MohavePrecipitation  ";
                                            pattern = @"Precipitation \(inches\) " + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 1:
                                        {
                                            page = 203;
                                            result = "Parker/PaloVerdePrecipitation  ";
                                            pattern = @"Precipitation " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 2:
                                        {
                                            page = 484;
                                            result = "YumaPrecipitation  ";
                                            pattern = @"Precipitation " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 3:
                                        {
                                            page = 387;
                                            result = "Imperial/CoachellaValleyPrecipitation  ";
                                            pattern = @"Precipitation " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 4:
                                        {
                                            page = 295;
                                            result = "Wellton-MohawkPrecipitation  ";
                                            pattern = @"Precipitation " + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }



                                }
                                var pdf = pdfText(fName, page);
                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                if (matches.Count < 1)
                                {
                                    result = result + "File Not Readable";
                                }
                                else
                                {
                                     if (i == 0)
                                    {
                                        result = result + matches[0].Value.Replace("Precipitation (inches)", "").Trim();
                                    }
                                    else
                                        result = result + matches[0].Value.Replace("Precipitation", "").Trim();
                                }
                                // Add our found result to the output container
                                outPut.Add(result);
                                i += 1;
                            }
                            foreach (String s in outPut)
                            { tw.WriteLine(s); }
                            tw.WriteLine();
                            tw.Close();
                           
                            break;
                        }
                    case 11:
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\2006LCRAS.pdf";
                            // Diagnostic messages on the command line
                            Console.WriteLine("Processing pdf 06 for Precipitation");
                            var header = new List<string>(new string[] { "Year 06 Precipitation Values:" });
                            //var outFile = System.IO.Path.GetTempFileName() + ".txt";
                            string outFile = "U:\\Precipitation_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            { tw.Write(s); }
                            tw.WriteLine();

                            int i = 0;
                            int page = 0;
                            // Read PDF into a string variable
                            while (i < 5)
                            {
                                string result = "";
                                string pattern = "";
                                switch (i)
                                {
                                    case 0:
                                        {
                                            page = 111;
                                            result = "MohavePrecipitation  ";
                                            pattern = @"Precipitation \(inches\) " + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 1:
                                        {
                                            page = 203;
                                            result = "Parker/PaloVerdePrecipitation  ";
                                            pattern = @"Precipitation " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 2:
                                        {
                                            page = 484;
                                            result = "YumaPrecipitation  ";
                                            pattern = @"Precipitation " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 3:
                                        {
                                            page = 387;
                                            result = "Imperial/CoachellaValleyPrecipitation  ";
                                            pattern = @"Precipitation " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 4:
                                        {
                                            page = 295;
                                            result = "Wellton-MohawkPrecipitation  ";
                                            pattern = @"Precipitation " + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }



                                }
                                var pdf = pdfText(fName, page);
                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                if (matches.Count < 1)
                                {
                                    result = result + "File Not Readable";
                                }
                                else
                                {
                                    if (i == 0)
                                    {
                                        result = result + matches[0].Value.Replace("Precipitation (inches)", "").Trim();
                                    }
                                    else
                                        result = result + matches[0].Value.Replace("Precipitation", "").Trim();
                                }
                                // Add our found result to the output container
                                outPut.Add(result);
                                i += 1;
                            }

                            //var outFile = System.IO.Path.GetTempFileName() + ".txt";
                            //tw = new StreamWriter(outFile);
                            foreach (String s in outPut)
                            { tw.WriteLine(s); }
                            tw.WriteLine();
                            tw.Close();
                            // Open the file
                            //System.Diagnostics.Process.Start(outFile);
                            
                            break;
                        }
                    case 12:
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\2007LCRAS.pdf";
                            // Diagnostic messages on the command line
                            Console.WriteLine("Processing pdf 07 for Precipitation");
                            var header = new List<string>(new string[] { "Year 07 Precipitation Values:" });
                            //var outFile = System.IO.Path.GetTempFileName() + ".txt";
                            string outFile = "U:\\Precipitation_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            { tw.Write(s); }
                            tw.WriteLine();

                            int i = 0;
                            int page = 0;
                            // Read PDF into a string variable
                            while (i < 5)
                            {
                                string result = "";
                                string pattern = "";
                                switch (i)
                                {
                                    case 0:
                                        {
                                            page = 111;
                                            result = "MohavePrecipitation  ";
                                            pattern = @"Precipitation \(inches\) " + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 1:
                                        {
                                            page = 203;
                                            result = "Parker/PaloVerdePrecipitation  ";
                                            pattern = @"Precipitation " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 2:
                                        {
                                            page = 484;
                                            result = "YumaPrecipitation  ";
                                            pattern = @"Precipitation " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 3:
                                        {
                                            page = 387;
                                            result = "Imperial/CoachellaValleyPrecipitation  ";
                                            pattern = @"Precipitation " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 4:
                                        {
                                            page = 295;
                                            result = "Wellton-MohawkPrecipitation  ";
                                            pattern = @"Precipitation " + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }



                                }
                                var pdf = pdfText(fName, page);
                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                if (matches.Count < 1)
                                {
                                    result = result + "File Not Readable";
                                }
                                else
                                {
                                    if (i == 0)
                                    {
                                        result = result + matches[0].Value.Replace("Precipitation (inches)", "").Trim();
                                    }
                                    else
                                        result = result + matches[0].Value.Replace("Precipitation", "").Trim();
                                }
                                // Add our found result to the output container
                                outPut.Add(result);
                                i += 1;
                            }
                            foreach (String s in outPut)
                            { tw.WriteLine(s); }
                            tw.WriteLine();
                            tw.Close();
                          
                            break;
                        }
                    case 13:
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\2008LCRAS.pdf";
                            // Diagnostic messages on the command line
                            Console.WriteLine("Processing pdf 08 for Precipitation");
                            var header = new List<string>(new string[] { "Year 08 Precipitation Values:" });
                            //var outFile = System.IO.Path.GetTempFileName() + ".txt";
                            string outFile = "U:\\Precipitation_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            { tw.Write(s); }
                            tw.WriteLine();

                            int i = 0;
                            int page = 0;
                            // Read PDF into a string variable
                            while (i < 5)
                            {
                                string result = "";
                                string pattern = "";
                                switch (i)
                                {
                                    case 0:
                                        {
                                            page = 104;
                                            result = "FortMojave/MohaveValleyPrecipitation  ";
                                            pattern = @"Precipitation \(inches\) " + @"\d+\D\d+\s" +
                                        @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                        @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                        @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 1:
                                        {
                                            page = 196;
                                            result = "Parker/PaloVerdePrecipitation  ";
                                            pattern = @"Precipitation " + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 2:
                                        {
                                            page = 477;
                                            result = "YumaPrecipitation  ";
                                            pattern = @"Precipitation " + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 3:
                                        {
                                            page = 380;
                                            result = "Imperial/CoachellaValleyPrecipitation  ";
                                            pattern = @"Precipitation " + @"\d\D\d\d" +
                                         @"\d\D\d\d" + @"\d\D\d\d" + @"\d\D\d\d" + @"\d\D\d\d" +
                                         @"\d\D\d\d" + @"\d\D\d\d" + @"\d\D\d\d" + @"\d\D\d\d" +
                                         @"\d\D\d\d" + @"\d\D\d\d" + @"\d\D\d\d" + @"\d\D\d\d";
                                            break;
                                        }
                                    case 4:
                                        {
                                            page = 288;
                                            result = "Wellton-MohawkPrecipitation  ";
                                            pattern = @"Precipitation " + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }



                                }
                                var pdf = pdfText(fName, page);
                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                if (matches.Count < 1)
                                {
                                    result = result + "File Not Readable";
                                }
                                else
                                {
                                    if (i == 0)
                                    {
                                        result = result + matches[0].Value.Replace("Precipitation (inches)", "").Trim();
                                    }
                                    else
                                        result = result + matches[0].Value.Replace("Precipitation", "").Trim();
                                }
                                // Add our found result to the output container
                                outPut.Add(result);
                                i += 1;
                            }
                            foreach (String s in outPut)
                            { tw.WriteLine(s); }
                            tw.WriteLine();
                            tw.Close();
                            
                            // Open the file
                            //System.Diagnostics.Process.Start(outFile);
                            break;
                        }
                    case 14:
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\report09.pdf";
                            // Diagnostic messages on the command line
                            Console.WriteLine("Processing pdf 09 for Precipitation");
                            var header = new List<string>(new string[] { "Year 09 Precipitation Values:" });
                            //var outFile = System.IO.Path.GetTempFileName() + ".txt";
                            string outFile = "U:\\Precipitation_95to11";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            { tw.Write(s); }
                            tw.WriteLine();

                            int i = 0;
                            int page = 0;
                            // Read PDF into a string variable
                            while (i < 5)
                            {
                                string result = "";
                                string pattern = "";
                                switch (i)
                                {
                                    case 0:
                                        {
                                            page = 97;
                                            result = "FortMojave/MohaveValleyPrecipitation  ";
                                            pattern = @"Precipitation " + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 1:
                                        {
                                            page = 98;
                                            result = "Parker/PaloVerdePrecipitation  ";
                                            pattern = @"Precipitation " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 2:
                                        {
                                            page = 100;
                                            result = "YumaPrecipitation  ";
                                            pattern = @"Precipitation " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 3:
                                        {
                                            page = 101;
                                            result = "Imperial/CoachellaValleyPrecipitation  ";
                                            pattern = @"Precipitation " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 4:
                                        {
                                            page = 99;
                                            result = "Wellton-MohawkPrecipitation  ";
                                            pattern = @"Precipitation " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }



                                }
                                var pdf = pdfText(fName, page);
                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                if (matches.Count < 1)
                                {
                                    result = result + "File Not Readable";
                                }
                                else
                                {
                                    result = result + matches[0].Value.Replace("Precipitation", "").Trim();
                                }
                                // Add our found result to the output container
                                outPut.Add(result);
                                i += 1;
                            }
                            foreach (String s in outPut)
                            { tw.WriteLine(s); }
                            tw.WriteLine();
                            tw.Close();
                            // Open the file
                            //System.Diagnostics.Process.Start(outFile);
                            break;
                        }
                    case 15:
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\report10.pdf";
                            // Diagnostic messages on the command line
                            Console.WriteLine("Processing pdf 10 for Precipitation");
                            var header = new List<string>(new string[] { "Year 10 Precipitation Values:" });
                            //var outFile = System.IO.Path.GetTempFileName() + ".txt";
                            string outFile = "U:\\Precipitation_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            { tw.Write(s); }
                            tw.WriteLine();

                            int i = 0;
                            int page = 0;
                            // Read PDF into a string variable
                            while (i < 5)
                            {
                                string result = "";
                                string pattern = "";
                                switch (i)
                                {
                                    case 0:
                                        {
                                            page = 95;
                                            result = "FortMojave/MohaveValleyPrecipitation  ";
                                            pattern = @"Precipitation " + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 1:
                                        {
                                            page = 96;
                                            result = "Parker/PaloVerdePrecipitation  ";
                                            pattern = @"Precipitation " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 2:
                                        {
                                            page = 98;
                                            result = "YumaPrecipitation  ";
                                            pattern = @"Precipitation " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 3:
                                        {
                                            page = 99;
                                            result = "Imperial/CoachellaValleyPrecipitation  ";
                                            pattern = @"Precipitation " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 4:
                                        {
                                            page = 97;
                                            result = "Wellton-MohawkPrecipitation  ";
                                            pattern = @"Precipitation " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }



                                }
                                var pdf = pdfText(fName, page);
                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                if (matches.Count < 1)
                                {
                                    result = result + "File Not Readable";
                                }
                                else
                                {
                                    result = result + matches[0].Value.Replace("Precipitation", "").Trim();
                                }
                                // Add our found result to the output container
                                outPut.Add(result);
                                i += 1;
                            }
                            foreach (String s in outPut)
                            { tw.WriteLine(s); }
                            tw.WriteLine();
                            tw.Close();
                            // Open the file
                            //System.Diagnostics.Process.Start(outFile);
                            break;
                        }
                    case 16:
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\report11.pdf";
                            // Diagnostic messages on the command line
                            Console.WriteLine("Processing pdf 11 for Precipitation");
                            var header = new List<string>(new string[] { "Year 11 Precipitation Values:" });
                            //var outFile = System.IO.Path.GetTempFileName() + ".txt";
                            string outFile = "U:\\Precipitation_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            { tw.Write(s); }
                            tw.WriteLine();

                            int i = 0;
                            int page = 0;
                            // Read PDF into a string variable
                            while (i < 5)
                            {
                                string result = "";
                                string pattern = "";
                                switch (i)
                                {
                                    case 0:
                                        {
                                            page = 107;
                                            result = "FortMojave/MohaveValleyPrecipitation  ";
                                            pattern = @"Precipitation " + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 1:
                                        {
                                            page = 109;
                                            result = "Parker/PaloVerdePrecipitation  ";
                                            pattern = @"Precipitation " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 2:
                                        {
                                            page = 113;
                                            result = "YumaPrecipitation  ";
                                            pattern = @"Precipitation " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 3:
                                        {
                                            page = 115;
                                            result = "Imperial/CoachellaValleyPrecipitation  ";
                                            pattern = @"Precipitation " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 4:
                                        {
                                            page = 111;
                                            result = "Wellton-MohawkPrecipitation  ";
                                            pattern = @"Precipitation " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }



                                }
                                var pdf = pdfText(fName, page);
                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                if (matches.Count < 1)
                                {
                                    result = result + "File Not Readable";
                                }
                                else
                                {
                                    result = result + matches[0].Value.Replace("Precipitation", "").Trim();
                                }
                                // Add our found result to the output container
                                outPut.Add(result);
                                i += 1;
                            }
                            foreach (String s in outPut)
                            { tw.WriteLine(s); }
                            tw.WriteLine();
                            tw.Close();
                            // Open the file
                            System.Diagnostics.Process.Start(outFile);
                            break;
                        }
                }//bracket for switch in main while
                pdfnum++;
            }//bracket for main while loop for Precipitation Values 95-2011
            Console.WriteLine();// newline in console 
            pdfnum = 0; // reset pdf increment
            while(pdfnum <= 6)
            {
                switch (pdfnum)
                {
                    case 0: //2005
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\2005LCRAS.pdf";
                            // Diagnostic messages on the command line
                            Console.WriteLine("Processing pdf 05 for Open Water Evap");
                            var header = new List<string>(new string[] { "Year 05 Open Water Evaporation Values:" });
                            //var outFile = System.IO.Path.GetTempFileName() + ".txt";
                            string outFile = "U:\\OpenWaterEvap_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile);
                            foreach (String s in header)
                            { tw.Write(s); }
                            tw.WriteLine();

                            int i = 0;
                            int page = 0;
                            // Read PDF into a string variable
                            while (i < 5)
                            {
                                string result = "";
                                string pattern = "";
                                switch (i)
                                {
                                    case 0:
                                        {
                                            page = 111;
                                            result = "MohaveOpenWaterEvap  ";
                                            pattern = @"Evaporation \(Maintained Open Water " + @"\D\d+\D\d+\s" +
                                       @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 1:
                                        {
                                            page = 203;
                                            result = "Parker/PaloVerdeOpenWaterEvap  ";
                                            pattern = @"Evaporation \(Maintained Open Water\) " + @"\d+\D\d+\s" +
                                         @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 2:
                                        {
                                            page = 484;
                                            result = "YumaOpenWaterEvap  ";
                                            pattern = @"Evaporation \(Maintained Open Water\) " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 3:
                                        {
                                            page = 387;
                                            result = "Imperial/CoachellaValleyOpenWaterEvap  ";
                                            pattern = @"Evaporation \(Maintained Open Water\)\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 4:
                                        {
                                            page = 295;
                                            result = "Wellton-MohawkOpenWaterEvap  ";
                                            pattern = @"Evaporation \(Maintained Open Water\) " + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }



                                }
                                var pdf = pdfText(fName, page);
                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                if (matches.Count < 1)
                                {
                                    result = result + "File Not Readable";
                                }
                                else
                                {
                                    if (i == 0)
                                    {
                                        result = result + matches[0].Value.Replace("Evaporation (Maintained Open Water", "").Trim();
                                    }
                                    else
                                        result = result + matches[0].Value.Replace("Evaporation (Maintained Open Water)", "").Trim();
                                }
                                // Add our found result to the output container
                                outPut.Add(result);
                                i += 1;
                            }
                            foreach (String s in outPut)
                            { tw.WriteLine(s); }
                            tw.WriteLine();
                            tw.Close();
                            //System.Diagnostics.Process.Start(outFile);
                            break;
                        }
                    case 1: //2006
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\2006LCRAS.pdf";
                            // Diagnostic messages on the command line
                            Console.WriteLine("Processing pdf 06 for Open Water Evap");
                            var header = new List<string>(new string[] { "Year 06 Open Water Evaporation Values:" });
                            //var outFile = System.IO.Path.GetTempFileName() + ".txt";
                            string outFile = "U:\\OpenWaterEvap_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile,true);
                            foreach (String s in header)
                            { tw.Write(s); }
                            tw.WriteLine();

                            int i = 0;
                            int page = 0;
                            // Read PDF into a string variable
                            while (i < 5)
                            {
                                string result = "";
                                string pattern = "";
                                switch (i)
                                {
                                    case 0:
                                        {
                                            page = 111;
                                            result = "MohaveOpenWaterEvap  ";
                                            pattern = @"Evaporation \(Maintained Open Water " + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 1:
                                        {
                                            page = 203;
                                            result = "Parker/PaloVerdeOpenWaterEvap  ";
                                            pattern = @"Evaporation \(Maintained Open Water\) " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 2:
                                        {
                                            page = 484;
                                            result = "YumaOpenWaterEvap  ";
                                            pattern = @"Evaporation \(Maintained Open Water\) " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 3:
                                        {
                                            page = 387;
                                            result = "Imperial/CoachellaValleyOpenWaterEvap  ";
                                            pattern = @"Evaporation \(Maintained Open Water\)\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 4:
                                        {
                                            page = 295;
                                            result = "Wellton-MohawkOpenWaterEvap  ";
                                            pattern = @"Evaporation \(Maintained Open Water\) " + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }



                                }
                                var pdf = pdfText(fName, page);
                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                if (matches.Count < 1)
                                {
                                    result = result + "File Not Readable";
                                }
                                else
                                {
                                    if (i == 0)
                                    {
                                        result = result + matches[0].Value.Replace("Evaporation (Maintained Open Water", "").Trim();
                                    }
                                    else
                                        result = result + matches[0].Value.Replace("Evaporation (Maintained Open Water)", "").Trim();
                                }
                                // Add our found result to the output container
                                outPut.Add(result);
                                i += 1;
                            }
                            foreach (String s in outPut)
                            { tw.WriteLine(s); }
                            tw.WriteLine();
                            tw.Close();
                            //System.Diagnostics.Process.Start(outFile);
                           
                            break;
                        }
                    case 2: //2007
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\2007LCRAS.pdf";
                            // Diagnostic messages on the command line
                            Console.WriteLine("Processing pdf 07 for Open Water Evap");
                            var header = new List<string>(new string[] { "Year 07 Open Water Evaporation Values:" });
                            //var outFile = System.IO.Path.GetTempFileName() + ".txt";
                            string outFile = "U:\\OpenWaterEvap_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            { tw.Write(s); }
                            tw.WriteLine();

                            int i = 0;
                            int page = 0;
                            // Read PDF into a string variable
                            while (i < 5)
                            {
                                string result = "";
                                string pattern = "";
                                switch (i)
                                {
                                    case 0:
                                        {
                                            page = 111;
                                            result = "MohaveOpenWaterEvap  ";
                                            pattern = @"Evaporation \(Maintained Open Water " + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 1:
                                        {
                                            page = 203;
                                            result = "Parker/PaloVerdeOpenWaterEvap  ";
                                            pattern = @"Evaporation \(Maintained Open Water\) " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 2:
                                        {
                                            page = 484;
                                            result = "YumaOpenWaterEvap  ";
                                            pattern = @"Evaporation \(Maintained Open Water\) " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 3:
                                        {
                                            page = 387;
                                            result = "Imperial/CoachellaValleyOpenWaterEvap  ";
                                            pattern = @"Evaporation \(Maintained Open Water\)\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 4:
                                        {
                                            page = 295;
                                            result = "Wellton-MohawkOpenWaterEvap  ";
                                            pattern = @"Evaporation \(Maintained Open Water\) " + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }



                                }
                                var pdf = pdfText(fName, page);
                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                if (matches.Count < 1)
                                {
                                    result = result + "File Not Readable";
                                }
                                else
                                {
                                    if (i == 0)
                                    {
                                        result = result + matches[0].Value.Replace("Evaporation (Maintained Open Water", "").Trim();
                                    }
                                    else
                                        result = result + matches[0].Value.Replace("Evaporation (Maintained Open Water)", "").Trim();
                                }
                                // Add our found result to the output container
                                outPut.Add(result);
                                i += 1;
                            }
                            foreach (String s in outPut)
                            { tw.WriteLine(s); }
                            tw.WriteLine();
                            tw.Close();
                            //System.Diagnostics.Process.Start(outFile);

                            break;
                        }
                    case 3: //2008
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\2008LCRAS.pdf";
                            // Diagnostic messages on the command line
                            Console.WriteLine("Processing pdf 08 for Open Water Evap");
                            var header = new List<string>(new string[] { "Year 08 Open Water Evaporation Values:" });
                            //var outFile = System.IO.Path.GetTempFileName() + ".txt";
                            string outFile = "U:\\OpenWaterEvap_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            { tw.Write(s); }
                            tw.WriteLine();

                            int i = 0;
                            int page = 0;
                            // Read PDF into a string variable
                            while (i < 5)
                            {
                                string result = "";
                                string pattern = "";
                                switch (i)
                                {
                                    case 0:
                                        {
                                            page = 104;
                                            result = "MohaveOpenWaterEvap  ";
                                            pattern = @"Evaporation \(Maintained Open Water\) " + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                       @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 1:
                                        {
                                            page = 196;
                                            result = "Parker/PaloVerdeOpenWaterEvap  ";
                                            pattern = @"Evaporation \(Maintained Open Water\)\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 2:
                                        {
                                            page = 477;
                                            result = "YumaOpenWaterEvap  ";
                                            pattern = @"Evaporation \(Maintained Open Water\) " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 3:
                                        {
                                            page = 380;
                                            result = "Imperial/CoachellaValleyOpenWaterEvap  ";
                                            pattern = @"Evaporation \(Maintained Open Water\)\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 4:
                                        {
                                            page = 288;
                                            result = "Wellton-MohawkOpenWaterEvap  ";
                                            pattern = @"Evaporation \(Maintained Open Water\) " + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }



                                }
                                var pdf = pdfText(fName, page);
                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                if (matches.Count < 1)
                                {
                                    result = result + "File Not Readable";
                                }
                                else
                                {
                                        result = result + matches[0].Value.Replace("Evaporation (Maintained Open Water)", "").Trim();
                                }
                                // Add our found result to the output container
                                outPut.Add(result);
                                i += 1;
                            }
                            foreach (String s in outPut)
                            { tw.WriteLine(s); }
                            tw.WriteLine();
                            tw.Close();
                            //System.Diagnostics.Process.Start(outFile);

                            break;
                        }
                    case 4: //2009
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\report09.pdf";
                            // Diagnostic messages on the command line
                            Console.WriteLine("Processing pdf 09 for Open Water Evap");
                            var header = new List<string>(new string[] { "Year 09 Open Water Evaporation Values:" });
                            //var outFile = System.IO.Path.GetTempFileName() + ".txt";
                            string outFile = "U:\\OpenWaterEvap_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            { tw.Write(s); }
                            tw.WriteLine();

                            int i = 0;
                            int page = 0;
                            // Read PDF into a string variable
                            while (i < 5)
                            {
                                string result = "";
                                string pattern = "";
                                switch (i)
                                {
                                    case 0:
                                        {
                                            page = 97;
                                            result = "MohaveOpenWaterEvap  ";
                                            pattern = @"Open Water\n" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 1:
                                        {
                                            page = 98;
                                            result = "Parker/PaloVerdeOpenWaterEvap  ";
                                            pattern = @"Open Water " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 2:
                                        {
                                            page = 100;
                                            result = "YumaOpenWaterEvap  ";
                                            pattern = @"Open Water " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 3:
                                        {
                                            page = 101;
                                            result = "Imperial/CoachellaValleyOpenWaterEvap  ";
                                            pattern = @"Open Water " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 4:
                                        {
                                            page = 99;
                                            result = "Wellton-MohawkOpenWaterEvap  ";
                                            pattern = @"Open Water " + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }



                                }
                                var pdf = pdfText(fName, page);
                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                if (matches.Count < 1)
                                {
                                    result = result + "File Not Readable";
                                }
                                else
                                {
                                    result = result + matches[0].Value.Replace("Open Water", "").Trim();
                                }
                                // Add our found result to the output container
                                outPut.Add(result);
                                i += 1;
                            }
                            foreach (String s in outPut)
                            { tw.WriteLine(s); }
                            tw.WriteLine();
                            tw.Close();
                            //System.Diagnostics.Process.Start(outFile);
                            break;
                        }
                    case 5: //2010
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\report10.pdf";
                            // Diagnostic messages on the command line
                            Console.WriteLine("Processing pdf 10 for Open Water Evap");
                            var header = new List<string>(new string[] { "Year 10 Open Water Evaporation Values:" });
                            //var outFile = System.IO.Path.GetTempFileName() + ".txt";
                            string outFile = "U:\\OpenWaterEvap_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            { tw.Write(s); }
                            tw.WriteLine();

                            int i = 0;
                            int page = 0;
                            // Read PDF into a string variable
                            while (i < 5)
                            {
                                string result = "";
                                string pattern = "";
                                switch (i)
                                {
                                    case 0:
                                        {
                                            page = 95;
                                            result = "MohaveOpenWaterEvap  ";
                                            pattern = @"Open Water " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 1:
                                        {
                                            page = 96;
                                            result = "Parker/PaloVerdeOpenWaterEvap  ";
                                            pattern = @"Open Water " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 2:
                                        {
                                            page = 98;
                                            result = "YumaOpenWaterEvap  ";
                                            pattern = @"Open Water " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 3:
                                        {
                                            page = 99;
                                            result = "Imperial/CoachellaValleyOpenWaterEvap  ";
                                            pattern = @"Open Water " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 4:
                                        {
                                            page = 97;
                                            result = "Wellton-MohawkOpenWaterEvap  ";
                                            pattern = @"Open Water\n" + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }



                                }
                                var pdf = pdfText(fName, page);
                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                if (matches.Count < 1)
                                {
                                    result = result + "File Not Readable";
                                }
                                else
                                {
                                    result = result + matches[0].Value.Replace("Open Water", "").Trim();
                                }
                                // Add our found result to the output container
                                outPut.Add(result);
                                i += 1;
                            }
                            foreach (String s in outPut)
                            { tw.WriteLine(s); }
                            tw.WriteLine();
                            tw.Close();
                            //System.Diagnostics.Process.Start(outFile);
                            break;
                        }
                    case 6: //2011
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\report11.pdf";
                            // Diagnostic messages on the command line
                            Console.WriteLine("Processing pdf 11 for Open Water Evap");
                            var header = new List<string>(new string[] { "Year 11 Open Water Evaporation Values:" });
                            //var outFile = System.IO.Path.GetTempFileName() + ".txt";
                            string outFile = "U:\\OpenWaterEvap_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            { tw.Write(s); }
                            tw.WriteLine();

                            int i = 0;
                            int page = 0;
                            // Read PDF into a string variable
                            while (i < 5)
                            {
                                string result = "";
                                string pattern = "";
                                switch (i)
                                {
                                    case 0:
                                        {
                                            page = 107;
                                            result = "MohaveOpenWaterEvap  ";
                                            pattern = @"Open Water\n" + @"\d\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 1:
                                        {
                                            page = 109;
                                            result = "Parker/PaloVerdeOpenWaterEvap  ";
                                            pattern = @"Open Water " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 2:
                                        {
                                            page = 113;
                                            result = "YumaOpenWaterEvap  ";
                                            pattern = @"Open Water " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 3:
                                        {
                                            page = 115;
                                            result = "Imperial/CoachellaValleyOpenWaterEvap  ";
                                            pattern = @"Open Water " + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                         @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }
                                    case 4:
                                        {
                                            page = 111;
                                            result = "Wellton-MohawkOpenWaterEvap  ";
                                            pattern = @"Open Water\n" + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" +
                                          @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                            break;
                                        }



                                }
                                var pdf = pdfText(fName, page);
                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                if (matches.Count < 1)
                                {
                                    result = result + "File Not Readable";
                                }
                                else
                                {
                                    result = result + matches[0].Value.Replace("Open Water", "").Trim();
                                }
                                // Add our found result to the output container
                                outPut.Add(result);
                                i += 1;
                            }
                            foreach (String s in outPut)
                            { tw.WriteLine(s); }
                            tw.WriteLine();
                            tw.Close();
                            System.Diagnostics.Process.Start(outFile);
                            break;
                        }
                }
               pdfnum += 1;
            }//bracket for main while loop for Open Water Evap 2005-2011
            Console.WriteLine();
            pdfnum = 0;
            while(pdfnum <= 16)
            {
                switch (pdfnum)
                {
                    case 0://95
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\Appendix95.pdf";
                            Console.WriteLine("Processing pdf 95 for Crops");
                            var header = new List<string>(new string[] { "Year 95 Crop values" });
                            string outFile = "U:\\Cropdata_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile);
                            foreach (String s in header)
                            {
                                tw.Write(s);
                            }
                            tw.WriteLine();
                            int zone = 0;
                            int page = 0;
                            int crop = 0;
                            //tw.Close();
                            while (zone < 6)
                            {
                                //string result = "";

                                switch (zone)
                                {

                                    case 0:
                                        {// Mohave area
                                            page = 20;
                                            tw.WriteLine("Mohave Area");
                                            break;

                                        }
                                    case 1:
                                        {// Parker area
                                            page = 90;

                                            tw.WriteLine("Parker Area");
                                            break;
                                        }
                                    case 2:
                                        {// Palo Verde area
                                            page = 160;

                                            tw.WriteLine("Palo Verde Area");
                                            break;
                                        }
                                    case 3:
                                        {// North Gila Area
                                            page = 230;

                                            tw.WriteLine("North Gila Area");
                                            break;
                                        }
                                    case 4:
                                        {// Yuma Valley Area
                                            page = 300;

                                            tw.WriteLine("Yuma Valley Area");
                                            break;
                                        }
                                    case 5:
                                        {// Yuma Mesa Area
                                            page = 370;

                                            tw.WriteLine("Yuma Mesa Area");
                                            break;
                                        }


                                }
                                crop = 0;
                                var pdf = pdfText(fName, page);
                                string pattern = "";
                                string result = "";
                                while (crop <= 17)
                                {
                                    //tw = new StreamWriter(outFile,true);
                                    switch (crop)
                                    {
                                        case 0: // Alfalfa-1a 
                                            {
                                                outPut = new List<string>();
                                                result = "Alfalfa-1a  ";
                                                pattern = @"Alfalfa \-1a " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 1 || zone == 3 || zone == 5)
                                                {
                                                    pattern = @"Alfalfa\-1a " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone == 2)
                                                {
                                                    pattern = @"-1 " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                }
                                                else if (zone == 4)
                                                {
                                                    pattern = @"Alfalfa\-1a " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa -1a", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 1: // Alfalfa-1b
                                            {
                                                outPut = new List<string>();
                                                result = "Alfalfa-1b  ";
                                                pattern = @"Alfalfa \-1b " + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 1)
                                                {
                                                    pattern = @"Alfalfa\-1b " + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone == 2 || zone == 3 || zone == 5)
                                                {
                                                    pattern = @"Alfalfa\-1b " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone == 4)
                                                {
                                                    pattern = @"Alfalfa\-1b " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa -1b", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 2: // Alfalfa-1c
                                            {
                                                outPut = new List<string>();
                                                result = "Alfalfa-1c  ";
                                                pattern = @"Alfalfa \-1c" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 1)
                                                {
                                                    pattern = @"Alfalfa\-1c " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone == 2)
                                                {
                                                    pattern = @"27\n\-1 " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                }
                                                else if (zone == 3 )
                                                {
                                                    pattern = @"9\nAlfalfa-1b " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                               + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                               + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone == 4)
                                                {
                                                    pattern = @"Alfalfa\-1c " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                        + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                        + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone == 5)
                                                {
                                                    pattern = @"Alfalfa-1b " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                        + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                        + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa-1c", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 3: // Cotton
                                            {
                                                outPut = new List<string>();
                                                result = "Cotton  ";
                                                pattern = @"Cotton" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Cotton " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Cotton", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 4: // Sun Grain
                                            {
                                                outPut = new List<string>();
                                                result = "Sm Grain  ";
                                                pattern = @"Sm Grain " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Sm Grain " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sm Grain", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 5: // Corn
                                            {
                                                outPut = new List<string>();
                                                result = "Corn  ";
                                                pattern = @"Corn" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Corn " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Corn", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 6: // Lettuce-early
                                            {
                                                outPut = new List<string>();
                                                result = "Lettuce-early  ";
                                                pattern = @"Lettuce\-early" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Lettuce\-early " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Lettuce-early", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                // tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 7: // Lettuce-late
                                            {
                                                outPut = new List<string>();
                                                result = "Lettuce-late  ";
                                                pattern = @"Lettuce-late" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Lettuce\-late " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Lettuce-late", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //  tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 8: // Melons- spring
                                            {
                                                outPut = new List<string>();
                                                result = "Melons-spring  ";
                                                pattern = @"Melons- spring " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if(zone == 4)
                                                    pattern = @"Melons- spring " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Melons- spring ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                // tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 9: // Melons- fall
                                            {
                                                outPut = new List<string>();
                                                result = "Melons- fall  ";
                                                pattern = @"Melons\- fall" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Melons\- fall " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Melons- fall", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 10: // Bermuda
                                            {
                                                outPut = new List<string>();
                                                result = "Bermuda  ";
                                                pattern = @"Bermuda" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Bermuda " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Bermuda", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                // tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 11: // Citrus
                                            {
                                                outPut = new List<string>();
                                                result = "Citrus  ";
                                                pattern = @"Citrus" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Citrus " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Citrus", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //  tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 12: // Tomatoes
                                            {
                                                outPut = new List<string>();
                                                result = "Tomatoes  ";
                                                pattern = @"Tomatoes" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Tomatoes " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Tomatoes", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                // tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 13: // Sudan
                                            {
                                                outPut = new List<string>();
                                                result = "Sudan  ";
                                                pattern = @"Sudan" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Sudan " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sudan", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                // tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 14: // Vegetables
                                            {
                                                outPut = new List<string>();
                                                result = "Vegetables  ";
                                                pattern = @"Vegetables" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Vegetables " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Vegetables", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //  tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 15: // Crucifers
                                            {
                                                outPut = new List<string>();
                                                result = "Crucifers  ";
                                                pattern = @"Crucifers " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 5)
                                                {
                                                    pattern = @"Crucifers " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+" + @"\d+\D\d+" + @"\d+\D\d+" + @"\d+\D\d+" + @"\d+\D\d+"
                                                    + @"\d+\D\d+" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone == 4)
                                                {
                                                    pattern = @"Crucifers " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Crucifers", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 16: // Dates
                                            {
                                                outPut = new List<string>();
                                                result = "Dates  ";
                                                pattern = @"Dates" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Dates " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Dates", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //  tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 17: // Safflower
                                            {
                                                outPut = new List<string>();
                                                result = "Safflower  ";
                                                pattern = @"Safflower" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Safflower " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Safflower", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                tw.WriteLine();

                                                break;
                                            }



                                    }
                                    crop += 1;
                                }
                                zone += 1;
                            }
                            tw.Close();

                            // System.Diagnostics.Process.Start(outFile);
                            break;
                        }
                    case 1://96
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\Appendix96.pdf";
                            Console.WriteLine("Processing pdf 96 for Crops");
                            var header = new List<string>(new string[] { "Year 96 Crop values" });
                            string outFile = "U:\\Cropdata_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            {
                                tw.Write(s);
                            }
                            tw.WriteLine();
                            int zone = 0;
                            int page = 0;
                            int crop = 0;
                            //tw.Close();
                            while (zone < 6)
                            {
                                //string result = "";

                                switch (zone)
                                {

                                    case 0:
                                        {// Mohave area
                                            page = 18;
                                            tw.WriteLine("Mohave Area");
                                            break;

                                        }
                                    case 1:
                                        {// Parker area
                                            page = 87;

                                            tw.WriteLine("Parker Area");
                                            break;
                                        }
                                    case 2:
                                        {// Palo Verde area
                                            page = 156;

                                            tw.WriteLine("Palo Verde Area");
                                            break;
                                        }
                                    case 3:
                                        {// North Gila Area
                                            page = 225;

                                            tw.WriteLine("North Gila Area");
                                            break;
                                        }
                                    case 4:
                                        {// Yuma Valley Area
                                            page = 294;

                                            tw.WriteLine("Yuma Valley Area");
                                            break;
                                        }
                                    case 5:
                                        {// Yuma Mesa Area
                                            page = 363;

                                            tw.WriteLine("Yuma Mesa Area");
                                            break;
                                        }


                                }
                                crop = 0;
                                var pdf = pdfText(fName, page);
                                string pattern = "";
                                string result = "";
                                while (crop <= 17)
                                {
                                    //tw = new StreamWriter(outFile,true);
                                    switch (crop)
                                    {
                                        case 0: // Alfalfa-1a 
                                            {
                                                outPut = new List<string>();
                                                result = "Alfalfa-1a  ";
                                                pattern = @"Alfalfa\-1a " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa -1a", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 1: // Alfalfa-1b
                                            {
                                                outPut = new List<string>();
                                                result = "Alfalfa-1b  ";

                                                pattern = @"Alfalfa\-1b " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa -1b", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 2: // Alfalfa-1c
                                            {
                                                outPut = new List<string>();
                                                result = "Alfalfa-1c  ";

                                                pattern = @"Alfalfa\-1c " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                            + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                            + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa -1c", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 3: // Cotton
                                            {
                                                outPut = new List<string>();
                                                result = "Cotton  ";
                                                pattern = @"Cotton" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Cotton " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Cotton", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 4: // Sun Grain
                                            {
                                                outPut = new List<string>();
                                                result = "Sm Grain  ";
                                                pattern = @"Sm Grain " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Sm Grain " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sm Grain", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 5: // Corn
                                            {
                                                outPut = new List<string>();
                                                result = "Corn  ";
                                                pattern = @"Corn" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Corn " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Corn", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 6: // Lettuce-early
                                            {
                                                outPut = new List<string>();
                                                result = "Lettuce-early  ";
                                                pattern = @"Lettuce\-early" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Lettuce\-early " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Lettuce-early", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                // tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 7: // Lettuce-late
                                            {
                                                outPut = new List<string>();
                                                result = "Lettuce-late  ";
                                                pattern = @"Lettuce-late" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Lettuce\-late " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Lettuce-late", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //  tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 8: // Melons- spring
                                            {
                                                outPut = new List<string>();
                                                result = "Melons-spring  ";
                                                pattern = @"Melons\- spring" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Melons\- spring " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Melons- spring ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                // tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 9: // Melons- fall
                                            {
                                                outPut = new List<string>();
                                                result = "Melons- fall  ";
                                                pattern = @"Melons\- fall" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Melons\- fall " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Melons- fall", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 10: // Bermuda
                                            {
                                                outPut = new List<string>();
                                                result = "Bermuda  ";
                                                pattern = @"Bermuda" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Bermuda " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Bermuda", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                // tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 11: // Citrus
                                            {
                                                outPut = new List<string>();
                                                result = "Citrus  ";
                                                pattern = @"Citrus" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Citrus " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Citrus", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //  tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 12: // Tomatoes
                                            {
                                                outPut = new List<string>();
                                                result = "Tomatoes  ";
                                                pattern = @"Tomatoes" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Tomatoes " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Tomatoes", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                // tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 13: // Sudan
                                            {
                                                outPut = new List<string>();
                                                result = "Sudan  ";
                                                pattern = @"Sudan" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Sudan " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sudan", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                // tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 14: // Vegetables
                                            {
                                                outPut = new List<string>();
                                                result = "Vegetables  ";
                                                pattern = @"Vegetables" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Vegetables " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Vegetables", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //  tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 15: // Crucifers
                                            {
                                                outPut = new List<string>();
                                                result = "Crucifers  ";
                                                pattern = @"Crucifers " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Crucifers", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 16: // Dates
                                            {
                                                outPut = new List<string>();
                                                result = "Dates  ";
                                                pattern = @"Dates" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Dates " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Dates", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //  tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 17: // Safflower
                                            {
                                                outPut = new List<string>();
                                                result = "Safflower  ";
                                                pattern = @"Safflower" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Safflower " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Safflower", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                tw.WriteLine();

                                                break;
                                            }



                                    }
                                    crop += 1;
                                }
                                zone += 1;
                            }
                            tw.Close();

                            //System.Diagnostics.Process.Start(outFile);
                            break;
                        }
                    case 2://97
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\Appendix97.pdf";
                            Console.WriteLine("Processing pdf 97 for Crops");
                            var header = new List<string>(new string[] { "Year 97 Crop values" });
                            string outFile = "U:\\Cropdata_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            {
                                tw.Write(s);
                            }
                            tw.WriteLine();
                            int zone = 0;
                            int page = 0;
                            int crop = 0;
                            //tw.Close();
                            while (zone < 6)
                            {
                                //string result = "";

                                switch (zone)
                                {

                                    case 0:
                                        {// Mohave area
                                            page = 31;
                                            tw.WriteLine("Mohave Area");
                                            break;

                                        }
                                    case 1:
                                        {// Parker area
                                            page = 100;

                                            tw.WriteLine("Parker Area");
                                            break;
                                        }
                                    case 2:
                                        {// Palo Verde area
                                            page = 169;

                                            tw.WriteLine("Palo Verde Area");
                                            break;
                                        }
                                    case 3:
                                        {// North Gila Area
                                            page = 307;

                                            tw.WriteLine("North Gila Area");
                                            break;
                                        }
                                    case 4:
                                        {// Yuma Valley Area
                                            page = 376;

                                            tw.WriteLine("Yuma Valley Area");
                                            break;
                                        }
                                    case 5:
                                        {// Yuma Mesa Area
                                            page = 445;

                                            tw.WriteLine("Yuma Mesa Area");
                                            break;
                                        }
                                    case 6:
                                        {
                                            page = 238;
                                            tw.WriteLine("Blythe NE Area");
                                            break;
                                        }


                                }
                                crop = 0;
                                var pdf = pdfText(fName, page);
                                string pattern = "";
                                string result = "";
                                while (crop <= 17)
                                {
                                    //tw = new StreamWriter(outFile,true);
                                    switch (crop)
                                    {
                                        case 0: // Alfalfa-1a 
                                            {
                                                outPut = new List<string>();
                                                result = "Alfalfa-1a  ";
                                                pattern = @"Alfalfa\-1a " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa -1a", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 1: // Alfalfa-1b
                                            {
                                                outPut = new List<string>();
                                                result = "Alfalfa-1b  ";

                                                pattern = @"Alfalfa\-1b " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa -1b", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 2: // Alfalfa-1c
                                            {
                                                outPut = new List<string>();
                                                result = "Alfalfa-1c  ";

                                                pattern = @"Alfalfa\-1c " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                            + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                            + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa -1c", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 3: // Cotton
                                            {
                                                outPut = new List<string>();
                                                result = "Cotton  ";
                                                pattern = @"Cotton" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Cotton " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Cotton", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 4: // Sun Grain
                                            {
                                                outPut = new List<string>();
                                                result = "Sm Grain  ";
                                                pattern = @"Sm Grain " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Sm Grain " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sm Grain", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 5: // Corn
                                            {
                                                outPut = new List<string>();
                                                result = "Corn  ";
                                                pattern = @"Corn" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Corn " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Corn", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 6: // Lettuce-early
                                            {
                                                outPut = new List<string>();
                                                result = "Lettuce-early  ";
                                                pattern = @"Lettuce\-early" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Lettuce\-early " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Lettuce-early", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                // tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 7: // Lettuce-late
                                            {
                                                outPut = new List<string>();
                                                result = "Lettuce-late  ";
                                                pattern = @"Lettuce-late" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Lettuce\-late " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Lettuce-late", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //  tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 8: // Melons- spring
                                            {
                                                outPut = new List<string>();
                                                result = "Melons-spring  ";
                                                pattern = @"Melons\- spring" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Melons\- spring " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Melons- spring ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                // tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 9: // Melons- fall
                                            {
                                                outPut = new List<string>();
                                                result = "Melons- fall  ";
                                                pattern = @"Melons\- fall" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Melons\- fall " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Melons- fall", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 10: // Bermuda
                                            {
                                                outPut = new List<string>();
                                                result = "Bermuda  ";
                                                pattern = @"Bermuda" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Bermuda " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Bermuda", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                // tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 11: // Citrus
                                            {
                                                outPut = new List<string>();
                                                result = "Citrus  ";
                                                pattern = @"Citrus" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Citrus " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Citrus", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //  tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 12: // Tomatoes
                                            {
                                                outPut = new List<string>();
                                                result = "Tomatoes  ";
                                                pattern = @"Tomatoes" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Tomatoes " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Tomatoes", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                // tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 13: // Sudan
                                            {
                                                outPut = new List<string>();
                                                result = "Sudan  ";
                                                pattern = @"Sudan" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Sudan " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sudan", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                // tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 14: // Vegetables
                                            {
                                                outPut = new List<string>();
                                                result = "Vegetables  ";
                                                pattern = @"Vegetables" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Vegetables " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Vegetables", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //  tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 15: // Crucifers
                                            {
                                                outPut = new List<string>();
                                                result = "Crucifers  ";
                                                pattern = @"Crucifers " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Crucifers", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 16: // Dates
                                            {
                                                outPut = new List<string>();
                                                result = "Dates  ";
                                                pattern = @"Dates" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Dates " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Dates", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //  tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 17: // Safflower
                                            {
                                                outPut = new List<string>();
                                                result = "Safflower  ";
                                                pattern = @"Safflower" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Safflower " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Safflower", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                tw.WriteLine();

                                                break;
                                            }



                                    }
                                    crop += 1;
                                }
                                zone += 1;
                            }
                            tw.Close();

                            //System.Diagnostics.Process.Start(outFile);

                            break;
                        }
                    case 3://98
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\Appendix98.pdf";
                            Console.WriteLine("Processing pdf 98 for Crops");
                            var header = new List<string>(new string[] { "Year 98 Crop values" });
                            string outFile = "U:\\Cropdata_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            {
                                tw.Write(s);
                            }
                            tw.WriteLine();
                            int zone = 0;
                            int page = 0;
                            int crop = 0;
                            //tw.Close();
                            while (zone < 6)
                            {
                                //string result = "";

                                switch (zone)
                                {

                                    case 0:
                                        {// Mohave area
                                            page = 30;
                                            tw.WriteLine("Mohave Area");
                                            break;

                                        }
                                    case 1:
                                        {// Parker area
                                            page = 98;

                                            tw.WriteLine("Parker Area");
                                            break;
                                        }
                                    case 2:
                                        {// Palo Verde area
                                            page = 166;

                                            tw.WriteLine("Palo Verde/ Blythe NE Area");
                                            break;
                                        }
                                    case 3:
                                        {// North Gila Area
                                            page = 235;

                                            tw.WriteLine("North Gila Area");
                                            break;
                                        }
                                    case 4:
                                        {// Yuma Valley Area
                                            page = 303;

                                            tw.WriteLine("Yuma Valley Area");
                                            break;
                                        }
                                    case 5:
                                        {// Yuma Mesa Area
                                            page = 371;

                                            tw.WriteLine("Yuma Mesa Area");
                                            break;
                                        }



                                }
                                crop = 0;
                                var pdf = pdfText(fName, page);
                                string pattern = "";
                                string result = "";
                                while (crop <= 17)
                                {
                                    //tw = new StreamWriter(outFile,true);
                                    switch (crop)
                                    {
                                        case 0: // Alfalfa-1a 
                                            {
                                                outPut = new List<string>();
                                                result = "Alfalfa-perennial  ";
                                                pattern = @"Alfalfa\-perennial " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa-perennial", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 1: // Alfalfa-1b
                                            {
                                                outPut = new List<string>();
                                                result = "Alfalfa-annual  ";

                                                pattern = @"Alfalfa-annual " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa-annual", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 2: // Alfalfa-1c
                                            {
                                                outPut = new List<string>();
                                                result = "Alfalfa-seed  ";

                                                pattern = @"Alfalfa\-seed " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                            + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                            + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa-seed", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 3: // Cotton
                                            {
                                                outPut = new List<string>();
                                                result = "Cotton  ";
                                                string test = @"((\-?\d+)+?(\.\d+)?)\s";
                                                pattern = @"Cotton " + test + test + test + test + test + test + test + test + test + test + test + test + test;
                                                /*if (zone == 4)
                                                {
                                                    pattern = @"Cotton " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }*/
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Cotton", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 4: // Sun Grain
                                            {
                                                outPut = new List<string>();
                                                result = "Small Grain  ";
                                                pattern = @"Small Grain " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Small Grain", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 5: // Corn
                                            {
                                                outPut = new List<string>();
                                                result = "Corn  ";
                                                pattern = @"Corn" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Corn " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Corn", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 6: // Lettuce-early
                                            {
                                                outPut = new List<string>();
                                                result = "Lettuce-early  ";
                                                pattern = @"Lettuce\-early" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 1)
                                                {
                                                    pattern = @"Lettuce\-early " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Lettuce-early", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                // tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 7: // Lettuce-late
                                            {
                                                outPut = new List<string>();
                                                result = "Lettuce-late  ";
                                                pattern = @"Lettuce-late " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 0)
                                                {
                                                    pattern = @"Lettuce-late " + @"\d+\D\d+\s" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                     + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                     + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Lettuce-late", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //  tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 8: // Melons- spring
                                            {
                                                outPut = new List<string>();
                                                result = "Melons-spring  ";
                                                pattern = @"Melons-spring" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 0)
                                                {
                                                    pattern = @"Melons-spring " + @"\d+\D\d+\s" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone == 1 || zone == 3)
                                                {
                                                    pattern = @"Melons- spring" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Melons- spring ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                // tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 9: // Melons- fall
                                            {
                                                outPut = new List<string>();
                                                result = "Melons- fall  ";
                                                pattern = @"Melons\- fall" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 2 || zone == 4 || zone == 5)
                                                {
                                                    pattern = @"Melons-fall " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Melons- fall", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 10: // Bermuda
                                            {
                                                outPut = new List<string>();
                                                result = "Bermuda  ";
                                                pattern = @"Bermuda" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Bermuda " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Bermuda", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                // tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 11: // Citrus
                                            {
                                                outPut = new List<string>();
                                                result = "Citrus  ";
                                                pattern = @"Citrus" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Citrus " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Citrus", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //  tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 12: // Tomatoes
                                            {
                                                outPut = new List<string>();
                                                result = "Tomatoes  ";
                                                pattern = @"Tomatoes" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 0 || zone == 1)
                                                {
                                                    pattern = @"Tomatoes " + @"\d+\D\d+\s" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Tomatoes", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                // tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 13: // Sudan
                                            {
                                                outPut = new List<string>();
                                                result = "Sudan  ";
                                                pattern = @"Sudan" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Sudan " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sudan", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                // tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 14: // Vegetables
                                            {
                                                outPut = new List<string>();
                                                result = "Vegetables  ";
                                                pattern = @"Vegetables" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Vegetables " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Vegetables", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //  tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 15: // Crucifers
                                            {
                                                outPut = new List<string>();
                                                result = "Crucifers  ";
                                                pattern = @"Crucifers " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Crucifers", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 16: // Dates
                                            {
                                                outPut = new List<string>();
                                                result = "Dates  ";
                                                pattern = @"Dates" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Dates " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Dates", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //  tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 17: // Safflower
                                            {
                                                outPut = new List<string>();
                                                result = "Safflower  ";
                                                pattern = @"Safflower" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 0 || zone == 1)
                                                {
                                                    pattern = @"Safflower " + @"\d+\D\d+\s" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Safflower", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                tw.WriteLine();

                                                break;
                                            }



                                    }
                                    crop += 1;
                                }
                                zone += 1;
                            }
                            tw.Close();

                            // System.Diagnostics.Process.Start(outFile);
                            break;
                        }
                    case 4://99
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\Appendix99.pdf";
                            Console.WriteLine("Processing pdf 99 for Crops");
                            var header = new List<string>(new string[] { "Year 99 Crop values" });
                            string outFile = "U:\\Cropdata_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            {
                                tw.Write(s);
                            }
                            tw.WriteLine();
                            int zone = 0;
                            int page = 0;
                            int crop = 0;
                            //tw.Close();
                            while (zone < 3)
                            {
                                //string result = "";

                                switch (zone)
                                {

                                    case 0:
                                        {// Mohave area
                                            page = 19;
                                            tw.WriteLine("Mohave Area");
                                            break;

                                        }
                                    case 1:
                                        {// Parker area
                                            page = 118;

                                            tw.WriteLine("Parker Area");
                                            break;
                                        }
                                    case 2:
                                        {// Yuma area
                                            page = 220;

                                            tw.WriteLine("Yuma Area");
                                            break;
                                        }

                                }
                                crop = 0;
                                var pdf = pdfText(fName, page);
                                string pattern = "";
                                string result = "";
                                while (crop <= 26)
                                {
                                    //tw = new StreamWriter(outFile,true);
                                    switch (crop)
                                    {
                                        case 0: // Alfalfa-perennial 
                                            {
                                                outPut = new List<string>();
                                                result = "Alfalfa-perennial  ";
                                                pattern = @"Alfalfa- perennial " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa- perennial", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 1:// Alfalfa- annual
                                            {

                                                outPut = new List<string>();
                                                result = "Alfalfa-annual  ";
                                                pattern = @"Alfalfa- annual " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa- annual", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 2:// Alfalfa- Seed
                                            {
                                                outPut = new List<string>();
                                                result = "Alfalfa-seed  ";
                                                pattern = @"Alfalfa- seed " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa- seed", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 3: // Cotton
                                            {
                                                outPut = new List<string>();
                                                result = "Cotton  ";
                                                pattern = @"Cotton " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Cotton", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 4: // small grain
                                            {
                                                outPut = new List<string>();
                                                result = "Small Grain  ";
                                                pattern = @"Small Grain " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Small Grain", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 5: // field grain
                                            {
                                                outPut = new List<string>();
                                                result = "Field Grain  ";
                                                pattern = @"Field Grain " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Field Grain", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 6: // lettuce-early
                                            {
                                                outPut = new List<string>();
                                                result = "Lettuce- early  ";
                                                pattern = @"Lettuce- early " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Lettuce- early", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 7: // lettuce- late
                                            {
                                                outPut = new List<string>();
                                                result = "Lettuce- late  ";
                                                pattern = @"Lettuce- late " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Lettuce- late", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 8: // melons- spring
                                            {
                                                outPut = new List<string>();
                                                result = "Melons- spring  ";
                                                pattern = @"Melons- spring " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Melons- spring", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 9: // melons- fall
                                            {
                                                outPut = new List<string>();
                                                result = "Melons- fall  ";
                                                pattern = @"Melons- fall " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Melons- fall", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 10:// bermuda
                                            {
                                                outPut = new List<string>();
                                                result = "Bermuda  ";
                                                pattern = @"Bermuda " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Bermuda", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 11: // bermuda w/ rye
                                            {
                                                outPut = new List<string>();
                                                result = "Bermuda w/ rye  ";
                                                pattern = @"Bermuda w/ rye " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Bermuda w/ rye", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 12: // citrus-young
                                            {
                                                outPut = new List<string>();
                                                result = "Citrus- young  ";
                                                pattern = @"Citrus- young " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Citrus- young", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 13: // citrus- mature
                                            {
                                                outPut = new List<string>();
                                                result = "Citrus- mature  ";
                                                pattern = @"Citrus- mature " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Citrus- mature", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 14: // citrus-declining
                                            {
                                                outPut = new List<string>();
                                                result = "Citrus- declining  ";
                                                pattern = @"Citrus- declining " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Citrus- declining", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 15: // tomatoes
                                            {
                                                outPut = new List<string>();
                                                result = "Tomatoes  ";
                                                pattern = @"Tomatoes " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Tomatoes", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 16: // sudan
                                            {
                                                outPut = new List<string>();
                                                result = "Sudan  ";
                                                pattern = @"Sudan " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sudan", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 17: // legume / solanum veg
                                            {
                                                outPut = new List<string>();
                                                result = "Legume/Solanum Veg  ";
                                                pattern = @"Legume/Solanum Veg " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Legume/Solanum Veg", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 18: // crucifers
                                            {
                                                outPut = new List<string>();
                                                result = "Crucifers  ";
                                                pattern = @"Crucifers " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Crucifers", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 19: // dates
                                            {
                                                outPut = new List<string>();
                                                result = "Dates  ";
                                                pattern = @"Dates " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Dates", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 20: // safflower
                                            {
                                                outPut = new List<string>();
                                                result = "Safflower  ";
                                                pattern = @"Safflower " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Safflower", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 21: // orchards
                                            {
                                                outPut = new List<string>();
                                                result = "Orchards  ";
                                                pattern = @"Orchards " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Orchards", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 22: // small vegetables
                                            {
                                                outPut = new List<string>();
                                                result = "Small Vegetables  ";
                                                pattern = @"Small Vegetables " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Small Vegetables", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 23: // root vegetables
                                            {
                                                outPut = new List<string>();
                                                result = "Root Vegetables  ";
                                                pattern = @"Root Vegetables " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Root Vegetables", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 24: // perennial vegetables
                                            {
                                                outPut = new List<string>();
                                                result = "Perennial Vegetables  ";
                                                pattern = @"Perennial Vegetables " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Perennial Vegetables", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 25: //sugar beets
                                            {
                                                outPut = new List<string>();
                                                result = "Sugar Beets  ";
                                                pattern = @"Sugar Beets " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sugar Beets", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 26: // grapes
                                            {
                                                outPut = new List<string>();
                                                result = "Grapes  ";
                                                pattern = @"Grapes " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Grapes", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                tw.WriteLine();
                                                break;
                                            }




                                    }
                                    crop += 1;
                                }
                                zone += 1;
                            }
                            tw.Close();

                            //System.Diagnostics.Process.Start(outFile);
                            break;
                        }
                    case 5://00
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\2000AppendixPart1.pdf";
                            Console.WriteLine("Processing pdf 00 for Crops");
                            var header = new List<string>(new string[] { "Year 00 Crop values" });
                            string outFile = "U:\\Cropdata_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            {
                                tw.Write(s);
                            }
                            tw.WriteLine();
                            int zone = 0;
                            int page = 0;
                            int crop = 0;
                            //tw.Close();
                            while (zone < 3)
                            {
                                //string result = "";

                                switch (zone)
                                {

                                    case 0:
                                        {// Mohave area
                                            page = 67;
                                            tw.WriteLine("Mohave Area");
                                            break;

                                        }
                                    case 1:
                                        {// Parker area
                                            page = 152;

                                            tw.WriteLine("Parker Area");
                                            break;
                                        }
                                    case 2:
                                        {// Yuma area
                                            page = 237;

                                            tw.WriteLine("Yuma Area");
                                            break;
                                        }

                                }
                                crop = 0;
                                var pdf = pdfText(fName, page);
                                string pattern = "";
                                string result = "";
                                while (crop <= 26)
                                {
                                    //tw = new StreamWriter(outFile,true);
                                    switch (crop)
                                    {
                                        case 0: // Alfalfa-perennial 
                                            {
                                                outPut = new List<string>();
                                                result = "Alfalfa-perennial  ";
                                                pattern = @"Alfalfa- perennial " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa- perennial", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 1:// Alfalfa- annual
                                            {

                                                outPut = new List<string>();
                                                result = "Alfalfa-annual  ";
                                                pattern = @"Alfalfa- annual " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa- annual", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 2:// Alfalfa- Seed
                                            {
                                                outPut = new List<string>();
                                                result = "Alfalfa-seed  ";
                                                pattern = @"Alfalfa- seed " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa- seed", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 3: // Cotton
                                            {
                                                outPut = new List<string>();
                                                result = "Cotton  ";
                                                pattern = @"Cotton " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Cotton", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 4: // small grain
                                            {
                                                outPut = new List<string>();
                                                result = "Small Grain  ";
                                                pattern = @"Small Grain " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Small Grain", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 5: // field grain
                                            {
                                                outPut = new List<string>();
                                                result = "Field Grain  ";
                                                pattern = @"Field Grain " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Field Grain", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 6: // lettuce-early
                                            {
                                                outPut = new List<string>();
                                                result = "Lettuce- early  ";
                                                pattern = @"Lettuce- early " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Lettuce- early", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 7: // lettuce- late
                                            {
                                                outPut = new List<string>();
                                                result = "Lettuce-late  ";
                                                pattern = @"Lettuce- late " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Lettuce- late", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 8: // melons- spring
                                            {
                                                outPut = new List<string>();
                                                result = "Melons-spring  ";
                                                pattern = @"Melons- spring " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Melons- spring", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 9: // melons- fall
                                            {
                                                outPut = new List<string>();
                                                result = "Melons-fall  ";
                                                pattern = @"Melons- fall " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Melons- fall", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 10:// bermuda
                                            {
                                                outPut = new List<string>();
                                                result = "Bermuda  ";
                                                pattern = @"Bermuda " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Bermuda", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 11: // bermuda w/ rye
                                            {
                                                outPut = new List<string>();
                                                result = "Bermuda w/ rye  ";
                                                pattern = @"Bermuda w/ rye " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Bermuda w/ rye", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 12: // citrus-young
                                            {
                                                outPut = new List<string>();
                                                result = "Citrus-young  ";
                                                pattern = @"Citrus- young " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Citrus- young", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 13: // citrus- mature
                                            {
                                                outPut = new List<string>();
                                                result = "Citrus-mature  ";
                                                pattern = @"Citrus- mature " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Citrus- mature", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 14: // citrus-declining
                                            {
                                                outPut = new List<string>();
                                                result = "Citrus-declining  ";
                                                pattern = @"Citrus- declining " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Citrus- declining", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 15: // tomatoes
                                            {
                                                outPut = new List<string>();
                                                result = "Tomatoes  ";
                                                pattern = @"Tomatoes " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Tomatoes", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 16: // sudan
                                            {
                                                outPut = new List<string>();
                                                result = "Sudan  ";
                                                pattern = @"Sudan " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sudan", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 17: // legume / solanum veg
                                            {
                                                outPut = new List<string>();
                                                result = "Legume/SolanumVeg  ";
                                                pattern = @"Legume/Solanum Veg " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Legume/Solanum Veg", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 18: // crucifers
                                            {
                                                outPut = new List<string>();
                                                result = "Crucifers  ";
                                                pattern = @"Crucifers " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Crucifers", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 19: // dates
                                            {
                                                outPut = new List<string>();
                                                result = "Dates  ";
                                                pattern = @"Dates " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Dates", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 20: // safflower
                                            {
                                                outPut = new List<string>();
                                                result = "Safflower  ";
                                                pattern = @"Safflower " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Safflower", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 21: // orchards
                                            {
                                                outPut = new List<string>();
                                                result = "Orchards  ";
                                                pattern = @"Orchards " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Orchards", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 22: // small vegetables
                                            {
                                                outPut = new List<string>();
                                                result = "SmallVegetables  ";
                                                pattern = @"Small Vegetables " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Small Vegetables", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 23: // root vegetables
                                            {
                                                outPut = new List<string>();
                                                result = "RootVegetables  ";
                                                pattern = @"Root Vegetables " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Root Vegetables", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 24: // perennial vegetables
                                            {
                                                outPut = new List<string>();
                                                result = "PerennialVegetables  ";
                                                pattern = @"Perennial Vegetables " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Perennial Vegetables", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 25: //sugar beets
                                            {
                                                outPut = new List<string>();
                                                result = "SugarBeets  ";
                                                pattern = @"Sugar Beets " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sugar Beets", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 26: // grapes
                                            {
                                                outPut = new List<string>();
                                                result = "Grapes  ";
                                                pattern = @"Grapes " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if(zone == 0)
                                                {
                                                    pattern = @"Grapes " + @"\d+\D\d+\s" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Grapes", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                tw.WriteLine();
                                                break;
                                            }




                                    }
                                    crop += 1;
                                }
                                zone += 1;
                            }
                            tw.Close();

                            //System.Diagnostics.Process.Start(outFile);
                            break;
                        }
                    case 6://01
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\01AppendixPart1.pdf";
                            Console.WriteLine("Processing pdf 01 for Crops");
                            var header = new List<string>(new string[] { "Year 01 Crop values" });
                            string outFile = "U:\\Cropdata_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            {
                                tw.Write(s);
                            }
                            tw.WriteLine();
                            int zone = 0;
                            int page = 0;
                            int crop = 0;
                            //tw.Close();
                            while (zone < 3)
                            {
                                //string result = "";

                                switch (zone)
                                {

                                    case 0:
                                        {// Mohave area
                                            page = 67;
                                            tw.WriteLine("Mohave Area");
                                            break;

                                        }
                                    case 1:
                                        {// Parker area
                                            page = 158;

                                            tw.WriteLine("Parker Area");
                                            break;
                                        }
                                    case 2:
                                        {// Yuma area
                                            page = 249;

                                            tw.WriteLine("Yuma Area");
                                            break;
                                        }

                                }
                                crop = 0;
                                var pdf = pdfText(fName, page);
                                string pattern = "";
                                string result = "";
                                while (crop <= 27)
                                {
                                    //tw = new StreamWriter(outFile,true);
                                    switch (crop)
                                    {
                                        case 0: // Alfalfa-perennial 
                                            {
                                                outPut = new List<string>();
                                                result = "Alfalfa-perennial  ";
                                                pattern = @"Alfalfa-perennial " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa- perennial", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 1:// Alfalfa- annual
                                            {

                                                outPut = new List<string>();
                                                result = "Alfalfa-annual  ";
                                                pattern = @"Alfalfa-annual " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa- annual", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 2:// Alfalfa- Seed
                                            {
                                                outPut = new List<string>();
                                                result = "Alfalfa-seed  ";
                                                pattern = @"Alfalfa-seed " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa- seed", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 3: // Cotton
                                            {
                                                outPut = new List<string>();
                                                result = "Cotton  ";
                                                pattern = @"Cotton " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Cotton", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 4: // small grain
                                            {
                                                outPut = new List<string>();
                                                result = "Small Grain  ";
                                                pattern = @"Small Grain " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Small Grain", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 5: // field grain
                                            {
                                                outPut = new List<string>();
                                                result = "Field Grain  ";
                                                pattern = @"Field Grain " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Field Grain", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 6: // lettuce-early
                                            {
                                                outPut = new List<string>();
                                                result = "Lettuce- early  ";
                                                pattern = @"Lettuce-early " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Lettuce- early", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 7: // lettuce- late
                                            {
                                                outPut = new List<string>();
                                                result = "Lettuce-late  ";
                                                pattern = @"Lettuce-late " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Lettuce- late", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 8: // melons- spring
                                            {
                                                outPut = new List<string>();
                                                result = "Melons-spring  ";
                                                pattern = @"Melons-spring " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if( zone == 0 || zone ==1 )
                                                {
                                                    pattern = @"Melons-spring " + @"\d+\D\d+\s" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                               
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Melons- spring", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 9: // melons- fall
                                            {
                                                outPut = new List<string>();
                                                result = "Melons-fall  ";
                                                pattern = @"Melons-fall " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Melons- fall", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 10:// bermuda
                                            {
                                                outPut = new List<string>();
                                                result = "Bermuda  ";
                                                pattern = @"Bermuda " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Bermuda", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 11: // bermuda w/ rye
                                            {
                                                outPut = new List<string>();
                                                result = "Bermuda w/ rye  ";
                                                pattern = @"Bermuda w/ rye " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Bermuda w/ rye", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 12: // citrus-young
                                            {
                                                outPut = new List<string>();
                                                result = "Citrus-young  ";
                                                if(zone ==0)
                                                pattern = @"Citrus- young " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"Citrus-young " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Citrus- young", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 13: // citrus- mature
                                            {
                                                outPut = new List<string>();
                                                result = "Citrus-mature  ";
                                                if(zone == 0)
                                                pattern = @"Citrus- mature " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"Citrus-mature " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                       + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                      + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Citrus- mature", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 14: // citrus-declining
                                            {
                                                outPut = new List<string>();
                                                result = "Citrus-declining  ";
                                                if(zone == 0)
                                                pattern = @"Citrus- declining " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"Citrus-declining " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Citrus- declining", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 15: // tomatoes
                                            {
                                                outPut = new List<string>();
                                                result = "Tomatoes  ";
                                                pattern = @"Tomatoes " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Tomatoes", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 16: // sudan
                                            {
                                                outPut = new List<string>();
                                                result = "Sudan  ";
                                                pattern = @"Sudan " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sudan", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 17: // legume / solanum veg
                                            {
                                                outPut = new List<string>();
                                                result = "Legume/SolanumVeg  ";
                                                pattern = @"Legume/Solanum Veg " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Legume/Solanum Veg", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 18: // crucifers
                                            {
                                                outPut = new List<string>();
                                                result = "Crucifers  ";
                                                pattern = @"Crucifers " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Crucifers", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 19: // dates
                                            {
                                                outPut = new List<string>();
                                                result = "Dates  ";
                                                pattern = @"Dates " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Dates", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 20: // safflower
                                            {
                                                outPut = new List<string>();
                                                result = "Safflower  ";
                                                pattern = @"Safflower " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Safflower", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 21: // orchards
                                            {
                                                outPut = new List<string>();
                                                result = "Orchards  ";
                                                pattern = @"Orchards " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Orchards", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 22: // small vegetables
                                            {
                                                outPut = new List<string>();
                                                result = "SmallVegetables  ";
                                                pattern = @"Small Vegetables " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Small Vegetables", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 23: // root vegetables
                                            {
                                                outPut = new List<string>();
                                                result = "RootVegetables  ";
                                                pattern = @"Root Vegetables " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Root Vegetables", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 24: // perennial vegetables
                                            {
                                                outPut = new List<string>();
                                                result = "PerennialVegetables  ";
                                                pattern = @"Perennial Vegetables " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Perennial Vegetables", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 25: //sugar beets
                                            {
                                                outPut = new List<string>();
                                                result = "SugarBeets  ";
                                                pattern = @"Sugar Beets " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sugar Beets", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 26: // grapes
                                            {
                                                outPut = new List<string>();
                                                result = "Grapes  ";
                                                pattern = @"Grapes " + @"\d+\D\d+\s" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Grapes", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 27:
                                            {
                                                outPut = new List<string>();
                                                result = "Herbs-misc  ";
                                                pattern = @"Herbs-misc " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Herbs-misc", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                tw.WriteLine();
                                                break;
                                            }
                              
                                    }
                                    crop += 1;
                                }
                                zone += 1;
                            }
                            tw.Close();

                            //System.Diagnostics.Process.Start(outFile);
                            break;
                        }
                    case 7://02
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\02AppendixPart1.pdf";
                            Console.WriteLine("Processing pdf 02 for Crop/Phreatophyte");
                            var header = new List<string>(new string[] { "Year 02 Crop/Phreatophyte values" });
                            string outFile = "U:\\Cropdata_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            {
                                tw.Write(s);
                            }
                            tw.WriteLine();
                            int zone = 0;
                            int page = 0;
                            int crop = 0;
                            //tw.Close();
                            while (zone < 3)
                            {
                                //string result = "";

                                switch (zone)
                                {

                                    case 0:
                                        {// Mohave area
                                            page = 66;
                                            tw.WriteLine("Mohave Area");
                                            break;

                                        }
                                    case 1:
                                        {// Parker area
                                            page = 157;

                                            tw.WriteLine("Parker Area");
                                            break;
                                        }
                                    case 2:
                                        {// Yuma area
                                            page = 248;

                                            tw.WriteLine("Yuma Area");
                                            break;
                                        }

                                }
                                crop = 0;
                                var pdf = pdfText(fName, page);
                                string pattern = "";
                                string result = "";
                                while (crop <= 29)
                                {
                                    //tw = new StreamWriter(outFile,true);
                                    switch (crop)
                                    {
                                        case 0: // Alfalfa-perennial 
                                            {
                                                outPut = new List<string>();
                                                result = "Alfalfa-perennial  ";
                                                pattern = @"Alfalfa-perennial " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa- perennial", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 1:// Alfalfa- annual
                                            {

                                                outPut = new List<string>();
                                                result = "Alfalfa-annual  ";
                                                pattern = @"Alfalfa-annual " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa- annual", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 2:// Alfalfa- Seed
                                            {
                                                outPut = new List<string>();
                                                result = "Alfalfa-seed  ";
                                                pattern = @"Alfalfa-seed " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa- seed", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 3: // Cotton
                                            {
                                                outPut = new List<string>();
                                                result = "Cotton  ";
                                                pattern = @"Cotton " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Cotton", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 4: // small grain
                                            {
                                                outPut = new List<string>();
                                                result = "Small Grain  ";
                                                pattern = @"Small Grain " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Small Grain", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 5: // field grain
                                            {
                                                outPut = new List<string>();
                                                result = "Field Grain  ";
                                                pattern = @"Field Grain " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Field Grain", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 6: // lettuce-early
                                            {
                                                outPut = new List<string>();
                                                result = "Lettuce- early  ";
                                                pattern = @"Lettuce-early " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Lettuce- early", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 7: // lettuce- late
                                            {
                                                outPut = new List<string>();
                                                result = "Lettuce-late  ";
                                                pattern = @"Lettuce-late " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Lettuce- late", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 8: // melons- spring
                                            {
                                                outPut = new List<string>();
                                                result = "Melons-spring  ";
                                                pattern = @"Melons-spring " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Melons- spring", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 9: // melons- fall
                                            {
                                                outPut = new List<string>();
                                                result = "Melons-fall  ";
                                                pattern = @"Melons-fall " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Melons- fall", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 10:// bermuda
                                            {
                                                outPut = new List<string>();
                                                result = "Bermuda  ";
                                                pattern = @"Bermuda " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Bermuda", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 11: // bermuda w/ rye
                                            {
                                                outPut = new List<string>();
                                                result = "Bermuda w/ rye  ";
                                                pattern = @"Bermuda w/ rye " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Bermuda w/ rye", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 12: // citrus-young
                                            {
                                                outPut = new List<string>();
                                                result = "Citrus-young  ";
                                                if (zone == 0)
                                                    pattern = @"Citrus- young " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"Citrus-young " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Citrus- young", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 13: // citrus- mature
                                            {
                                                outPut = new List<string>();
                                                result = "Citrus-mature  ";
                                                if (zone == 0)
                                                    pattern = @"Citrus- mature " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"Citrus-mature " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                       + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                      + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Citrus- mature", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 14: // citrus-declining
                                            {
                                                outPut = new List<string>();
                                                result = "Citrus-declining  ";
                                                if (zone == 0)
                                                    pattern = @"Citrus- declining " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"Citrus-declining " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Citrus- declining", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 15: // tomatoes
                                            {
                                                outPut = new List<string>();
                                                result = "Tomatoes  ";
                                                pattern = @"Tomatoes " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Tomatoes", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 16: // sudan
                                            {
                                                outPut = new List<string>();
                                                result = "Sudan  ";
                                                pattern = @"Sudan " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sudan", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 17: // legume / solanum veg
                                            {
                                                outPut = new List<string>();
                                                result = "Legume/SolanumVeg  ";
                                                pattern = @"Legume/Solanum Veg " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Legume/Solanum Veg", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 18: // crucifers
                                            {
                                                outPut = new List<string>();
                                                result = "Crucifers  ";
                                                pattern = @"Crucifers " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Crucifers", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 19: // dates
                                            {
                                                outPut = new List<string>();
                                                result = "Dates  ";
                                                pattern = @"Dates " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Dates", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 20: // safflower
                                            {
                                                outPut = new List<string>();
                                                result = "Safflower  ";
                                                pattern = @"Safflower " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Safflower", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 21: // orchards
                                            {
                                                outPut = new List<string>();
                                                result = "Orchards  ";
                                                pattern = @"Orchards " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Orchards", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 22: // small vegetables
                                            {
                                                outPut = new List<string>();
                                                result = "SmallVegetables  ";
                                                pattern = @"Small Vegetables " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Small Vegetables", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 23: // root vegetables
                                            {
                                                outPut = new List<string>();
                                                result = "RootVegetables  ";
                                                pattern = @"Root Vegetables " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Root Vegetables", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 24: // perennial vegetables
                                            {
                                                outPut = new List<string>();
                                                result = "PerennialVegetables  ";
                                                pattern = @"Perennial Vegetables " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Perennial Vegetables", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 25: //sugar beets
                                            {
                                                outPut = new List<string>();
                                                result = "SugarBeets  ";
                                                pattern = @"Sugar Beets " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sugar Beets", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 26: // grapes
                                            {
                                                outPut = new List<string>();
                                                result = "Grapes  ";
                                                pattern = @"Grapes " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Grapes", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 27:
                                            {
                                                outPut = new List<string>();
                                                result = "Herbs-misc  ";
                                                pattern = @"Herbs-misc " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Herbs-misc", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.WriteLine();
                                                break;
                                            }
                                        case 28:
                                            {
                                                outPut = new List<string>();
                                                result = "MoistSoilUnit  ";
                                                pattern = @"Moist Soil Unit " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Herbs-misc", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                               // tw.WriteLine();
                                                break;
                                            }
                                        case 29:
                                            {
                                                outPut = new List<string>();
                                                result = "SeasonalWetland  ";
                                                pattern = @"Seasonal Wetland " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Seasonal Wetland", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                tw.WriteLine();
                                                break;
                                            }

                                    }
                                    crop += 1;
                                }
                                zone += 1;
                            }
                            tw.Close();

                            //System.Diagnostics.Process.Start(outFile);
                            break;
                        }
                    case 8://03
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\2003LCRAS.pdf";
                            Console.WriteLine("Processing pdf 03 for Crop/Phreatophyte");
                            var header = new List<string>(new string[] { "Year 03 Crop/Phreatophyte values" });
                            string outFile = "U:\\Cropdata_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            {
                                tw.Write(s);
                            }
                            tw.WriteLine();
                            int zone = 0;
                            int page = 0;
                            int crop = 0;
                            //tw.Close();
                            while (zone < 3)
                            {
                                //string result = "";

                                switch (zone)
                                {

                                    case 0:
                                        {// Mohave area
                                            page = 105;
                                            tw.WriteLine("Mohave Area");
                                            break;

                                        }
                                    case 1:
                                        {// Parker area
                                            page = 196;

                                            tw.WriteLine("Parker Area");
                                            break;
                                        }
                                    case 2:
                                        {// Yuma area
                                            page = 287;

                                            tw.WriteLine("Yuma Area");
                                            break;
                                        }

                                }
                                crop = 0;
                                var pdf = pdfText(fName, page);
                                string pattern = "";
                                string result = "";
                                while (crop <= 29)
                                {
                                    //tw = new StreamWriter(outFile,true);
                                    switch (crop)
                                    {
                                        case 0: // Alfalfa-perennial 
                                            {
                                                outPut = new List<string>();
                                                result = "Alfalfa-perennial  ";
                                                pattern = @"Alfalfa-perennial " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa- perennial", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 1:// Alfalfa- annual
                                            {

                                                outPut = new List<string>();
                                                result = "Alfalfa-annual  ";
                                                pattern = @"Alfalfa-annual " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa- annual", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 2:// Alfalfa- Seed
                                            {
                                                outPut = new List<string>();
                                                result = "Alfalfa-seed  ";
                                                pattern = @"Alfalfa-seed " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa- seed", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 3: // Cotton
                                            {
                                                outPut = new List<string>();
                                                result = "Cotton  ";
                                                pattern = @"Cotton " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Cotton", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 4: // small grain
                                            {
                                                outPut = new List<string>();
                                                result = "Small Grain  ";
                                                pattern = @"Small Grain " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Small Grain", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 5: // field grain
                                            {
                                                outPut = new List<string>();
                                                result = "Field Grain  ";
                                                pattern = @"Field Grain " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Field Grain", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 6: // lettuce-early
                                            {
                                                outPut = new List<string>();
                                                result = "Lettuce- early  ";
                                                pattern = @"Lettuce-early " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Lettuce- early", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 7: // lettuce- late
                                            {
                                                outPut = new List<string>();
                                                result = "Lettuce-late  ";
                                                pattern = @"Lettuce-late " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Lettuce- late", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 8: // melons- spring
                                            {
                                                outPut = new List<string>();
                                                result = "Melons-spring  ";
                                                if(zone == 0)
                                                pattern = @"Melons-spring " + @"\d+\D\d+\s" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"Melons-spring " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Melons- spring", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 9: // melons- fall
                                            {
                                                outPut = new List<string>();
                                                result = "Melons-fall  ";
                                                pattern = @"Melons-fall " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Melons- fall", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 10:// bermuda
                                            {
                                                outPut = new List<string>();
                                                result = "Bermuda  ";
                                                pattern = @"Bermuda " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Bermuda", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 11: // bermuda w/ rye
                                            {
                                                outPut = new List<string>();
                                                result = "Bermuda w/ rye  ";
                                                pattern = @"Bermuda w/ rye " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Bermuda w/ rye", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 12: // citrus-young
                                            {
                                                outPut = new List<string>();
                                                result = "Citrus-young  ";
                                                if (zone == 0)
                                                    pattern = @"Citrus- young " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"Citrus-young " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Citrus- young", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 13: // citrus- mature
                                            {
                                                outPut = new List<string>();
                                                result = "Citrus-mature  ";
                                                if (zone == 0)
                                                    pattern = @"Citrus- mature " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"Citrus-mature " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                       + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                      + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Citrus- mature", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 14: // citrus-declining
                                            {
                                                outPut = new List<string>();
                                                result = "Citrus-declining  ";
                                                if (zone == 0)
                                                    pattern = @"Citrus- declining " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"Citrus-declining " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Citrus- declining", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 15: // tomatoes
                                            {
                                                outPut = new List<string>();
                                                result = "Tomatoes  ";
                                                pattern = @"Tomatoes " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Tomatoes", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 16: // sudan
                                            {
                                                outPut = new List<string>();
                                                result = "Sudan  ";
                                                pattern = @"Sudan " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sudan", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 17: // legume / solanum veg
                                            {
                                                outPut = new List<string>();
                                                result = "Legume/SolanumVeg  ";
                                                pattern = @"Legume/Solanum Veg " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Legume/Solanum Veg", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 18: // crucifers
                                            {
                                                outPut = new List<string>();
                                                result = "Crucifers  ";
                                                pattern = @"Crucifers " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Crucifers", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 19: // dates
                                            {
                                                outPut = new List<string>();
                                                result = "Dates  ";
                                                pattern = @"Dates " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Dates", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 20: // safflower
                                            {
                                                outPut = new List<string>();
                                                result = "Safflower  ";
                                                pattern = @"Safflower " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Safflower", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 21: // orchards
                                            {
                                                outPut = new List<string>();
                                                result = "Orchards  ";
                                                pattern = @"Orchards " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Orchards", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 22: // small vegetables
                                            {
                                                outPut = new List<string>();
                                                result = "SmallVegetables  ";
                                                pattern = @"Small Vegetables " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Small Vegetables", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 23: // root vegetables
                                            {
                                                outPut = new List<string>();
                                                result = "RootVegetables  ";
                                                pattern = @"Root Vegetables " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Root Vegetables", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 24: // perennial vegetables
                                            {
                                                outPut = new List<string>();
                                                result = "PerennialVegetables  ";
                                                pattern = @"Perennial Vegetables " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Perennial Vegetables", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 25: //sugar beets
                                            {
                                                outPut = new List<string>();
                                                result = "SugarBeets  ";
                                                pattern = @"Sugar Beets " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sugar Beets", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 26: // grapes
                                            {
                                                outPut = new List<string>();
                                                result = "Grapes  ";
                                                pattern = @"Grapes " + @"\d+\D\d+\s" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if(zone == 1 )
                                                    pattern = @"Grapes " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Grapes", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 27:
                                            {
                                                outPut = new List<string>();
                                                result = "Herbs-misc  ";
                                                pattern = @"Herbs-misc " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Herbs-misc", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.WriteLine();
                                                break;
                                            }
                                        case 28:
                                            {
                                                outPut = new List<string>();
                                                result = "MoistSoilUnit  ";
                                                pattern = @"Moist Soil Unit " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Herbs-misc", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                // tw.WriteLine();
                                                break;
                                            }
                                        case 29:
                                            {
                                                outPut = new List<string>();
                                                result = "SeasonalWetland  ";
                                                pattern = @"Seasonal Wetland " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Seasonal Wetland", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                tw.WriteLine();
                                                break;
                                            }

                                    }
                                    crop += 1;
                                }
                                zone += 1;
                            }
                            tw.Close();

                            //System.Diagnostics.Process.Start(outFile);
                            break;
                        }
                    case 9://04
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\2004LCRAS.pdf";
                            Console.WriteLine("Processing pdf 04 for Crop/Phreatophyte");
                            var header = new List<string>(new string[] { "Year 04 Crop/Phreatophyte values" });
                            string outFile = "U:\\Cropdata_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            {
                                tw.Write(s);
                            }
                            tw.WriteLine();
                            int zone = 0;
                            int page = 0;
                            int crop = 0;
                            //tw.Close();
                            while (zone < 5)
                            {
                                //string result = "";

                                switch (zone)
                                {

                                    case 0:
                                        {// Mohave area
                                            page = 115;
                                            tw.WriteLine("Mohave Area");
                                            break;

                                        }
                                    case 1:
                                        {// Parker area
                                            page = 206;

                                            tw.WriteLine("Parker/Palo Verde Area");
                                            break;
                                        }
                                    case 2:
                                        {// Yuma area
                                            page = 485;

                                            tw.WriteLine("Yuma Area");
                                            break;
                                        }
                                    case 3:
                                        { //IID and Coachella have extra crops these are Cane/Bamboo, Sugar Beets(Winter), Sugar Beets(Summer)
                                            page = 388;
                                            tw.WriteLine("Imperial/Coachella Valley Area");
                                            break;
                                        }
                                    case 4:
                                        {
                                            page = 297;
                                            tw.WriteLine("Wellton-Mohawk Area");
                                            break;
                                        }

                                }
                                crop = 0;
                                var pdf = pdfText(fName, page);
                                string pattern = "";
                                string result = "";
                                while (crop <= 29)
                                {
                                    //tw = new StreamWriter(outFile,true);
                                    switch (crop)
                                    {
                                        case 0: // Alfalfa-perennial 
                                            {
                                                outPut = new List<string>();
                                                result = "Alfalfa-perennial  ";
                                                pattern = @"Alfalfa-perennial " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if(zone == 1)
                                                {
                                                    pattern = @"Alfalfa-perennial\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa- perennial", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 1:// Alfalfa- annual
                                            {

                                                outPut = new List<string>();
                                                result = "Alfalfa-annual  ";
                                                pattern = @"Alfalfa-annual " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa- annual", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 2:// Alfalfa- Seed
                                            {
                                                outPut = new List<string>();
                                                result = "Alfalfa-seed  ";
                                                pattern = @"Alfalfa-seed " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if(zone == 0)
                                                    pattern = @"Alfalfa-seed " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa- seed", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 3: // Cotton
                                            {
                                                outPut = new List<string>();
                                                result = "Cotton  ";
                                                pattern = @"Cotton " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Cotton", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 4: // small grain
                                            {
                                                outPut = new List<string>();
                                                result = "Small Grain  ";
                                                pattern = @"wheat\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if(zone == 3)
                                                    pattern = @"wheat\)\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("wheat)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 5: // field grain
                                            {
                                                outPut = new List<string>();
                                                result = "Field Grain  ";
                                                pattern = @"and milo\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("and milo)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 6: // lettuce-Fall
                                            {
                                                outPut = new List<string>();
                                                result = "Lettuce-Fall  ";
                                                if (zone == 0||zone == 3)
                                                {
                                                    pattern = @"Lettuce-Fall " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone == 1)
                                                {
                                                    pattern = @"Lettuce - Fall " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }else
                                                    pattern = @"Nov 28\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Lettuce- early", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 7: // lettuce-Spring
                                            {
                                                outPut = new List<string>();
                                                result = "Lettuce-Spring  ";
                                                if (zone == 0 ||zone == 3)
                                                { 
                                                    pattern = @"Lettuce-Spring " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone == 1)
                                                {
                                                    pattern = @"Lettuce - Spring " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }else if (zone == 2)
                                                    pattern = @"17\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"17\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Lettuce- late", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 8: // melons- spring
                                            {
                                                outPut = new List<string>();
                                                result = "Melons-spring  ";
                                                if (zone == 0)
                                                {
                                                    pattern = @"Melons-spring " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone == 1)
                                                {
                                                    pattern = @"Melons - spring \(Feb 25 - Jun 19\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if(zone == 2||zone == 4)
                                                {
                                                    pattern = @"Melons - spring \(Feb 1 - May 31\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone == 3)
                                                {
                                                    pattern = @"Melons - spring " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                
                                                
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Melons- spring", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 9: // melons- fall
                                            {
                                                outPut = new List<string>();
                                                result = "Melons-fall  ";
                                                if (zone == 0)
                                                    pattern = @"Melons-fall \(Aug 20 \- Dec 17\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else if (zone == 1)
                                                    pattern = @"Melons - fall \(Aug 20 - Dec 17\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else if (zone == 2)
                                                    pattern = @"Dec 29\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else if (zone == 3)
                                                {
                                                    pattern = @"Melons -Fall " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else
                                                    pattern = @"May 31\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Melons- fall", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                if (zone == 3)
                                                {
                                                    result = "Cane/Bamboo  ";
                                                    pattern = @"Cane/Bamboo " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                    matches = Regex.Matches(pdf, pattern);
                                                    if (matches.Count < 1)
                                                    {
                                                        result = result + " File Not Readable";

                                                    }
                                                    else
                                                    {
                                                        result = result + matches[0].Value.Replace("Melons- fall", "").Trim();
                                                    }
                                                    outPut.Add(result);
                                                    foreach (String s in outPut)
                                                    {
                                                        tw.WriteLine(s);
                                                    }
                                                }
                                                break;
                                            }
                                        case 10:// bermuda
                                            {
                                                outPut = new List<string>();
                                                result = "Bermuda  ";
                                                pattern = @"Bermuda Grass " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Bermuda", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 11: // bermuda w/ rye
                                            {
                                                outPut = new List<string>();
                                                result = "Bermuda w/ rye  ";
                                                if (zone == 0)
                                                {
                                                    pattern = @"Bermuda w/ rye " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if(zone == 1)
                                                {
                                                    pattern = @"winter\)\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone == 3)
                                                    pattern = @"winter " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                   + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                   + @"\d+\D\d+\s" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s";

                                                else
                                                    pattern = @"winter " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Bermuda w/ rye", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 12: // citrus-young
                                            {
                                                outPut = new List<string>();
                                                result = "Citrus-young  ";
                                                
                                                    pattern = @"2 meters tall\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                              
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Citrus- young", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 13: // citrus- mature
                                            {
                                                outPut = new List<string>();
                                                result = "Citrus-mature  ";
                                               
                                                    pattern = @"3\+ meters tall\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                              
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Citrus- mature", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 14: // citrus-declining
                                            {
                                                outPut = new List<string>();
                                                result = "Citrus-declining  ";
                                                if (zone == 0)
                                                    pattern = @"Citrus- declining " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else if (zone == 1)
                                                    pattern = @"Citrus-declining " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"Citrus - declining\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Citrus- declining", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 15: // tomatoes
                                            {
                                                outPut = new List<string>();
                                                result = "Tomatoes  ";
                                                pattern = @"Tomatoes " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Tomatoes", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 16: // sudan
                                            {
                                                outPut = new List<string>();
                                                result = "Sudan  ";
                                                if(zone == 1)
                                                    pattern = @"Sudan Grass " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                   + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                   + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"Sudan " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                               
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sudan", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 17: // legume / solanum veg
                                            {
                                                outPut = new List<string>();
                                                result = "Legume/SolanumVeg  ";
                                                pattern = @"potatoes\]\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("potatoes])", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 18: // crucifers
                                            {
                                                outPut = new List<string>();
                                                result = "Crucifers  ";
                                                pattern = @"okra\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("oakra)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 19: // dates
                                            {
                                                outPut = new List<string>();
                                                result = "Dates  ";
                                                if(zone ==  0)
                                                pattern = @"Dates " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else if(zone  == 1)
                                                    pattern = @"Dates\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"Dates " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                               + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                               + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Dates", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 20: // safflower
                                            {
                                                outPut = new List<string>();
                                                result = "Safflower  ";
                                                pattern = @"Safflower " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Safflower", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 21: // orchards
                                            {
                                                outPut = new List<string>();
                                                result = "Orchards  ";
                                                if(zone ==0)
                                                pattern = @"Orchards " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"peaches\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Orchards", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 22: // small vegetables
                                            {
                                                outPut = new List<string>();
                                                result = "SmallVegetables  ";
                                                pattern = @"radishes\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("radishes)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 23: // root vegetables
                                            {
                                                outPut = new List<string>();
                                                result = "RootVegetables  ";
                                                pattern = @"rutabagas\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("rutabagas)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 24: // perennial vegetables
                                            {
                                                outPut = new List<string>();
                                                result = "PerennialVegetables  ";
                                                pattern = @"asparagus\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("asparagus)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 25: //sugar beets
                                            {
                                                outPut = new List<string>();
                                                result = "SugarBeets  ";
                                                pattern = @"Sugar Beets " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if(zone == 3)
                                                {
                                                    result = "SugarBeets (Winter)  ";
                                                    pattern = @"Sugar Beets \(Winter\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                    MatchCollection matches1 = Regex.Matches(pdf, pattern);
                                                    if (matches1.Count < 1)
                                                    {
                                                        result = result + " File Not Readable";

                                                    }
                                                    else
                                                    {
                                                        result = result + matches1[0].Value.Replace("Sugar Beets (Winter)", "").Trim();
                                                    }
                                                    outPut.Add(result);
                                                    foreach (String s in outPut)
                                                    {
                                                        tw.WriteLine(s);
                                                    }
                                                    outPut = new List<string>();
                                                    result = "SugarBeets (Summer)  ";
                                                    pattern = @"Sugar Beets \(Summer\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                    MatchCollection matches2 = Regex.Matches(pdf, pattern);
                                                    if (matches2.Count < 1)
                                                    {
                                                        result = result + " File Not Readable";

                                                    }
                                                    else
                                                    {
                                                        result = result + matches2[0].Value.Replace("Sugar Beets (Summer)", "").Trim();
                                                    }
                                                    outPut.Add(result);
                                                    foreach (String s in outPut)
                                                    {
                                                        tw.WriteLine(s);
                                                    }
                                                    break;
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sugar Beets", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 26: // grapes
                                            {
                                                outPut = new List<string>();
                                                result = "Grapes  ";
                                                if(zone==0|| zone ==3 )
                                                pattern = @"Grapes " + @"\d+\D\d+\s" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";                                           
                                                else
                                                    pattern = @"Grapes " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Grapes", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 27:
                                            {
                                                outPut = new List<string>();
                                                result = "Herbs-misc  ";
                                                if(zone == 0)
                                                     pattern = @"Herbs-miscellaneous " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                     + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\D\d+\D\d+\s"
                                                     + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                     pattern = @"Herbs-misc " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                     + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                     + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Herbs-miscellaneous", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.WriteLine();
                                                break;
                                            }
                                        case 28:
                                            {
                                                outPut = new List<string>();
                                                result = "MoistSoilUnit  ";
                                                pattern = @"Moist Soil Unit " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Herbs-misc", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                // tw.WriteLine();
                                                break;
                                            }
                                        case 29:
                                            {
                                                outPut = new List<string>();
                                                result = "SeasonalWetland  ";
                                                pattern = @"Wetland " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if(zone == 3)
                                                    pattern = @"Wetland\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Wetland", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                tw.WriteLine();
                                                break;
                                            }

                                    }
                                    crop += 1;
                                }
                                zone += 1;
                            }
                            tw.Close();

                            //System.Diagnostics.Process.Start(outFile);
                            break;
                        }
                    case 10://05
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\2005LCRAS.pdf";
                            Console.WriteLine("Processing pdf 05 for Crop/Phreatophyte");
                            var header = new List<string>(new string[] { "Year 05 Crop/Phreatophyte values" });
                            string outFile = "U:\\Cropdata_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            {
                                tw.Write(s);
                            }
                            tw.WriteLine();
                            int zone = 0;
                            int page = 0;
                            int crop = 0;
                            //tw.Close();
                            while (zone < 5)
                            {
                                //string result = "";

                                switch (zone)
                                {

                                    case 0:
                                        {// Mohave area
                                            page = 111;
                                            tw.WriteLine("Mohave Area");
                                            break;

                                        }
                                    case 1:
                                        {// Parker area
                                            page = 203;
                                            tw.WriteLine("Parker/Palo Verde Area");
                                            break;
                                        }
                                    case 2:
                                        {// Yuma area
                                            page = 484;

                                            tw.WriteLine("Yuma Area");
                                            break;
                                        }
                                    case 3:
                                        { //IID and Coachella have extra crops these are Cane/Bamboo, Sugar Beets(Winter), Sugar Beets(Summer)
                                            page = 387;
                                            tw.WriteLine("Imperial/Coachella Valley Area");
                                            break;
                                        }
                                    case 4:
                                        {
                                            page = 295;
                                            tw.WriteLine("Wellton-Mohawk Area");
                                            break;
                                        }

                                }
                                crop = 0;
                                var pdf = pdfText(fName, page);
                                string pattern = "";
                                string result = "";
                                while (crop <= 29)
                                {
                                    //tw = new StreamWriter(outFile,true);
                                    switch (crop)
                                    {
                                        case 0: // Alfalfa-perennial 
                                            {
                                                outPut = new List<string>();
                                                result = "Alfalfa-perennial  ";
                                                pattern = @"Alfalfa-perennial " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa- perennial", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 1:// Alfalfa- annual
                                            {

                                                outPut = new List<string>();
                                                result = "Alfalfa-annual  ";
                                                pattern = @"Alfalfa-annual " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa- annual", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 2:// Alfalfa- Seed
                                            {
                                                outPut = new List<string>();
                                                result = "Alfalfa-seed  ";
                                                //string test = @"((\-)?+(\d+)+?(\.\d+)?)\s";
                                                pattern = @"Alfalfa-seed " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if(zone == 0)
                                                    pattern = @"Alfalfa-seed " + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";


                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa- seed", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 3: // Cotton
                                            {
                                                outPut = new List<string>();
                                                result = "Cotton  ";
                                                pattern = @"Cotton " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Cotton", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 4: // small grain
                                            {
                                                outPut = new List<string>();
                                                result = "Small Grain  ";
                                                pattern = @"wheat\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 2|| zone  == 4)
                                                    pattern = @"wheat\)\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("wheat)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 5: // field grain
                                            {
                                                outPut = new List<string>();
                                                result = "Field Grain  ";
                                                pattern = @"and milo\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("and milo)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 6: // lettuce-Fall
                                            {
                                                outPut = new List<string>();
                                                result = "Lettuce-Fall  ";
                                                if (zone == 0 || zone == 3)
                                                {
                                                    pattern = @"Lettuce-Fall " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone == 1)
                                                {
                                                    pattern = @"Lettuce-Fall " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else
                                                    pattern = @"Nov 28\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Lettuce- early", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 7: // lettuce-Spring
                                            {
                                                outPut = new List<string>();
                                                result = "Lettuce-Spring  ";
                                                if (zone == 0 || zone == 3)
                                                {
                                                    pattern = @"Lettuce-Spring " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone == 1)
                                                {
                                                    pattern = @"Lettuce - Spring " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone == 2)
                                                    pattern = @"17\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"17\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Lettuce- late", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 8: // melons- spring
                                            {
                                                outPut = new List<string>();
                                                result = "Melons-spring  ";
                                                if (zone == 0)
                                                {
                                                    pattern = @"Melons-spring " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone == 1)
                                                {
                                                    pattern = @"Melons - spring \(Feb 25 - Jun 19\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone == 2 || zone == 4)
                                                {
                                                    pattern = @"Melons - spring \(Feb 1 - May 31\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone == 3)
                                                {
                                                    pattern = @"Melons - spring " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }


                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Melons- spring", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 9: // melons- fall
                                            {
                                                outPut = new List<string>();
                                                result = "Melons-fall  ";
                                                if (zone == 0)
                                                    pattern = @"Melons-fall \(Aug 20 \- Dec 17\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else if (zone == 1)
                                                    pattern = @"Melons - fall \(Aug 20 - Dec 17\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else if (zone == 2)
                                                    pattern = @"Dec 29\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else if (zone == 3)
                                                {
                                                    pattern = @"Melons -Fall " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else
                                                    pattern = @"May 31\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Melons- fall", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                if (zone == 3)
                                                {
                                                    result = "Cane/Bamboo  ";
                                                    pattern = @"Cane/Bamboo " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                    matches = Regex.Matches(pdf, pattern);
                                                    if (matches.Count < 1)
                                                    {
                                                        result = result + " File Not Readable";

                                                    }
                                                    else
                                                    {
                                                        result = result + matches[0].Value.Replace("Melons- fall", "").Trim();
                                                    }
                                                    outPut.Add(result);
                                                    foreach (String s in outPut)
                                                    {
                                                        tw.WriteLine(s);
                                                    }
                                                }
                                                break;
                                            }
                                        case 10:// bermuda
                                            {
                                                outPut = new List<string>();
                                                result = "Bermuda  ";
                                                pattern = @"Bermuda Grass " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Bermuda", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 11: // bermuda w/ rye
                                            {
                                                outPut = new List<string>();
                                                result = "Bermuda w/ rye  ";
                                                if (zone == 0)
                                                {
                                                    pattern = @"Bermuda w/ rye " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone == 1)
                                                {
                                                    pattern = @"winter\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else
                                                    pattern = @"winter " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Bermuda w/ rye", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 12: // citrus-young
                                            {
                                                outPut = new List<string>();
                                                result = "Citrus-young  ";
                                                if(zone == 0)
                                                    pattern = @"2 meters tall\) " + @"\D\d+\D\d+\s" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else  if (zone == 1)
                                                pattern = @"2 meters tall\) " + @"\d+\D\d+\s" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"2 meters tall\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Citrus- young", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 13: // citrus- mature
                                            {
                                                outPut = new List<string>();
                                                result = "Citrus-mature  ";

                                                pattern = @"3\+ meters tall\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Citrus- mature", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 14: // citrus-declining
                                            {
                                                outPut = new List<string>();
                                                result = "Citrus-declining  ";
                                                if (zone == 0)
                                                    pattern = @"Citrus- declining " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else if (zone == 1)
                                                    pattern = @"Citrus-declining " + @"\d+\D\d+\s" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else if (zone ==  2 || zone ==3 || zone  == 4)
                                                    pattern = @"Citrus - declining " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"Citrus - declining\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Citrus- declining", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 15: // tomatoes
                                            {
                                                outPut = new List<string>();
                                                result = "Tomatoes  ";
                                                pattern = @"Tomatoes " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 2 || zone  == 3 || zone == 4)
                                                {
                                                    pattern = @"Tomatoes\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                               + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                               + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Tomatoes", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 16: // sudan
                                            {
                                                outPut = new List<string>();
                                                result = "Sudan  ";
                                                if (zone == 1)
                                                    pattern = @"Sudan Grass " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                   + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                   + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"Sudan " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sudan", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 17: // legume / solanum veg
                                            {
                                                outPut = new List<string>();
                                                result = "Legume/SolanumVeg  ";
                                                pattern = @"potatoes\]\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if(zone ==1)
                                                    pattern = @"25 " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("potatoes])", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 18: // crucifers
                                            {
                                                outPut = new List<string>();
                                                result = "Crucifers  ";
                                                pattern = @"okra\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("oakra)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 19: // dates
                                            {
                                                outPut = new List<string>();
                                                result = "Dates  ";
                                                if (zone == 0)
                                                    pattern = @"Dates " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else if (zone == 1)
                                                    pattern = @"Dates " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"Dates " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                               + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                               + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Dates", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 20: // safflower
                                            {
                                                outPut = new List<string>();
                                                result = "Safflower  ";
                                                if(zone  == 0 || zone == 1)
                                                    pattern = @"Safflower " + @"\d+\D\d+\s" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                               + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                               + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else 
                                                pattern = @"Safflower " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Safflower", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 21: // orchards
                                            {
                                                outPut = new List<string>();
                                                result = "Orchards  ";
                                                if (zone == 0)
                                                    pattern = @"Orchards " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else if (zone  == 1)
                                                    pattern = @"peaches\) " + @"\d+\D\d+\s" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"peaches\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Orchards", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 22: // small vegetables
                                            {
                                                outPut = new List<string>();
                                                result = "SmallVegetables  ";
                                                pattern = @"radishes\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("radishes)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 23: // root vegetables
                                            {
                                                outPut = new List<string>();
                                                result = "RootVegetables  ";
                                                pattern = @"rutabagas\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("rutabagas)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 24: // perennial vegetables
                                            {
                                                outPut = new List<string>();
                                                result = "PerennialVegetables  ";
                                                pattern = @"asparagus\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if(zone == 1)
                                                    pattern = @"asparagus\) " + @"\d+\D\d+\s" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("asparagus)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 25: //sugar beets
                                            {
                                                outPut = new List<string>();
                                                result = "SugarBeets  ";
                                                pattern = @"Sugar Beets " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 1)
                                                    pattern = @"33 " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 3)
                                                {
                                                    result = "SugarBeets (Winter)  ";
                                                    pattern = @"Sugar Beets \(Winter\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                    MatchCollection matches1 = Regex.Matches(pdf, pattern);
                                                    if (matches1.Count < 1)
                                                    {
                                                        result = result + " File Not Readable";

                                                    }
                                                    else
                                                    {
                                                        result = result + matches1[0].Value.Replace("Sugar Beets (Winter)", "").Trim();
                                                    }
                                                    outPut.Add(result);
                                                    foreach (String s in outPut)
                                                    {
                                                        tw.WriteLine(s);
                                                    }
                                                    outPut = new List<string>();
                                                    result = "SugarBeets (Summer)  ";
                                                    pattern = @"Sugar Beets \(Summer\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                    MatchCollection matches2 = Regex.Matches(pdf, pattern);
                                                    if (matches2.Count < 1)
                                                    {
                                                        result = result + " File Not Readable";

                                                    }
                                                    else
                                                    {
                                                        result = result + matches2[0].Value.Replace("Sugar Beets (Summer)", "").Trim();
                                                    }
                                                    outPut.Add(result);
                                                    foreach (String s in outPut)
                                                    {
                                                        tw.WriteLine(s);
                                                    }
                                                    break;
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sugar Beets", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 26: // grapes
                                            {
                                                outPut = new List<string>();
                                                result = "Grapes  ";
                                                if (zone == 0 || zone == 2|| zone ==1 || zone  == 3 || zone  == 4)
                                                    pattern = @"Grapes " + @"\d+\D\d+\s" + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"Grapes " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Grapes", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 27:
                                            {
                                                outPut = new List<string>();
                                                result = "Herbs-misc  ";
                                                if (zone == 0)
                                                    pattern = @"Herbs-miscellaneous " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"Herbs-misc " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Herbs-miscellaneous", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.WriteLine();
                                                break;
                                            }
                                        case 28:
                                            {
                                                outPut = new List<string>();
                                                result = "MoistSoilUnit  ";
                                                pattern = @"Moist Soil Unit " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Herbs-misc", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                // tw.WriteLine();
                                                break;
                                            }
                                        case 29:
                                            {
                                                outPut = new List<string>();
                                                result = "SeasonalWetland  ";
                                                pattern = @"Wetland " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Wetland", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                tw.WriteLine();
                                                break;
                                            }

                                    }
                                    crop += 1;
                                }
                                zone += 1;
                            }
                            tw.Close();

                            //System.Diagnostics.Process.Start(outFile);
                            break;
                        }
                    case 11://06
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\2006LCRAS.pdf";
                            Console.WriteLine("Processing pdf 06 for Crop/Phreatophyte");
                            var header = new List<string>(new string[] { "Year 06 Crop/Phreatophyte values" });
                            string outFile = "U:\\Cropdata_95to11.txt";
                            //TextWriter tw = new StreamWriter(outFile, true);
                            TextWriter tw = new StreamWriter(outFile,true);
                            foreach (String s in header)
                            {
                                tw.Write(s);
                            }
                            tw.WriteLine();
                            int zone = 0;
                            int page = 0;
                            int crop = 0;
                            //tw.Close();
                            while (zone < 5)
                            {
                                //string result = "";

                                switch (zone)
                                {

                                    case 0:
                                        {// Mohave area
                                            page = 111;
                                            tw.WriteLine("Mohave Area");
                                            break;

                                        }
                                    case 1:
                                        {// Parker area
                                            page = 203;
                                            tw.WriteLine("Parker/Palo Verde Area");
                                            break;
                                        }
                                    case 2:
                                        {// Yuma area
                                            page = 484;

                                            tw.WriteLine("Yuma Area");
                                            break;
                                        }
                                    case 3:
                                        { //IID and Coachella have extra crops these are Cane/Bamboo, Sugar Beets(Winter), Sugar Beets(Summer)
                                            page = 387;
                                            tw.WriteLine("Imperial/Coachella Valley Area");
                                            break;
                                        }
                                    case 4:
                                        {
                                            page = 295;
                                            tw.WriteLine("Wellton-Mohawk Area");
                                            break;
                                        }

                                }
                                crop = 0;
                                var pdf = pdfText(fName, page);
                                string pattern = "";
                                string result = "";
                                while (crop <= 29)
                                {
                                    //tw = new StreamWriter(outFile,true);
                                    switch (crop)
                                    {
                                        case 0: // Alfalfa-perennial 
                                            {
                                                outPut = new List<string>();
                                                result = "Alfalfa-perennial  ";
                                                pattern = @"Alfalfa-perennial " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa- perennial", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 1:// Alfalfa- annual
                                            {

                                                outPut = new List<string>();
                                                result = "Alfalfa-annual  ";
                                                pattern = @"Alfalfa-annual " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa- annual", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 2:// Alfalfa- Seed
                                            {
                                                outPut = new List<string>();
                                                result = "Alfalfa-seed  ";
                                                pattern = @"Alfalfa-seed " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa- seed", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 3: // Cotton
                                            {
                                                outPut = new List<string>();
                                                result = "Cotton  ";
                                                pattern = @"Cotton " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Cotton", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 4: // small grain
                                            {
                                                outPut = new List<string>();
                                                result = "Small Grain  ";
                                                pattern = @"wheat\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if ( zone == 4)
                                                    pattern = @"wheat\)\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("wheat)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 5: // field grain
                                            {
                                                outPut = new List<string>();
                                                result = "Field Grain  ";
                                                pattern = @"milo\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if(zone == 3)
                                                    pattern = @"\& " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                               + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                               + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("and milo)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 6: // lettuce-Fall
                                            {
                                                outPut = new List<string>();
                                                result = "Lettuce-Fall  ";
                                                if (zone == 0 || zone == 3)
                                                {
                                                    pattern = @"Lettuce-Fall " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone  == 1)
                                                    pattern = @"14 " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"Lettuce-Fall \(Sept 15 \- Nov 28\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Lettuc-Fall", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 7: // lettuce-Spring
                                            {
                                                outPut = new List<string>();
                                                result = "Lettuce-Spring  ";
                                                if (zone == 0 || zone == 3)
                                                {
                                                    pattern = @"Lettuce-Spring " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone == 1)
                                                {
                                                    pattern = @"Lettuce - Spring " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone == 2 || zone == 4)
                                                    pattern = @"17\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Lettuce- late", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 8: // melons- spring
                                            {
                                                outPut = new List<string>();
                                                result = "Melons-spring  ";
                                                if (zone == 0)
                                                {
                                                    pattern = @"Melons-spring " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone == 1)
                                                {
                                                    pattern = @"Melons - spring \(Feb 25 - Jun 19\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone == 3)
                                                {
                                                    pattern = @"Melons - spring " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone == 4)
                                                    pattern = @"Melons - spring \(Feb 1 - May 31\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Melons- spring", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 9: // melons- fall
                                            {
                                                outPut = new List<string>();
                                                result = "Melons-fall  ";
                                                if (zone == 0)
                                                    pattern = @"Melons-fall \(Aug 20 \- Dec 17\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else if (zone == 1)
                                                    pattern = @"Melons - fall \(Aug 20 - Dec 17\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else if (zone == 3)
                                                {
                                                    pattern = @"Melons -Fall " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone == 4)
                                                    pattern = @"Melons -Fall \(Sep 1 - Dec 29\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Melons- fall", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                if (zone == 3)
                                                {
                                                    result = "Cane/Bamboo  ";
                                                    pattern = @"Cane/Bamboo\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                    matches = Regex.Matches(pdf, pattern);
                                                    if (matches.Count < 1)
                                                    {
                                                        result = result + " File Not Readable";

                                                    }
                                                    else
                                                    {
                                                        result = result + matches[0].Value.Replace("Melons- fall", "").Trim();
                                                    }
                                                    outPut.Add(result);
                                                    foreach (String s in outPut)
                                                    {
                                                        tw.WriteLine(s);
                                                    }
                                                }
                                                break;
                                            }
                                        case 10:// bermuda
                                            {
                                                outPut = new List<string>();
                                                result = "Bermuda  ";
                                                pattern = @"Bermuda Grass " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Bermuda", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 11: // bermuda w/ rye
                                            {
                                                outPut = new List<string>();
                                                result = "Bermuda w/ rye  ";
                                                if (zone == 0)
                                                {
                                                    pattern = @"Bermuda w/ rye " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone == 1)
                                                {
                                                    pattern = @"winter\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone  == 2 )
                                                    pattern = @"grass\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else if ( zone  == 3 )
                                                    pattern = @"grass " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"winter " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Bermuda w/ rye", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 12: // citrus-young
                                            {
                                                outPut = new List<string>();
                                                result = "Citrus-young  ";
                                                
                                                    pattern = @"2 meters tall\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Citrus- young", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 13: // citrus- mature
                                            {
                                                outPut = new List<string>();
                                                result = "Citrus-mature  ";

                                                pattern = @"3\+ meters tall\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Citrus- mature", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 14: // citrus-declining
                                            {
                                                outPut = new List<string>();
                                                result = "Citrus-declining  ";
                                                if (zone == 0)
                                                    pattern = @"Citrus- declining " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else if (zone == 1)
                                                    pattern = @"Citrus-declining " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else if (zone == 2 || zone == 3 || zone == 4)
                                                    pattern = @"Citrus - declining " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"Citrus - declining\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Citrus- declining", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 15: // tomatoes
                                            {
                                                outPut = new List<string>();
                                                result = "Tomatoes  ";
                                                pattern = @"Tomatoes " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if(zone  == 4)
                                                    pattern = @"Tomatoes\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Tomatoes", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 16: // sudan
                                            {
                                                outPut = new List<string>();
                                                result = "Sudan  ";
                                                if (zone == 1)
                                                    pattern = @"Sudan Grass\n24 " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                   + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                   + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"Sudan " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sudan", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 17: // legume / solanum veg
                                            {
                                                outPut = new List<string>();
                                                result = "Legume/SolanumVeg  ";
                                                pattern = @"potatoes\]\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("potatoes])", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 18: // crucifers
                                            {
                                                outPut = new List<string>();
                                                result = "Crucifers  ";
                                                pattern = @"okra\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("oakra)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 19: // dates
                                            {
                                                outPut = new List<string>();
                                                result = "Dates  ";
                                                if (zone == 0)
                                                    pattern = @"Dates " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else if (zone == 1)
                                                    pattern = @"Dates " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"Dates " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                               + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                               + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Dates", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 20: // safflower
                                            {
                                                outPut = new List<string>();
                                                result = "Safflower  ";
                                                pattern = @"Safflower " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Safflower", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 21: // orchards
                                            {
                                                outPut = new List<string>();
                                                result = "Orchards  ";
                                                if (zone == 0)
                                                    pattern = @"Orchards " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else if (zone == 1)
                                                    pattern = @"peaches\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"peaches\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Orchards", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 22: // small vegetables
                                            {
                                                outPut = new List<string>();
                                                result = "SmallVegetables  ";
                                                pattern = @"radishes\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("radishes)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 23: // root vegetables
                                            {
                                                outPut = new List<string>();
                                                result = "RootVegetables  ";
                                                pattern = @"rutabagas\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("rutabagas)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 24: // perennial vegetables
                                            {
                                                outPut = new List<string>();
                                                result = "PerennialVegetables  ";
                                                pattern = @"asparagus\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("asparagus)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 25: //sugar beets
                                            {
                                                outPut = new List<string>();
                                                result = "SugarBeets  ";
                                                pattern = @"Sugar Beets " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                
                                                if (zone == 3)
                                                {
                                                    result = "SugarBeets (Winter)  ";
                                                    pattern = @"Sugar Beets \(Winter\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                    MatchCollection matches1 = Regex.Matches(pdf, pattern);
                                                    if (matches1.Count < 1)
                                                    {
                                                        result = result + " File Not Readable";

                                                    }
                                                    else
                                                    {
                                                        result = result + matches1[0].Value.Replace("Sugar Beets (Winter)", "").Trim();
                                                    }
                                                    outPut.Add(result);
                                                    foreach (String s in outPut)
                                                    {
                                                        tw.WriteLine(s);
                                                    }
                                                    outPut = new List<string>();
                                                    result = "SugarBeets (Summer)  ";
                                                    pattern = @"Sugar Beets \(Summer\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                    MatchCollection matches2 = Regex.Matches(pdf, pattern);
                                                    if (matches2.Count < 1)
                                                    {
                                                        result = result + " File Not Readable";

                                                    }
                                                    else
                                                    {
                                                        result = result + matches2[0].Value.Replace("Sugar Beets (Summer)", "").Trim();
                                                    }
                                                    outPut.Add(result);
                                                    foreach (String s in outPut)
                                                    {
                                                        tw.WriteLine(s);
                                                    }
                                                    break;
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sugar Beets", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 26: // grapes
                                            {
                                                outPut = new List<string>();
                                                result = "Grapes  ";
                                                pattern = @"Grapes " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Grapes", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 27:
                                            {
                                                outPut = new List<string>();
                                                result = "Herbs-misc  ";
                                                if (zone == 0)
                                                    pattern = @"Herbs-miscellaneous " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"Herbs-misc " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Herbs-miscellaneous", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.WriteLine();
                                                break;
                                            }
                                        case 28:
                                            {
                                                outPut = new List<string>();
                                                result = "MoistSoilUnit  ";
                                                pattern = @"Moist Soil Unit " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Herbs-misc", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                // tw.WriteLine();
                                                break;
                                            }
                                        case 29:
                                            {
                                                outPut = new List<string>();
                                                result = "SeasonalWetland  ";
                                                pattern = @"Wetland " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Wetland", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                tw.WriteLine();
                                                break;
                                            }

                                    }
                                    crop += 1;
                                }
                                zone += 1;
                            }
                            tw.Close();

                            //System.Diagnostics.Process.Start(outFile);
                            break;
                        }
                    case 12://07
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\2007LCRAS.pdf";
                            Console.WriteLine("Processing pdf 07 for Crop/Phreatophyte");
                            var header = new List<string>(new string[] { "Year 07 Crop/Phreatophyte values" });
                            string outFile = "U:\\Cropdata_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            //TextWriter tw = new StreamWriter(outFile);
                            foreach (String s in header)
                            {
                                tw.Write(s);
                            }
                            tw.WriteLine();
                            int zone = 0;
                            int page = 0;
                            int crop = 0;
                            //tw.Close();
                            while (zone < 5)
                            {
                                //string result = "";

                                switch (zone)
                                {

                                    case 0:
                                        {// Mohave area
                                            page = 111;
                                            tw.WriteLine("Mohave Area");
                                            break;

                                        }
                                    case 1:
                                        {// Parker area
                                            page = 203;
                                            tw.WriteLine("Parker/Palo Verde Area");
                                            break;
                                        }
                                    case 2:
                                        {// Yuma area
                                            page = 484;

                                            tw.WriteLine("Yuma Area");
                                            break;
                                        }
                                    case 3:
                                        { //IID and Coachella have extra crops these are Cane/Bamboo, Sugar Beets(Winter), Sugar Beets(Summer)
                                            page = 387;
                                            tw.WriteLine("Imperial/Coachella Valley Area");
                                            break;
                                        }
                                    case 4:
                                        {
                                            page = 295;
                                            tw.WriteLine("Wellton-Mohawk Area");
                                            break;
                                        }

                                }
                                crop = 0;
                                var pdf = pdfText(fName, page);
                                string pattern = "";
                                string result = "";
                                while (crop <= 29)
                                {
                                    //tw = new StreamWriter(outFile,true);
                                    switch (crop)
                                    {
                                        case 0: // Alfalfa-perennial 
                                            {
                                                outPut = new List<string>();
                                                result = "Alfalfa-perennial  ";
                                                pattern = @"Alfalfa-perennial " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa- perennial", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 1:// Alfalfa- annual
                                            {

                                                outPut = new List<string>();
                                                result = "Alfalfa-annual  ";
                                                pattern = @"Alfalfa-annual " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa- annual", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 2:// Alfalfa- Seed
                                            {
                                                outPut = new List<string>();
                                                result = "Alfalfa-seed  ";
                                                pattern = @"Alfalfa-seed " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa- seed", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 3: // Cotton
                                            {
                                                outPut = new List<string>();
                                                result = "Cotton  ";
                                                pattern = @"Cotton " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Cotton", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 4: // small grain
                                            {
                                                outPut = new List<string>();
                                                result = "Small Grain  ";
                                                pattern = @"wheat\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                    pattern = @"wheat\)\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("wheat)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 5: // field grain
                                            {
                                                outPut = new List<string>();
                                                result = "Field Grain  ";
                                                pattern = @"milo\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("and milo)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 6: // lettuce-Fall
                                            {
                                                outPut = new List<string>();
                                                result = "Lettuce-Fall  ";
                                                if (zone == 0 || zone == 3)
                                                {
                                                    pattern = @"Lettuce-Fall " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone == 1)
                                                    pattern = @"14 " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"Lettuce-Fall \(Sept 15 \- Nov 28\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Lettuc-Fall", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 7: // lettuce-Spring
                                            {
                                                outPut = new List<string>();
                                                result = "Lettuce-Spring  ";
                                                if (zone == 0 || zone == 3)
                                                {
                                                    pattern = @"Lettuce-Spring " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone == 1)
                                                {
                                                    pattern = @"Lettuce - Spring " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone == 2 || zone == 4)
                                                    pattern = @"17\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Lettuce- late", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 8: // melons- spring
                                            {
                                                outPut = new List<string>();
                                                result = "Melons-spring  ";
                                                if (zone == 0)
                                                {
                                                    pattern = @"Melons-spring " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone == 1)
                                                {
                                                    pattern = @"Melons - spring \(Feb 25 - Jun 19\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone == 3)
                                                {
                                                    pattern = @"Melons - spring " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone == 4)
                                                    pattern = @"Melons - spring \(Feb 1 - May 31\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Melons- spring", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 9: // melons- fall
                                            {
                                                outPut = new List<string>();
                                                result = "Melons-fall  ";
                                                if (zone == 0)
                                                    pattern = @"Melons-fall \(Aug 20 \- Dec 17\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else if (zone == 1)
                                                    pattern = @"Melons - fall \(Aug 20 - Dec 17\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else if (zone == 3)
                                                {
                                                    pattern = @"Melons -Fall " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone == 4)
                                                    pattern = @"Melons -Fall \(Sep 1 - Dec 29\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Melons- fall", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                if (zone == 3)
                                                {
                                                    result = "Cane/Bamboo  ";
                                                    pattern = @"Cane/Bamboo\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                    matches = Regex.Matches(pdf, pattern);
                                                    if (matches.Count < 1)
                                                    {
                                                        result = result + " File Not Readable";

                                                    }
                                                    else
                                                    {
                                                        result = result + matches[0].Value.Replace("Melons- fall", "").Trim();
                                                    }
                                                    outPut.Add(result);
                                                    foreach (String s in outPut)
                                                    {
                                                        tw.WriteLine(s);
                                                    }
                                                }
                                                break;
                                            }
                                        case 10:// bermuda
                                            {
                                                outPut = new List<string>();
                                                result = "Bermuda  ";
                                                pattern = @"Bermuda Grass " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Bermuda", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 11: // bermuda w/ rye
                                            {
                                                outPut = new List<string>();
                                                result = "Bermuda w/ rye  ";
                                                if (zone == 0)
                                                {
                                                    pattern = @"Bermuda w/ rye " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone == 1)
                                                {
                                                    pattern = @"winter\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone == 2)
                                                    pattern = @"grass\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else if (zone == 3)
                                                    pattern = @"grass " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"winter " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Bermuda w/ rye", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 12: // citrus-young
                                            {
                                                outPut = new List<string>();
                                                result = "Citrus-young  ";

                                                pattern = @"2 meters tall\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                            + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                            + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Citrus- young", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 13: // citrus- mature
                                            {
                                                outPut = new List<string>();
                                                result = "Citrus-mature  ";

                                                pattern = @"3\+ meters tall\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Citrus- mature", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 14: // citrus-declining
                                            {
                                                outPut = new List<string>();
                                                result = "Citrus-declining  ";
                                                if (zone == 0)
                                                    pattern = @"Citrus- declining " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else if (zone == 1)
                                                    pattern = @"Citrus-declining " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else if (zone == 2 || zone == 3 || zone == 4)
                                                    pattern = @"Citrus - declining " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"Citrus - declining\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Citrus- declining", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 15: // tomatoes
                                            {
                                                outPut = new List<string>();
                                                result = "Tomatoes  ";
                                                pattern = @"Tomatoes " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                    pattern = @"Tomatoes\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Tomatoes", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 16: // sudan
                                            {
                                                outPut = new List<string>();
                                                result = "Sudan  ";
                                                if (zone == 1)
                                                    pattern = @"Sudan Grass\n24 " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                   + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                   + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"Sudan " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sudan", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 17: // legume / solanum veg
                                            {
                                                outPut = new List<string>();
                                                result = "Legume/SolanumVeg  ";
                                                pattern = @"potatoes\]\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";


                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("potatoes])", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 18: // crucifers
                                            {
                                                outPut = new List<string>();
                                                result = "Crucifers  ";
                                                pattern = @"okra\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("oakra)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 19: // dates
                                            {
                                                outPut = new List<string>();
                                                result = "Dates  ";
                                                if (zone == 0)
                                                    pattern = @"Dates " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else if (zone == 1)
                                                    pattern = @"Dates " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"Dates " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                               + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                               + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Dates", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 20: // safflower
                                            {
                                                outPut = new List<string>();
                                                result = "Safflower  ";
                                                pattern = @"Safflower " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Safflower", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 21: // orchards
                                            {
                                                outPut = new List<string>();
                                                result = "Orchards  ";
                                                if (zone == 0)
                                                    pattern = @"Orchards " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else if (zone == 1)
                                                    pattern = @"peaches\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"peaches\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Orchards", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 22: // small vegetables
                                            {
                                                outPut = new List<string>();
                                                result = "SmallVegetables  ";
                                                pattern = @"radishes\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("radishes)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 23: // root vegetables
                                            {
                                                outPut = new List<string>();
                                                result = "RootVegetables  ";
                                                pattern = @"rutabagas\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("rutabagas)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 24: // perennial vegetables
                                            {
                                                outPut = new List<string>();
                                                result = "PerennialVegetables  ";
                                                pattern = @"asparagus\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("asparagus)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 25: //sugar beets
                                            {
                                                outPut = new List<string>();
                                                result = "SugarBeets  ";
                                                pattern = @"Sugar Beets " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                if (zone == 3)
                                                {
                                                    result = "SugarBeets (Winter)  ";
                                                    pattern = @"Sugar Beets \(Winter\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                    MatchCollection matches1 = Regex.Matches(pdf, pattern);
                                                    if (matches1.Count < 1)
                                                    {
                                                        result = result + " File Not Readable";

                                                    }
                                                    else
                                                    {
                                                        result = result + matches1[0].Value.Replace("Sugar Beets (Winter)", "").Trim();
                                                    }
                                                    outPut.Add(result);
                                                    foreach (String s in outPut)
                                                    {
                                                        tw.WriteLine(s);
                                                    }
                                                    outPut = new List<string>();
                                                    result = "SugarBeets (Summer)  ";
                                                    pattern = @"Sugar Beets \(Summer\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                    MatchCollection matches2 = Regex.Matches(pdf, pattern);
                                                    if (matches2.Count < 1)
                                                    {
                                                        result = result + " File Not Readable";

                                                    }
                                                    else
                                                    {
                                                        result = result + matches2[0].Value.Replace("Sugar Beets (Summer)", "").Trim();
                                                    }
                                                    outPut.Add(result);
                                                    foreach (String s in outPut)
                                                    {
                                                        tw.WriteLine(s);
                                                    }
                                                    break;
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sugar Beets", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 26: // grapes
                                            {
                                                outPut = new List<string>();
                                                result = "Grapes  ";
                                                pattern = @"Grapes " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Grapes", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 27:
                                            {
                                                outPut = new List<string>();
                                                result = "Herbs-misc  ";
                                                if (zone == 0)
                                                    pattern = @"Herbs-miscellaneous " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"Herbs-misc " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Herbs-miscellaneous", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.WriteLine();
                                                break;
                                            }
                                        case 28:
                                            {
                                                outPut = new List<string>();
                                                result = "MoistSoilUnit  ";
                                                pattern = @"Moist Soil Unit " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Herbs-misc", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                // tw.WriteLine();
                                                break;
                                            }
                                        case 29:
                                            {
                                                outPut = new List<string>();
                                                result = "SeasonalWetland  ";
                                                pattern = @"Wetland " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Wetland", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                tw.WriteLine();
                                                break;
                                            }

                                    }
                                    crop += 1;
                                }
                                zone += 1;
                            }
                            tw.Close();

                            //System.Diagnostics.Process.Start(outFile);
                            break;
                        }
                    case 13://08
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\2008LCRAS.pdf";
                            Console.WriteLine("Processing pdf 08 for Crop/Phreatophyte");
                            var header = new List<string>(new string[] { "Year 08 Crop/Phreatophyte values" });
                            string outFile = "U:\\Cropdata_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            //TextWriter tw = new StreamWriter(outFile);
                            foreach (String s in header)
                            {
                                tw.Write(s);
                            }
                            tw.WriteLine();
                            int zone = 0;
                            int page = 0;
                            int crop = 0;
                            //tw.Close();
                            while (zone < 5)
                            {
                                //string result = "";

                                switch (zone)
                                {

                                    case 0:
                                        {// Mohave area
                                            page = 104;
                                            tw.WriteLine("Mohave Area");
                                            break;

                                        }
                                    case 1:
                                        {// Parker area
                                            page = 196;
                                            tw.WriteLine("Parker/Palo Verde Area");
                                            break;
                                        }
                                    case 2:
                                        {// Yuma area
                                            page = 477;

                                            tw.WriteLine("Yuma Area");
                                            break;
                                        }
                                    case 3:
                                        { //IID and Coachella have extra crops these are Cane/Bamboo, Sugar Beets(Winter), Sugar Beets(Summer)
                                            page = 380;
                                            tw.WriteLine("Imperial/Coachella Valley Area");
                                            break;
                                        }
                                    case 4:
                                        {
                                            page = 288;
                                            tw.WriteLine("Wellton-Mohawk Area");
                                            break;
                                        }

                                }
                                crop = 0;
                                var pdf = pdfText(fName, page);
                                string pattern = "";
                                string result = "";
                                while (crop <= 29)
                                {
                                    //tw = new StreamWriter(outFile,true);
                                    switch (crop)
                                    {
                                        case 0: // Alfalfa-perennial 
                                            {
                                                outPut = new List<string>();
                                                result = "Alfalfa-perennial  ";
                                                pattern = @"Alfalfa-perennial " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if(zone == 1)
                                                    pattern = @"Alfalfa-perennial\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa- perennial", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 1:// Alfalfa- annual
                                            {

                                                outPut = new List<string>();
                                                result = "Alfalfa-annual  ";
                                                pattern = @"Alfalfa-annual " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa- annual", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        case 2:// Alfalfa- Seed
                                            {
                                                outPut = new List<string>();
                                                result = "Alfalfa-seed  ";
                                                pattern = @"Alfalfa-seed " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if(zone == 4)
                                                    pattern = @"Alfalfa-seed\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa- seed", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 3: // Cotton
                                            {
                                                outPut = new List<string>();
                                                result = "Cotton  ";
                                                pattern = @"Cotton " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if(zone == 2)
                                                {
                                                    pattern = @"Cotton\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Cotton", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 4: // small grain
                                            {
                                                outPut = new List<string>();
                                                result = "Small Grain  ";
                                                
                                                if ( zone  == 1 || zone  == 2)
                                                    pattern = @"wheat\)\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else if (zone == 0)
                                                {
                                                    pattern = @"wheat\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if(zone == 3)
                                                    pattern = @"wheat\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"wheat\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                               + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                               + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("wheat)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 5: // field grain
                                            {
                                                outPut = new List<string>();
                                                result = "Field Grain  ";
                                                pattern = @"milo\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 0 || zone == 2)
                                                {
                                                    pattern = @"milo\)\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("and milo)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 6: // lettuce-Fall
                                            {
                                                outPut = new List<string>();
                                                result = "Lettuce-Fall  ";
                                                if (zone == 0 || zone == 3)
                                                {
                                                    pattern = @"Lettuce-Fall " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone == 1)
                                                    pattern = @"Lettuce - Fall " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"\(Sept 15 \- Nov 28\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Lettuc-Fall", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 7: // lettuce-Spring
                                            {
                                                outPut = new List<string>();
                                                result = "Lettuce-Spring  ";
                                                if (zone == 0|| zone ==3  )
                                                {
                                                    pattern = @"Lettuce-Spring " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                
                                                else if (zone == 1)
                                                {
                                                    pattern = @"Lettuce - Spring\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone == 2 || zone == 4)
                                                    pattern = @"\(Dec 5 - Feb 17\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Lettuce- late", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 8: // melons- spring
                                            {
                                                outPut = new List<string>();
                                                result = "Melons-spring  ";
                                                if (zone == 0)
                                                {
                                                    pattern = @"Melons-spring " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone == 1)
                                                {
                                                    pattern = @"Melons - spring \(Feb 25 - Jun 19\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone == 3)
                                                {
                                                    pattern = @"Melons - spring " + @"\D\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone == 4 || zone  == 2)
                                                    pattern = @"\(Feb 1 - May 31\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Melons- spring", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 9: // melons- fall
                                            {
                                                outPut = new List<string>();
                                                result = "Melons-fall  ";
                                                if (zone == 0)
                                                    pattern = @"Melons-fall \(Aug 20 \- Dec 17\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else if (zone == 1)
                                                    pattern = @"Melons - fall \(Aug 20 - Dec 17\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else if (zone == 3)
                                                {
                                                    pattern = @"Melons -Fall\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if ( zone ==2 ) 
                                                    pattern = @"\(Sep 1 - Dec 29\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"\(Sep 1 - Dec 29\)\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Melons- fall", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                if (zone == 3)
                                                {
                                                    result = "Cane/Bamboo  ";
                                                    pattern = @"Cane/Bamboo " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                    matches = Regex.Matches(pdf, pattern);
                                                    if (matches.Count < 1)
                                                    {
                                                        result = result + " File Not Readable";

                                                    }
                                                    else
                                                    {
                                                        result = result + matches[0].Value.Replace("Melons- fall", "").Trim();
                                                    }
                                                    outPut.Add(result);
                                                    foreach (String s in outPut)
                                                    {
                                                        tw.WriteLine(s);
                                                    }
                                                }
                                                break;
                                            }
                                        case 10:// bermuda
                                            {
                                                outPut = new List<string>();
                                                result = "Bermuda  ";
                                                pattern = @"Bermuda Grass " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if(zone == 2)
                                                    pattern = @"Bermuda Grass\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Bermuda", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 11: // bermuda w/ rye
                                            {
                                                outPut = new List<string>();
                                                result = "Bermuda w/ rye  ";
                                                if (zone == 0)
                                                {
                                                    pattern = @"Bermuda w/ rye " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone == 1)
                                                {
                                                    pattern = @"winter\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                else if (zone == 2)
                                                    pattern = @"grass\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else if (zone == 3)
                                                    pattern = @"grass " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"winter " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Bermuda w/ rye", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 12: // citrus-young
                                            {
                                                outPut = new List<string>();
                                                result = "Citrus-young  ";

                                                pattern = @"2 meters tall\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                            + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                            + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 1 || zone == 4)
                                                {
                                                    pattern = @"2 meters tall\)\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Citrus- young", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 13: // citrus- mature
                                            {
                                                outPut = new List<string>();
                                                result = "Citrus-mature  ";

                                                pattern = @"3\+ meters tall\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Citrus- mature", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 14: // citrus-declining
                                            {
                                                outPut = new List<string>();
                                                result = "Citrus-declining  ";
                                                if (zone == 0)
                                                    pattern = @"Citrus- declining " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else if (zone == 1)
                                                    pattern = @"Citrus-declining " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else if (zone == 3 || zone == 4)
                                                    pattern = @"Citrus - declining " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"Citrus - declining\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Citrus- declining", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 15: // tomatoes
                                            {
                                                outPut = new List<string>();
                                                result = "Tomatoes  ";
                                                pattern = @"Tomatoes " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4|| zone == 3)
                                                    pattern = @"Tomatoes\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Tomatoes", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 16: // sudan
                                            {
                                                outPut = new List<string>();
                                                result = "Sudan  ";
                                                if (zone == 1)
                                                    pattern = @"Sudan Grass\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                   + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                   + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"Sudan " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sudan", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 17: // legume / solanum veg
                                            {
                                                outPut = new List<string>();
                                                result = "Legume/SolanumVeg  ";
                                                pattern = @"potatoes\]\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 2 ||zone == 4)
                                                    pattern = @"potatoes\]\)\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                               + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                               + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("potatoes])", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 18: // crucifers
                                            {
                                                outPut = new List<string>();
                                                result = "Crucifers  ";
                                                pattern = @"okra\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("oakra)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 19: // dates
                                            {
                                                outPut = new List<string>();
                                                result = "Dates  ";
                                                if (zone == 0||zone == 4)
                                                    pattern = @"Dates " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else if (zone == 1)
                                                    pattern = @"Dates " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"Dates\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                               + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                               + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Dates", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 20: // safflower
                                            {
                                                outPut = new List<string>();
                                                result = "Safflower  ";
                                                pattern = @"Safflower " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if(zone == 1)
                                                    pattern = @"Safflower\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                   + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                   + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Safflower", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 21: // orchards
                                            {
                                                outPut = new List<string>();
                                                result = "Orchards  ";
                                                if (zone == 0)
                                                    pattern = @"Orchards " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else if (zone == 1)
                                                    pattern = @"peaches\)\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"peaches\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Orchards", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 22: // small vegetables
                                            {
                                                outPut = new List<string>();
                                                result = "SmallVegetables  ";
                                                pattern = @"radishes\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 1 || zone == 2)
                                                    pattern = @"radishes\)\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("radishes)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 23: // root vegetables
                                            {
                                                outPut = new List<string>();
                                                result = "RootVegetables  ";
                                                pattern = @"rutabagas\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 2)
                                                    pattern = @"rutabagas\)\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("rutabagas)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 24: // perennial vegetables
                                            {
                                                outPut = new List<string>();
                                                result = "PerennialVegetables  ";
                                                pattern = @"asparagus\) " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 0||zone == 2)
                                                    pattern = @"asparagus\)\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("asparagus)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 25: //sugar beets
                                            {
                                                outPut = new List<string>();
                                                result = "SugarBeets  ";
                                                
                                                if(zone == 2)
                                                    pattern = @"Sugar Beets\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else if (zone == 3)
                                                {
                                                    result = "SugarBeets (Fall)  "; //broken when trying to convert into text "Sug Suga ar r  Beet Beets s  ( (Fa Fall) ll)"
                                                    pattern = @"Sugar Beets \(Fall\)\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                    MatchCollection matches1 = Regex.Matches(pdf, pattern);
                                                    if (matches1.Count < 1)
                                                    {
                                                        result = result + " File Not Readable";

                                                    }
                                                    else
                                                    {
                                                        result = result + matches1[0].Value.Replace("Sugar Beets (Fall)", "").Trim();
                                                    }
                                                    outPut.Add(result);
                                                    foreach (String s in outPut)
                                                    {
                                                        tw.WriteLine(s);
                                                    }
                                                    outPut = new List<string>();
                                                    result = "SugarBeets  ";
                                                    pattern = @"Sugar Beets " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                    MatchCollection matches2 = Regex.Matches(pdf, pattern);
                                                    if (matches2.Count < 1)
                                                    {
                                                        result = result + " File Not Readable";

                                                    }
                                                    else
                                                    {
                                                        result = result + matches2[0].Value.Replace("Sugar Beets ", "").Trim();
                                                    }
                                                    outPut.Add(result);
                                                    foreach (String s in outPut)
                                                    {
                                                        tw.WriteLine(s);
                                                    }
                                                    break;
                                                }
                                                else
                                                    pattern = @"Sugar Beets " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sugar Beets", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 26: // grapes
                                            {
                                                outPut = new List<string>();
                                                result = "Grapes  ";
                                                pattern = @"Grapes " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Grapes", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        case 27:
                                            {
                                                outPut = new List<string>();
                                                result = "Herbs-misc  ";
                                                if (zone == 0)
                                                    pattern = @"Herbs-miscellaneous " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else if (zone == 1||zone == 3)
                                                    pattern = @"Herbs-misc\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                else
                                                    pattern = @"Herbs-misc " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                    + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Herbs-miscellaneous", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.WriteLine();
                                                break;
                                            }
                                        case 28:
                                            {
                                                outPut = new List<string>();
                                                result = "MoistSoilUnit  ";
                                                pattern = @"Moist Soil Unit " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                if (zone == 4)
                                                {
                                                    pattern = @"Moist Soil Unit\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Herbs-misc", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                // tw.WriteLine();
                                                break;
                                            }
                                        case 29:
                                            {
                                                outPut = new List<string>();
                                                result = "SeasonalWetland  ";
                                                pattern = @"Wetland " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Wetland", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                tw.WriteLine();
                                                break;
                                            }

                                    }
                                    crop += 1;
                                }
                                zone += 1;
                            }
                            tw.Close();

                            //System.Diagnostics.Process.Start(outFile);
                            break;
                        }
                    case 14://09
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\report09.pdf";
                            Console.WriteLine("Processing pdf 09 for Crop/Phreatophyte");
                            var header = new List<string>(new string[] { "Year 09 Crop/Phreatophyte values" });
                            string outFile = "U:\\Cropdata_95to11.txt";
                            //TextWriter tw = new StreamWriter(outFile, true);
                            TextWriter tw = new StreamWriter(outFile,true);
                            foreach (String s in header)
                            {
                                tw.Write(s);
                            }
                            tw.WriteLine();
                            int zone = 0;
                            int page = 0;
                            int crop = 0;
                            //tw.Close();
                            while (zone < 5)
                            {
                                //string result = "";

                                switch (zone)
                                {

                                    case 0:
                                        {// Mohave area
                                            page = 97;
                                            tw.WriteLine("Mohave Area");
                                            break;

                                        }
                                    case 1:
                                        {// Parker area
                                            page = 98;
                                            tw.WriteLine("Parker/Palo Verde Area");
                                            break;
                                        }
                                    case 2:
                                        {// Wellton-Mohawk
                                            page = 99;

                                            tw.WriteLine("Wellton-Mohawk Area");
                                            break;
                                        }
                                    case 3:
                                        { //Yuma 
                                            page = 100;
                                            tw.WriteLine("Yuma Area");
                                            break;
                                        }
                                    case 4:
                                        { //IID Coachella
                                            page = 101;
                                            tw.WriteLine("IID and Coachella Area");
                                            break;
                                        }

                                }
                                crop = 0;
                                var pdf = pdfText(fName, page);
                                string pattern = "";
                                string result = "";
                                while (crop <= 27)
                                {
                                    //tw = new StreamWriter(outFile,true);
                                    switch (crop)
                                    {
                                        case 0: // Alfalfa 
                                            {
                                                outPut = new List<string>();
                                                result = "Alfalfa  ";
                                                if (zone == 0 || zone == 1)
                                                     pattern = @"Alfalfa " + @"\d+\D\d+\s" + @"\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                 + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                 + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                 else if (zone  == 4)
                                                     pattern = @"Alfalfa\n" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                 + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                 + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";
                                                 else
                                                    pattern = @"Alfalfa " + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                 + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s"
                                                 + @"\d+\D\d+\s" + @"\d+\D\d+\s" + @"\d+\D\d+\s";

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //Bermuda
                                        case 1:
                                            {
                                                outPut = new List<string>();
                                                
                                                result = "Bermuda  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Bermuda " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Bermuda", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //Bermuda Overseeded with Rye in Winter
                                        case 2:
                                            {
                                                outPut = new List<string>();

                                                result = "BermudaWinterRye  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Bermuda\n" + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Bermuda", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                if(zone == 4)
                                                {
                                                    outPut = new List<string>();

                                                    result = "Cane/Bamboo  ";
                                                    test = @"((\d+)+?(\.\d+)?)\s";
                                                    pattern = @"Cane/Bamboo " + test + test + test + test
                                                    + test + test + test + test + test + test
                                                    + test + test + test;

                                                    matches = Regex.Matches(pdf, pattern);
                                                    if (matches.Count < 1)
                                                    {
                                                        result = result + " File Not Readable";

                                                    }
                                                    else
                                                    {
                                                        result = result + matches[0].Value.Replace("Cane/Bamboo", "").Trim();
                                                    }
                                                    outPut.Add(result);
                                                    foreach (String s in outPut)
                                                    {
                                                        tw.WriteLine(s);
                                                    }
                                                    //tw.Close();
                                                    //System.Diagnostics.Process.Start(outFile);
                                                    
                                                }
                                                break;
                                            }
                                        //Citrus - Declining
                                        case 3:
                                            {
                                                outPut = new List<string>();

                                                result = "Citrus-Declining  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Declining " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Declining", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //Citrus - Mature
                                        case 4:
                                            {
                                                outPut = new List<string>();

                                                result = "Citrus-Mature  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Mature " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Mature", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //Citrus - Young
                                        case 5:
                                            {
                                                outPut = new List<string>();

                                                result = "Citrus-Young  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Young " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 4)
                                                    pattern = @"Young\n" + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Young", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //Cotton
                                        case 6:
                                            {
                                                outPut = new List<string>();

                                                result = "Cotton  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Cotton " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Cotton", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //Crucifers
                                        case 7:
                                            {
                                                outPut = new List<string>();

                                                result = "Crucifers  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Crucifers " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Crucifers", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //Dates
                                        case 8:
                                            {
                                                outPut = new List<string>();

                                                result = "Dates  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Dates " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if(zone == 4)
                                                    pattern = @"Dates\n" + test + test + test + test
                                               + test + test + test + test + test + test
                                               + test + test + test;
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Dates", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //Deciduous Orchards
                                        case 9:
                                            {
                                                outPut = new List<string>();

                                                result = "Deciduous Orchards  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Deciduous Orchards " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Deciduous Orchards", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //Field Grain
                                        case 10:
                                            {
                                                outPut = new List<string>();

                                                result = "Field Grain  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Field Grain " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Field Grain", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //Grapes
                                        case 11:
                                            {
                                                outPut = new List<string>();

                                                result = "Grapes  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Grapes " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Grapes", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //Legume/Solanum Vegetables
                                        case 12:
                                            {
                                                outPut = new List<string>();

                                                result = "Legume/Solanum  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                if(zone==4)
                                                pattern = @"Legume/Solanum " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                else
                                                    pattern = @"Legume/Solanum\n" + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Legume/Solanum", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //Lettuce (Fall)
                                        case 13:
                                            {
                                                outPut = new List<string>();

                                                result = "Lettuce (Fall) ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                
                                                    pattern = @"Lettuce \(Fall\) " + test + test + test + test
                                                    + test + test + test + test + test + test
                                                    + test + test + test;
                                                
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Lettuce (Fall)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //Lettuce (Spring)
                                        case 14:
                                            {
                                                outPut = new List<string>();

                                                result = "Lettuce (Spring)  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Lettuce \(Spring\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Lettuce (Spring)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //Melons (Fall)
                                        case 15:
                                            {
                                                outPut = new List<string>();

                                                result = "Melons (Fall)  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Melons \(Fall\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Melons (Fall)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //Melons (Spring)
                                        case 16:
                                            {
                                                outPut = new List<string>();

                                                result = "Melons (Spring)  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Melons \(Spring\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if(zone == 4)
                                                    pattern = @"Melons \(Spring\)\n" + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Melons (Spring)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //Miscellaneous herbs
                                        case 17:
                                            {
                                                outPut = new List<string>();

                                                result = "Miscellaneous herbs  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Miscellaneous herbs " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Miscellaneous herbs", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //Moist Soil Unit
                                        case 18:
                                            {
                                                outPut = new List<string>();

                                                result = "Moist Soil Unit  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Moist Soil Unit " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Moist Soil Unit", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //Oil Crop
                                        case 19:
                                            {
                                                outPut = new List<string>();

                                                result = "Oil Crop  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Oil Crop " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if(zone == 4)
                                                    pattern = @"Oil Crops\n" + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                else if (zone == 0)
                                                    pattern = @"Oil Crops " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Oil Crop", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                            //Perennial Vegetables
                                            case 20:
                                            {
                                                outPut = new List<string>();

                                                result = "Perennial Vegetables ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Perennial Vegetables " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Perennial Vegetables", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //Root Vegetables
                                        case 21:
                                            {
                                                outPut = new List<string>();

                                                result = "Root Vegetables ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Root Vegetables " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Root Vegetables", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //Small Grains
                                        case 22:
                                            {
                                                outPut = new List<string>();

                                                result = "Small Grains ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Small Grains " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if(zone == 4)
                                                    pattern = @"Small Grains\n" + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Small Grains", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //Small Vegetables
                                        case 23:
                                            {
                                                outPut = new List<string>();

                                                result = "Small Vegetables ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Small Vegetables " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Small Vegetables", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //Sudan
                                        case 24:
                                            {
                                                outPut = new List<string>();

                                                result = "Sudan ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sudan " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sudan ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //Sugar Beets
                                        case 25:
                                            {
                                                outPut = new List<string>();

                                                result = "Sugar Beets ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sugar Beets " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sugar Beets ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //Tomatoes
                                        case 26:
                                            {
                                                outPut = new List<string>();

                                                result = "Tomatoes ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Tomatoes " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Tomatoes ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                tw.WriteLine();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }

                                    }
                                    crop += 1;
                                }
                                zone += 1;
                            }
                            tw.Close();

                            //System.Diagnostics.Process.Start(outFile);
                            break;
                        }
                    case 15://10
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\report10.pdf";
                            Console.WriteLine("Processing pdf 10 for Crop/Phreatophyte");
                            var header = new List<string>(new string[] { "Year 10 Crop/Phreatophyte values" });
                            string outFile = "U:\\Cropdata_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            //TextWriter tw = new StreamWriter(outFile);
                            foreach (String s in header)
                            {
                                tw.Write(s);
                            }
                            tw.WriteLine();
                            int zone = 0;
                            int page = 0;
                            int crop = 0;
                            //tw.Close();
                            while (zone < 5)
                            {
                                //string result = "";

                                switch (zone)
                                {

                                    case 0:
                                        {// Mohave area
                                            page = 95;
                                            tw.WriteLine("Mohave Area");
                                            break;

                                        }
                                    case 1:
                                        {// Parker area
                                            page = 96;
                                            tw.WriteLine("Parker/Palo Verde Area");
                                            break;
                                        }
                                    case 2:
                                        {// Wellton-Mohawk
                                            page = 97;

                                            tw.WriteLine("Wellton-Mohawk Area");
                                            break;
                                        }
                                    case 3:
                                        { //Yuma 
                                            page = 98;
                                            tw.WriteLine("Yuma Area");
                                            break;
                                        }
                                    case 4:
                                        { //IID Coachella
                                            page = 99;
                                            tw.WriteLine("IID and Coachella Area");
                                            break;
                                        }

                                }
                                crop = 0;
                                var pdf = pdfText(fName, page);
                                string pattern = "";
                                string result = "";
                                while (crop <= 41)
                                {
                                    //tw = new StreamWriter(outFile,true);
                                    switch (crop)
                                    {
                                        case 0: //0 Alfalfa 
                                            {
                                                outPut = new List<string>();
                                                result = "Alfalfa  ";
                                                
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Alfalfa " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //1 Bermuda
                                        case 1:
                                            {
                                                outPut = new List<string>();

                                                result = "Bermuda/Grass  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Grass " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 0)
                                                    pattern = @"Grasss " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Grass", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //2 Bermuda Overseeded with Rye in Winter
                                        case 2:
                                            {
                                                outPut = new List<string>();

                                                result = "BermudaWinterRye  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Winter " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Winter", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                if (zone == 4)
                                                {
                                                    outPut = new List<string>();

                                                    result = "Cane/Bamboo  ";
                                                    test = @"((\d+)+?(\.\d+)?)\s";
                                                    pattern = @"Cane/Bamboo " + test + test + test + test
                                                    + test + test + test + test + test + test
                                                    + test + test + test;

                                                    matches = Regex.Matches(pdf, pattern);
                                                    if (matches.Count < 1)
                                                    {
                                                        result = result + " File Not Readable";

                                                    }
                                                    else
                                                    {
                                                        result = result + matches[0].Value.Replace("Cane/Bamboo", "").Trim();
                                                    }
                                                    outPut.Add(result);
                                                    foreach (String s in outPut)
                                                    {
                                                        tw.WriteLine(s);
                                                    }
                                                    //tw.Close();
                                                    //System.Diagnostics.Process.Start(outFile);

                                                }
                                                break;
                                            }
                                        //3 Citrus - Declining
                                        case 3:
                                            {
                                                outPut = new List<string>();

                                                result = "Citrus-Declining  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Declining " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Declining", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //4 Citrus - Mature
                                        case 4:
                                            {
                                                outPut = new List<string>();

                                                result = "Citrus-Mature  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Mature " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Mature", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //5 Citrus - Young
                                        case 5:
                                            {
                                                outPut = new List<string>();

                                                result = "Citrus-Young  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Young " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Young", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //6 Cotton
                                        case 6:
                                            {
                                                outPut = new List<string>();

                                                result = "Cotton  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Cotton " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Cotton", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //7 Crucifers (Fall, Early)
                                        case 7:
                                            {
                                                outPut = new List<string>();

                                                result = "Crucifers (Fall, Early)  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Crucifers \(Fall, Early\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Crucifers (Fall, Early)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //8 Crucifers (Fall, Late)
                                        case 8:
                                            {
                                                outPut = new List<string>();

                                                result = "Crucifers (Fall, Late)  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Crucifers \(Fall, Late\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Crucifers (Fall, Late)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //9 Crucifers (Spring, Early)
                                        case 9:
                                            {
                                                outPut = new List<string>();

                                                result = "Crucifers (Spring, Early)  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Crucifers \(Spring, Early\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Crucifers (Spring, Early)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //10 Crucifers (Spring, Late)
                                        case 10:
                                            {
                                                outPut = new List<string>();

                                                result = "Crucifers (Spring, Late)  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Crucifers \(Spring, Late\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Crucifers (Spring, Late)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                            //11 Dates
                                        case 11:
                                            {
                                                outPut = new List<string>();

                                                result = "Dates  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Dates " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Dates", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //12 Deciduous Orchards /Farm Ponds
                                        case 12:
                                            {
                                                outPut = new List<string>();

                                                result = "Deciduous Orchards  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Deciduous Orchards " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Deciduous Orchards", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                       
                                        //13 Fall Melons
                                        case 13:
                                            {
                                                if (zone == 4)
                                                    break;
                                                outPut = new List<string>();

                                                result = "Fall Melons  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Fall Melons " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Fall Melons", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //14 Farm Pond
                                        case 14:
                                            {
                                                if (zone == 0)
                                                    break;
                                                outPut = new List<string>();

                                                result = "Farm Pond  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Farm Pond " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Farm Pond", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                           
                                        //15 Field Grain
                                        case 15:
                                            {
                                                outPut = new List<string>();

                                                result = "Field Grain  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Field Grain " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Field Grain", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //16 Grapes
                                        case 16:
                                            {
                                                outPut = new List<string>();

                                                result = "Grapes  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Grapes " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Grapes", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //17 Jojoba Beans
                                        case 17:
                                            {
                                                if (zone == 0 || zone ==1 || zone == 3)
                                                    break;
                                                outPut = new List<string>();

                                                result = "Jojoba Beans  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Jojoba Beans " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Jojoba Beans", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //18 Legume/Solanum Vegetables
                                        case 18:
                                            {
                                                outPut = new List<string>();
                                                if (zone == 0 || zone  == 1)
                                                    break;
                                                result = "Legume/Solanum Vegetables  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                
                                                    pattern = @"Legume/Solanum Vegetables " + test + test + test + test
                                                    + test + test + test + test + test + test
                                                    + test + test + test;
                                               
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Legume/Solanum Vegetables", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //19 Legume/Solanum Vegetables (Fall)
                                        case 19:
                                            {
                                                outPut = new List<string>();

                                                result = "Legume/Solanum Vegetables (Fall)  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                
                                                    pattern = @"Legume/Solanum Vegetables \(Fall\) " + test + test + test + test
                                                    + test + test + test + test + test + test
                                                    + test + test + test;
                                                
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Legume/Solanum Vegetables (Fall)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //20 Legume/Solanum Vegetables (Spring)
                                        case 20:
                                            {
                                                outPut = new List<string>();

                                                result = "Legume/Solanum Vegetables (Spring)  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                
                                                    pattern = @"Legume/Solanum Vegetables \(Spring\) " + test + test + test + test
                                                    + test + test + test + test + test + test
                                                    + test + test + test;
                                              
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Legume/Solanum Vegetables (Spring)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        //21 Lettuce (Fall, Early)
                                        case 21:
                                            {
                                                outPut = new List<string>();

                                                result = "Lettuce (Fall, Early) ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Lettuce \(Fall, Early\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Lettuce (Fall, Early)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //22 Lettuce (Fall, Late)
                                        case 22:
                                            {
                                                    outPut = new List<string>();
                                                    if (zone == 0 || zone  == 1)
                                                        break;
                                                    result = "Lettuce (Fall, Late) ";
                                                    string test = @"((\d+)+?(\.\d+)?)\s";

                                                    pattern = @"Lettuce \(Fall, Late\) " + test + test + test + test
                                                    + test + test + test + test + test + test
                                                    + test + test + test;

                                                    MatchCollection matches = Regex.Matches(pdf, pattern);
                                                    if (matches.Count < 1)
                                                    {
                                                        result = result + " File Not Readable";

                                                    }
                                                    else
                                                    {
                                                        result = result + matches[0].Value.Replace("Lettuce (Fall, Late)", "").Trim();
                                                    }
                                                    outPut.Add(result);
                                                    foreach (String s in outPut)
                                                    {
                                                        tw.WriteLine(s);
                                                    }
                                                    //tw.Close();
                                                    //System.Diagnostics.Process.Start(outFile);
                                                    break;
                                            }
                                        //23 Lettuce (Spring, Early)
                                        case 23:
                                            {
                                                outPut = new List<string>();
                                                if (zone == 0 || zone == 1)
                                                    break;
                                                result = "Lettuce (Spring, Early)  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Lettuce \(Spring, Early\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Lettuce (Spring, Early)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                if (zone == 4)
                                                {
                                                    result = "Marsh Maintained  ";
                                                    test = @"((\d+)+?(\.\d+)?)\s";

                                                    pattern = @"Marsh Maintained " + test + test + test + test
                                                    + test + test + test + test + test + test
                                                    + test + test + test;

                                                     matches = Regex.Matches(pdf, pattern);
                                                    if (matches.Count < 1)
                                                    {
                                                        result = result + " File Not Readable";

                                                    }
                                                    else
                                                    {
                                                        result = result + matches[0].Value.Replace("Marsh Maintained", "").Trim();
                                                    }
                                                    outPut.Add(result);
                                                    foreach (String s in outPut)
                                                    {
                                                        tw.WriteLine(s);
                                                    }
                                                    result = "Melons (Fall)  ";
                                                    test = @"((\d+)+?(\.\d+)?)\s";

                                                    pattern = @"Melons \(Fall\) " + test + test + test + test
                                                    + test + test + test + test + test + test
                                                    + test + test + test;

                                                    matches = Regex.Matches(pdf, pattern);
                                                    if (matches.Count < 1)
                                                    {
                                                        result = result + " File Not Readable";

                                                    }
                                                    else
                                                    {
                                                        result = result + matches[0].Value.Replace("Melons (Fall)", "").Trim();
                                                    }
                                                    outPut.Add(result);
                                                    foreach (String s in outPut)
                                                    {
                                                        tw.WriteLine(s);
                                                    }
                                                    result = "Melons (Spring)  ";
                                                    test = @"((\d+)+?(\.\d+)?)\s";

                                                    pattern = @"Melons \(Spring\) " + test + test + test + test
                                                    + test + test + test + test + test + test
                                                    + test + test + test;

                                                    matches = Regex.Matches(pdf, pattern);
                                                    if (matches.Count < 1)
                                                    {
                                                        result = result + " File Not Readable";

                                                    }
                                                    else
                                                    {
                                                        result = result + matches[0].Value.Replace("Melons (Spring)", "").Trim();
                                                    }
                                                    outPut.Add(result);
                                                    foreach (String s in outPut)
                                                    {
                                                        tw.WriteLine(s);
                                                    }
                                                    break;

                                                }
                                                else
                                                    break;

                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                
                                            }
                                        //24 Lettuce (Spring, Late)
                                        case 24:
                                            {
                                                outPut = new List<string>();

                                                result = "Lettuce (Spring, Late)  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Lettuce \(Spring, Late\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Lettuce (Spring, Late)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                                
                                            }
                                        //25 Miscellaneous herbs
                                        case 25:
                                            {
                                                outPut = new List<string>();

                                                result = "Miscellaneous herbs  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Miscellaneous herbs " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Miscellaneous herbs", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //26 Moist Soil Unit
                                        case 26:
                                            {
                                                outPut = new List<string>();

                                                result = "Moist Soil Unit  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Moist Soil Unit " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Moist Soil Unit", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //27 Nursery or Green House
                                        case 27:
                                            {
                                                outPut = new List<string>();

                                                result = "Nursery or greenhouse  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Nursery or greenhouse " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Nursery or greenhouse", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //28 Oil Crop
                                        case 28:
                                            {
                                                outPut = new List<string>();

                                                result = "Oil Crop  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                              
                                                    pattern = @"Oil Crops " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Oil Crops", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //29 Perennial Vegetables
                                        case 29:
                                            {
                                                outPut = new List<string>();

                                                result = "Perennial Vegetables ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Perennial Vegetables " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Perennial Vegetables", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //30 Root Vegetables
                                        case 30:
                                            {
                                                outPut = new List<string>();

                                                result = "Root Vegetables ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Root Vegetables " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Root Vegetables", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //31 Small Grains (Fall)
                                        case 31:
                                            {
                                                outPut = new List<string>();

                                                result = "Small Grains (Fall)";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Small Grains \(Fall\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Small Grains (Fall)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //32 Small Grains (Spring)
                                        case 32:
                                            {
                                                outPut = new List<string>();

                                                result = "Small Grains (Spring)";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Small Grains \(Spring\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Small Grains (Spring)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //33 Small Vegetables (Fall)
                                        case 33:
                                            {
                                                outPut = new List<string>();

                                                result = "Small Vegetables (Fall) ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Small Vegetables \(Fall\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Small Vegetables (Fall)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //34 Small Vegetables (Spring)
                                        case 34:
                                            {
                                                outPut = new List<string>();

                                                result = "Small Vegetables (Spring) ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Small Vegetables \(Spring\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Small Vegetables (Spring)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //35 Small Vegetables (Spring, Late)
                                        case 35:
                                            {
                                                outPut = new List<string>();
                                                if (zone == 0||zone == 1)
                                                    break;
                                                result = "Small Vegetables (Spring, Late) ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Small Vegetables \(Spring, Late\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Small Vegetables (Spring, Late)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break; 
                                            }
                                        //36 Spring Melons
                                        case 36:
                                            {
                                                if (zone == 4)
                                                    break;
                                                outPut = new List<string>();

                                                result = "Spring Melons  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Spring Melons " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Spring Melons", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //37 Sudan
                                        case 37:
                                            {
                                                outPut = new List<string>();

                                                result = "Sudan ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sudan " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sudan ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //38 Sugar Beets (Summer)
                                        case 38:
                                            {
                                                outPut = new List<string>();

                                                result = "Sugar Beets (Summer) ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sugar Beets \(Summer\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sugar Beets (Summer)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //39 Sugar Beets (Fall)
                                        case 39:
                                            {
                                                outPut = new List<string>();

                                                result = "Sugar Beets (Fall) ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sugar Beets \(Fall\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sugar Beets (Fall)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                              
                                            }
                                        //40 Tomatoes
                                        case 40:
                                            {
                                                outPut = new List<string>();

                                                result = "Tomatoes ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Tomatoes " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Tomatoes ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //41 Wildlife Forage Maintained (only IID)
                                        case 41:
                                            {
                                                if (zone == 4)
                                                {
                                                    outPut = new List<string>();

                                                    result = "Wildlife Forage Maintained ";
                                                    string test = @"((\d+)+?(\.\d+)?)\s";

                                                    pattern = @"Wildlife Forage Maintained " + test + test + test + test
                                                    + test + test + test + test + test + test
                                                    + test + test + test;

                                                    MatchCollection matches = Regex.Matches(pdf, pattern);
                                                    if (matches.Count < 1)
                                                    {
                                                        result = result + " File Not Readable";

                                                    }
                                                    else
                                                    {
                                                        result = result + matches[0].Value.Replace("Wildlife Forage Maintained ", "").Trim();
                                                    }
                                                    outPut.Add(result);
                                                    foreach (String s in outPut)
                                                    {
                                                        tw.WriteLine(s);
                                                    }
                                                    //tw.Close();
                                                    tw.WriteLine();
                                                    //System.Diagnostics.Process.Start(outFile);
                                                    break;
                                                }
                                                else
                                                {
                                                    tw.WriteLine();
                                                    break;
                                                }
                                            }

                                    }
                                    crop += 1;
                                }
                                zone += 1;
                            }
                            tw.Close();

                            //System.Diagnostics.Process.Start(outFile);
                            break;
                        }
                    case 16://11
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\report11.pdf";
                            Console.WriteLine("Processing pdf 11 for Crop/Phreatophyte");
                            var header = new List<string>(new string[] { "Year 11 Crop/Phreatophyte values" });
                            string outFile = "U:\\Cropdata_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            //TextWriter tw = new StreamWriter(outFile);
                            foreach (String s in header)
                            {
                                tw.Write(s);
                            }
                            tw.WriteLine();
                            int zone = 0;
                            int page = 0;
                            int crop = 0;
                            //tw.Close();
                            while (zone < 5)
                            {
                                //string result = "";

                                switch (zone)
                                {

                                    case 0:
                                        {// Mohave area
                                            page = 107;
                                            tw.WriteLine("Mohave Area");
                                            break;

                                        }
                                    case 1:
                                        {// Parker area
                                            page = 109;
                                            tw.WriteLine("Parker/Palo Verde Area");
                                            break;
                                        }
                                    case 2:
                                        {// Wellton-Mohawk
                                            page = 111;

                                            tw.WriteLine("Wellton-Mohawk Area");
                                            break;
                                        }
                                    case 3:
                                        { //Yuma 
                                            page = 113;
                                            tw.WriteLine("Yuma Area");
                                            break;
                                        }
                                    case 4:
                                        { //IID Coachella
                                            page = 115;
                                            tw.WriteLine("IID and Coachella Area");
                                            break;
                                        }

                                }
                                crop = 0;
                                var pdf = pdfText(fName, page);
                                string pattern = "";
                                string result = "";
                                while (crop <= 45)
                                {
                                    //tw = new StreamWriter(outFile,true);
                                    switch (crop)
                                    {
                                        case 0: //0 Alfalfa 
                                            {
                                                outPut = new List<string>();
                                                result = "Alfalfa  ";

                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Alfalfa " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Alfalfa", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //1 Aloe
                                        case 1:
                                            {
                                                if (zone == 0 || zone == 1 || zone == 2 || zone == 3)
                                                    break;
                                                outPut = new List<string>();
                                                result = "Aloe  ";

                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Aloe " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Aloe", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //2 Bermuda
                                        case 2:
                                            {
                                                outPut = new List<string>();

                                                result = "Bermuda/Grass  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Grass " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 0)
                                                    pattern = @"Grasss " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Grass", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                           
                                        //3 Bermuda Overseeded with Rye in Winter
                                        case 3:
                                            {
                                                outPut = new List<string>();

                                                result = "BermudaWinterRye  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Winter " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Winter", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                if (zone == 4)
                                                {
                                                    outPut = new List<string>();

                                                    result = "Cane/Bamboo  ";
                                                    test = @"((\d+)+?(\.\d+)?)\s";
                                                    pattern = @"Cane/Bamboo " + test + test + test + test
                                                    + test + test + test + test + test + test
                                                    + test + test + test;

                                                    matches = Regex.Matches(pdf, pattern);
                                                    if (matches.Count < 1)
                                                    {
                                                        result = result + " File Not Readable";

                                                    }
                                                    else
                                                    {
                                                        result = result + matches[0].Value.Replace("Cane/Bamboo", "").Trim();
                                                    }
                                                    outPut.Add(result);
                                                    foreach (String s in outPut)
                                                    {
                                                        tw.WriteLine(s);
                                                    }
                                                    //tw.Close();
                                                    //System.Diagnostics.Process.Start(outFile);

                                                }
                                                break;
                                            }
                                        //4 Cane/Bamboo
                                        case 4:
                                            {
                                                if (zone == 0 || zone == 1 || zone == 2 || zone == 3)
                                                    break;
                                                outPut = new List<string>();
                                                result = "Cane/Bamboo  ";

                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Cane/Bamboo " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Cane/Bamboo", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //5 Citrus - Declining
                                        case 5:
                                            {
                                                outPut = new List<string>();

                                                result = "Citrus-Declining  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Declining " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Declining", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //6 Citrus - Mature
                                        case 6:
                                            {
                                                outPut = new List<string>();

                                                result = "Citrus-Mature  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Mature " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Mature", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //7 Citrus - Young
                                        case 7:
                                            {
                                                outPut = new List<string>();

                                                result = "Citrus-Young  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Young " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Young", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //8 Cotton
                                        case 8:
                                            {
                                                outPut = new List<string>();

                                                result = "Cotton  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Cotton " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Cotton", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //9 Crucifers (Fall, Early)
                                        case 9:
                                            {
                                                outPut = new List<string>();

                                                result = "Crucifers (Fall, Early)  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Crucifers \(Fall, Early\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Crucifers (Fall, Early)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //10 Crucifers (Fall, Late)
                                        case 10:
                                            {
                                                outPut = new List<string>();

                                                result = "Crucifers (Fall, Late)  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Crucifers \(Fall, Late\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Crucifers (Fall, Late)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //11 Crucifers (Spring, Early)
                                        case 11:
                                            {
                                                outPut = new List<string>();

                                                result = "Crucifers (Spring, Early)  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Crucifers \(Spring, Early\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Crucifers (Spring, Early)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //12 Crucifers (Spring, Late)
                                        case 12:
                                            {
                                                outPut = new List<string>();

                                                result = "Crucifers (Spring, Late)  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Crucifers \(Spring, Late\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Crucifers (Spring, Late)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //13 Dates
                                        case 13:
                                            {
                                                outPut = new List<string>();

                                                result = "Dates  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Dates " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Dates", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //14 Deciduous Orchards /Farm Ponds
                                        case 14:
                                            {
                                                outPut = new List<string>();

                                                result = "Deciduous Orchards  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Deciduous Orchards " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Deciduous Orchards", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }

                                        //15 Farm Pond
                                        case 15:
                                            {
                                                if (zone == 0)
                                                    break;
                                                outPut = new List<string>();

                                                result = "Farm Pond  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Farm Pond " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Farm Pond", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //16 Field Grain
                                        case 16:
                                            {
                                                outPut = new List<string>();

                                                result = "Field Grain  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Field Grain " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Field Grain", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }

                                        //17 Grapes
                                        case 17:
                                            {
                                                outPut = new List<string>();

                                                result = "Grapes  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Grapes " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Grapes", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //18 Jojoba Beans
                                        case 18:
                                            {
                                                if (zone == 0 || zone == 1 || zone == 3)
                                                    break;
                                                outPut = new List<string>();

                                                result = "Jojoba Beans  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                pattern = @"Jojoba Beans " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Jojoba Beans", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //19 Legume/Solanum Vegetables
                                        case 19:
                                            {
                                                outPut = new List<string>();
                                                if (zone == 0 || zone == 1)
                                                    break;
                                                result = "Legume/Solanum Vegetables  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Legume/Solanum Vegetables " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Legume/Solanum Vegetables", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //20 Legume/Solanum Vegetables (Fall)
                                        case 20:
                                            {
                                                outPut = new List<string>();

                                                result = "Legume/Solanum Vegetables (Fall)  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Legume/Solanum Vegetables \(Fall\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Legume/Solanum Vegetables (Fall)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //21 Legume/Solanum Vegetables (Spring)
                                        case 21:
                                            {
                                                outPut = new List<string>();

                                                result = "Legume/Solanum Vegetables (Spring)  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Legume/Solanum Vegetables \(Spring\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Legume/Solanum Vegetables (Spring)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        //22 Lettuce (Fall, Early)
                                        case 22:
                                            {
                                                outPut = new List<string>();

                                                result = "Lettuce (Fall, Early) ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Lettuce \(Fall, Early\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Lettuce (Fall, Early)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //23 Lettuce (Fall, Late)
                                        case 23:
                                            {
                                                outPut = new List<string>();
                                                if (zone == 0 || zone == 1)
                                                    break;
                                                result = "Lettuce (Fall, Late) ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Lettuce \(Fall, Late\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Lettuce (Fall, Late)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //24 Lettuce (Spring, Early)
                                        case 24:
                                            {
                                                outPut = new List<string>();
                                                if (zone == 0 || zone == 1)
                                                    break;
                                                result = "Lettuce (Spring, Early)  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Lettuce \(Spring, Early\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Lettuce (Spring, Early)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }
                                        //25 Lettuce (Spring, Late)
                                        case 25:
                                            {
                                                outPut = new List<string>();

                                                result = "Lettuce (Spring, Late)  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Lettuce \(Spring, Late\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Lettuce (Spring, Late)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;

                                            }
                                       //26 Lettuce (Spring, Late)
                                        case 26:
                                            {
                                                break;

                                            }
                                        //27 Marsh Maintained
                                        case 27:
                                            {
                                                if (zone == 0 || zone == 1 || zone == 2 || zone == 3)
                                                    break;
                                                outPut = new List<string>();
                                                result = "Marsh Maintained  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Marsh Maintained " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Marsh Maintained", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }

                                        //28 Melons (Fall)
                                        case 28:
                                            {
                                                outPut = new List<string>();
                                                result = "Melons (Fall)  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Melons \(Fall\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Melons (Fall)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;
                                            }

                                        //29 Melons (Spring)
                                        case 29:
                                            {

                                                outPut = new List<string>();
                                                result = "Melons (Spring)  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Melons \(Spring\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Melons (Spring)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                break;

                                            }
                                        
                                        //30 Miscellaneous herbs
                                        case 30:
                                            {
                                                outPut = new List<string>();

                                                result = "Miscellaneous herbs  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Miscellaneous herbs " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Miscellaneous herbs", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //31 Moist Soil Unit
                                        case 31:
                                            {
                                                outPut = new List<string>();

                                                result = "Moist Soil Unit  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Moist Soil Unit " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Moist Soil Unit", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //32 Nursery or Green House
                                        case 32:
                                            {
                                                outPut = new List<string>();

                                                result = "Nursery or greenhouse  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Nursery or greenhouse " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Nursery or greenhouse", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //33 Oil Crop
                                        case 33:
                                            {
                                                outPut = new List<string>();

                                                result = "Oil Crop  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Oil Crops " + test + test + test + test
                                            + test + test + test + test + test + test
                                            + test + test + test;
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Oil Crops", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //34 Perennial Vegetables
                                        case 34:
                                            {
                                                outPut = new List<string>();

                                                result = "Perennial Vegetables ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Perennial Vegetables " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Perennial Vegetables", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //35 Root Vegetables
                                        case 35:
                                            {
                                                outPut = new List<string>();

                                                result = "Root Vegetables ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Root Vegetables " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Root Vegetables", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //36 Small Grains (Fall)
                                        case 36:
                                            {
                                                outPut = new List<string>();

                                                result = "Small Grains (Fall)";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Small Grains \(Fall\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Small Grains (Fall)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //37 Small Grains (Spring)
                                        case 37:
                                            {
                                                outPut = new List<string>();

                                                result = "Small Grains (Spring)";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Small Grains \(Spring\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Small Grains (Spring)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //38 Small Vegetables (Fall)
                                        case 38:
                                            {
                                                outPut = new List<string>();

                                                result = "Small Vegetables (Fall) ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Small Vegetables \(Fall\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Small Vegetables (Fall)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //39 Small Vegetables (Spring)
                                        case 39:
                                            {
                                                outPut = new List<string>();

                                                result = "Small Vegetables (Spring) ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Small Vegetables \(Spring\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Small Vegetables (Spring)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //40 Small Vegetables (Spring, Late)
                                        case 40:
                                            {
                                                outPut = new List<string>();
                                                if (zone == 0 || zone == 1)
                                                    break;
                                                result = "Small Vegetables (Spring, Late) ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Small Vegetables \(Spring, Late\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Small Vegetables (Spring, Late)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //41 Sudan
                                        case 41:
                                            {
                                                outPut = new List<string>();

                                                result = "Sudan ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sudan " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sudan ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //42 Sugar Beets (Summer)
                                        case 42:
                                            {
                                                outPut = new List<string>();

                                                result = "Sugar Beets (Summer) ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sugar Beets \(Summer\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sugar Beets (Summer)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //43 Sugar Beets (Fall)
                                        case 43:
                                            {
                                                outPut = new List<string>();

                                                result = "Sugar Beets (Fall) ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sugar Beets \(Fall\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sugar Beets (Fall)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;

                                            }
                                        //44 Tomatoes
                                        case 44:
                                            {
                                                outPut = new List<string>();

                                                result = "Tomatoes ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Tomatoes " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Tomatoes ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //45 Wildlife Forage Maintained (only IID)
                                        case 45:
                                            {
                                                if (zone == 4)
                                                {
                                                    outPut = new List<string>();

                                                    result = "Wildlife Forage Maintained ";
                                                    string test = @"((\d+)+?(\.\d+)?)\s";

                                                    pattern = @"Wildlife Forage Maintained " + test + test + test + test
                                                    + test + test + test + test + test + test
                                                    + test + test + test;

                                                    MatchCollection matches = Regex.Matches(pdf, pattern);
                                                    if (matches.Count < 1)
                                                    {
                                                        result = result + " File Not Readable";

                                                    }
                                                    else
                                                    {
                                                        result = result + matches[0].Value.Replace("Wildlife Forage Maintained ", "").Trim();
                                                    }
                                                    outPut.Add(result);
                                                    foreach (String s in outPut)
                                                    {
                                                        tw.WriteLine(s);
                                                    }
                                                    //tw.Close();
                                                    tw.WriteLine();
                                                    //System.Diagnostics.Process.Start(outFile);
                                                    break;
                                                }
                                                else
                                                {
                                                    tw.WriteLine();
                                                    break;
                                                }
                                            }

                                    }
                                    crop += 1;
                                }
                                zone += 1;
                            }
                            tw.Close();

                            System.Diagnostics.Process.Start(outFile);
                            break;
                        }

                } 
                pdfnum += 1;
               
            }//bracket for main while loop for Crop data 95-2011
            Console.WriteLine();
            pdfnum = 0;
            while(pdfnum <= 16)
            {
                switch (pdfnum)
                {
                    case 0: // 95
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\Appendix95.pdf";
                            Console.WriteLine("Processing pdf 95 for Riparian Crop values");
                            var header = new List<string>(new string[] { "Year 95 Riparian Crop values" });
                            string outFile = "U:\\Ripariandata_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile);
                            foreach (String s in header)
                            {
                                tw.Write(s);
                            }
                            tw.WriteLine();
                            int zone = 0;
                            int page = 0;
                            int rip = 0;
                            //tw.Close();
                            while (zone < 6)
                            {
                                //string result = "";

                                switch (zone)
                                {

                                    case 0:
                                        {// Mohave area
                                            page = 20;
                                            tw.WriteLine("Mohave Area");
                                            break;

                                        }
                                    case 1:
                                        {// Parker area
                                            page = 90;

                                            tw.WriteLine("Parker Area");
                                            break;
                                        }
                                    case 2:
                                        {// Palo Verde area
                                            page = 160;

                                            tw.WriteLine("Palo Verde Area");
                                            break;
                                        }
                                    case 3:
                                        {// North Gila Area
                                            page = 230;

                                            tw.WriteLine("North Gila Area");
                                            break;
                                        }
                                    case 4:
                                        {// Yuma Valley Area
                                            page = 300;
                                            tw.WriteLine("Yuma Valley Area");
                                            break;
                                        }
                                    case 5:
                                        {// Yuma Mesa Area
                                            page = 370;

                                            tw.WriteLine("Yuma Mesa Area");
                                            break;
                                        }


                                }
                                rip = 0;
                                var pdf = pdfText(fName, page);
                                string pattern = "";
                                string result = "";
                                while(rip <= 13)
                                {
                                    switch (rip)
                                    {
                                        case 0://Marsh
                                            {
                                                outPut = new List<string>();

                                                result = "Marsh  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Marsh " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 4)
                                                    pattern = @"Marsh " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test;
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Marsh ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                               
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //1 Desert Veg
                                        case 1:
                                            {
                                                outPut = new List<string>();

                                                result = "Desert Veg  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Desert Veg " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 4)
                                                    pattern = @"Desert Veg " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test;
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Desert Veg ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                             
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //2 Barren
                                        case 2:
                                            {
                                                outPut = new List<string>();

                                                result = "Barren  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Barren " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 4)
                                                    pattern = @"Barren " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test;
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Barren ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                            
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //3 Sc-low
                                        case 3:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc-low  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc-low " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 4)
                                                    pattern = @"Sc-low " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test;
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc-low ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                              
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                                
                                            }
                                        //4 Sc-high
                                        case 4:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc-high  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc-high " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 4)
                                                    pattern = @"Sc-high " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test;
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc-high ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                             
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                                
                                            }
                                        //5 Sc/ms
                                        case 5:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc/ms  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc/ms " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 4)
                                                    pattern = @"Sc/ms " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test;
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc/ms ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                             
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //6 Sc/aw
                                        case 6:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc/aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc/aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 4)
                                                    pattern = @"Sc/aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test;
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc/aw ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //7 Sc/ms/aw
                                        case 7:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc/ms/aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc/ms/aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 4)
                                                    pattern = @"Sc/ms/aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test;
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc/ms/aw ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //8 Ms-low
                                        case 8:
                                            {
                                                outPut = new List<string>();

                                                result = "Ms-low  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Ms-low " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 4)
                                                    pattern = @"Ms-low " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test;
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Ms-low", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                               
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //9 Ms-high
                                        case 9:
                                            {
                                                outPut = new List<string>();

                                                result = "Ms-high  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Ms-high " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 4)
                                                    pattern = @"Ms-high " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test;
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Ms-high", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //10 Ms/aw
                                        case 10:
                                            {
                                                outPut = new List<string>();

                                                result = "Ms/aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Ms/aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 4)
                                                    pattern = @"Ms/aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test;
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Ms/aw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //11 Aw
                                        case 11:
                                            {
                                                outPut = new List<string>();

                                                result = "Aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 4)
                                                    pattern = @"Aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test;
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Aw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //12 Cw
                                        case 12:
                                            {
                                                outPut = new List<string>();

                                                result = "Cw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Cw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 4)
                                                    pattern = @"Cw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test;
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Cw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                               
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //13 Low Veg
                                        case 13:
                                            {
                                                outPut = new List<string>();

                                                result = "Low Veg  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Low Veg " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 4)
                                                    pattern = @"Low Veg " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test;
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Low Veg", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                tw.WriteLine();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                    }
                                    rip += 1;
                                }
                                zone += 1;
                            }
                          tw.Close();
                         //System.Diagnostics.Process.Start(outFile);
                        break;   
                        }
                    case 1: // 96
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\Appendix96.pdf";
                            Console.WriteLine("Processing pdf 96 for Riparian Crop values");
                            var header = new List<string>(new string[] { "Year 96 Riparian Crop values" });
                            string outFile = "U:\\Ripariandata_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            {
                                tw.Write(s);
                            }
                            tw.WriteLine();
                            int zone = 0;
                            int page = 0;
                            int rip = 0;
                            //tw.Close();
                            while (zone < 6)
                            {
                                

                                switch (zone)
                                {

                                    case 0:
                                        {// Mohave area
                                            page = 18;
                                            tw.WriteLine("Mohave Area");
                                            break;

                                        }
                                    case 1:
                                        {// Parker area
                                            page = 87;

                                            tw.WriteLine("Parker Area");
                                            break;
                                        }
                                    case 2:
                                        {// Palo Verde area
                                            page = 156;

                                            tw.WriteLine("Palo Verde Area");
                                            break;
                                        }
                                    case 3:
                                        {// North Gila Area
                                            page = 225;

                                            tw.WriteLine("North Gila Area");
                                            break;
                                        }
                                    case 4:
                                        {// Yuma Valley Area
                                            page = 294;
                                            tw.WriteLine("Yuma Valley Area");
                                            break;
                                        }
                                    case 5:
                                        {// Yuma Mesa Area
                                            page = 363;

                                            tw.WriteLine("Yuma Mesa Area");
                                            break;
                                        }


                                }
                                rip = 0;
                                var pdf = pdfText(fName, page);
                                string pattern = "";
                                string result = "";
                                while (rip <= 13)
                                {
                                    switch (rip)
                                    {
                                        case 0://Marsh
                                            {
                                                outPut = new List<string>();

                                                result = "Marsh  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Marsh " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Marsh ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //1 Desert Veg
                                        case 1:
                                            {
                                                outPut = new List<string>();

                                                result = "Desert Veg  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Desert Veg " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Desert Veg ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //2 Barren
                                        case 2:
                                            {
                                                outPut = new List<string>();

                                                result = "Barren  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Barren " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Barren ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //3 Sc-low
                                        case 3:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc-low  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc-low " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc-low ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;

                                            }
                                        //4 Sc-high
                                        case 4:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc-high  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc-high " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc-high ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;

                                            }
                                        //5 Sc/ms
                                        case 5:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc/ms  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc/ms " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc/ms ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //6 Sc/aw
                                        case 6:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc/aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc/aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc/aw ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //7 Sc/ms/aw
                                        case 7:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc/ms/aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc/ms/aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                               
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc/ms/aw ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //8 Ms-low
                                        case 8:
                                            {
                                                outPut = new List<string>();

                                                result = "Ms-low  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Ms-low " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                              
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Ms-low", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //9 Ms-high
                                        case 9:
                                            {
                                                outPut = new List<string>();

                                                result = "Ms-high  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Ms-high " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                              
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Ms-high", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //10 Ms/aw
                                        case 10:
                                            {
                                                outPut = new List<string>();

                                                result = "Ms/aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Ms/aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                              
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Ms/aw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //11 Aw
                                        case 11:
                                            {
                                                outPut = new List<string>();

                                                result = "Aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                               
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Aw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //12 Cw
                                        case 12:
                                            {
                                                outPut = new List<string>();

                                                result = "Cw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Cw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Cw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //13 Low Veg
                                        case 13:
                                            {
                                                outPut = new List<string>();

                                                result = "Low Veg  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Veg " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Veg", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                tw.WriteLine();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                    }
                                    rip += 1;
                                }
                                zone += 1;
                            }
                            tw.Close();
                            //System.Diagnostics.Process.Start(outFile);
                            break;
                        }
                    case 2: // 97
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\Appendix97.pdf";
                            Console.WriteLine("Processing pdf 97 for Riparian Crop values");
                            var header = new List<string>(new string[] { "Year 97 Riparian Crop values" });
                            string outFile = "U:\\Ripariandata_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            {
                                tw.Write(s);
                            }
                            tw.WriteLine();
                            int zone = 0;
                            int page = 0;
                            int rip = 0;
                            //tw.Close();
                            while (zone < 7)
                            {


                                switch (zone)
                                {

                                    case 0:
                                        {// Mohave area
                                            page = 31;
                                            tw.WriteLine("Mohave Area");
                                            break;

                                        }
                                    case 1:
                                        {// Parker area
                                            page = 100;

                                            tw.WriteLine("Parker Area");
                                            break;
                                        }
                                    case 2:
                                        {// Palo Verde area
                                            page = 169;

                                            tw.WriteLine("Palo Verde Area");
                                            break;
                                        }
                                    case 3:
                                        {// North Gila Area
                                            page = 307;

                                            tw.WriteLine("North Gila Area");
                                            break;
                                        }
                                    case 4:
                                        {// Yuma Valley Area
                                            page = 376;
                                            tw.WriteLine("Yuma Valley Area");
                                            break;
                                        }
                                    case 5:
                                        {// Yuma Mesa Area
                                            page = 445;

                                            tw.WriteLine("Yuma Mesa Area");
                                            break;
                                        }
                                    case 6:
                                        {
                                            page = 238;
                                            tw.WriteLine("BlytheNE Area");
                                            break;
                                        }


                                }
                                rip = 0;
                                var pdf = pdfText(fName, page);
                                string pattern = "";
                                string result = "";
                                while (rip <= 13)
                                {
                                    switch (rip)
                                    {
                                        case 0://Marsh
                                            {
                                                outPut = new List<string>();

                                                result = "Marsh  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Marsh " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Marsh ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //1 Desert Veg
                                        case 1:
                                            {
                                                outPut = new List<string>();

                                                result = "Desert Veg  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Desert Veg " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Desert Veg ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //2 Barren
                                        case 2:
                                            {
                                                outPut = new List<string>();

                                                result = "Barren  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Barren " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Barren ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //3 Sc-low
                                        case 3:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc-low  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc-low " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc-low ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;

                                            }
                                        //4 Sc-high
                                        case 4:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc-high  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc-high " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc-high ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;

                                            }
                                        //5 Sc/ms
                                        case 5:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc/ms  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc/ms " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc/ms ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //6 Sc/aw
                                        case 6:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc/aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc/aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc/aw ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //7 Sc/ms/aw
                                        case 7:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc/ms/aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc/ms/aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc/ms/aw ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //8 Ms-low
                                        case 8:
                                            {
                                                outPut = new List<string>();

                                                result = "Ms-low  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Ms-low " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Ms-low", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //9 Ms-high
                                        case 9:
                                            {
                                                outPut = new List<string>();

                                                result = "Ms-high  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Ms-high " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Ms-high", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //10 Ms/aw
                                        case 10:
                                            {
                                                outPut = new List<string>();

                                                result = "Ms/aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Ms/aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Ms/aw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //11 Aw
                                        case 11:
                                            {
                                                outPut = new List<string>();

                                                result = "Aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Aw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //12 Cw
                                        case 12:
                                            {
                                                outPut = new List<string>();

                                                result = "Cw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Cw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Cw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //13 Low Veg
                                        case 13:
                                            {
                                                outPut = new List<string>();

                                                result = "Low Veg  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Veg " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Veg", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                tw.WriteLine();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                    }
                                    rip += 1;
                                }
                                zone += 1;
                            }
                            tw.Close();
                           // System.Diagnostics.Process.Start(outFile);
                            break;
                        }
                    case 3: // 98
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\Appendix98.pdf";
                            Console.WriteLine("Processing pdf 98 for Riparian Crop values");
                            var header = new List<string>(new string[] { "Year 98 Riparian Crop values" });
                            string outFile = "U:\\Ripariandata_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            {
                                tw.Write(s);
                            }
                            tw.WriteLine();
                            int zone = 0;
                            int page = 0;
                            int rip = 0;
                            //tw.Close();
                            while (zone < 6)
                            {


                                switch (zone)
                                {

                                    case 0:
                                        {// Mohave area
                                            page = 30;
                                            tw.WriteLine("Mohave Area");
                                            break;

                                        }
                                    case 1:
                                        {// Parker area
                                            page = 98;

                                            tw.WriteLine("Parker Area");
                                            break;
                                        }
                                    case 2:
                                        {// Palo Verde area
                                            page = 166;

                                            tw.WriteLine("Palo Verde/ Blythe NE Area");
                                            break;
                                        }
                                    case 3:
                                        {// North Gila Area
                                            page = 235;

                                            tw.WriteLine("North Gila Area");
                                            break;
                                        }
                                    case 4:
                                        {// Yuma Valley Area
                                            page = 303;
                                            tw.WriteLine("Yuma Valley Area");
                                            break;
                                        }
                                    case 5:
                                        {// Yuma Mesa Area
                                            page = 371;

                                            tw.WriteLine("Yuma Mesa Area");
                                            break;
                                        }
                                   


                                }
                                rip = 0;
                                var pdf = pdfText(fName, page);
                                string pattern = "";
                                string result = "";
                                while (rip <= 13)
                                {
                                    switch (rip)
                                    {
                                        case 0://Marsh
                                            {
                                                outPut = new List<string>();

                                                result = "Marsh  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Marsh " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Marsh ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //1 Desert Veg
                                        case 1:
                                            {
                                               /* outPut = new List<string>();

                                                result = "Desert Veg  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Desert Veg " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Desert Veg ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);*/
                                                break;
                                            }
                                        //2 Barren
                                        case 2:
                                            {
                                                outPut = new List<string>();

                                                result = "Barren  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Barren " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Barren ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //3 Sc-low
                                        case 3:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc-low  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc-low " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc-low ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;

                                            }
                                        //4 Sc-high
                                        case 4:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc-high  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc-high " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc-high ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;

                                            }
                                        //5 Sc/ms
                                        case 5:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc/ms  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc/ms " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc/ms ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //6 Sc/aw
                                        case 6:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc/aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc/aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc/aw ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //7 Sc/ms/aw
                                        case 7:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc/ms/aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc/ms/aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc/ms/aw ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //8 Ms-low
                                        case 8:
                                            {
                                                outPut = new List<string>();

                                                result = "Ms-low  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Ms-low " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Ms-low", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //9 Ms-high
                                        case 9:
                                            {
                                                outPut = new List<string>();

                                                result = "Ms-high  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Ms-high " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Ms-high", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //10 Ms/aw
                                        case 10:
                                            {
                                                outPut = new List<string>();

                                                result = "Ms/aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Ms/aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Ms/aw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //11 Aw
                                        case 11:
                                            {
                                                outPut = new List<string>();

                                                result = "Aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Aw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //12 Cw
                                        case 12:
                                            {
                                                outPut = new List<string>();

                                                result = "Cw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Cw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Cw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //13 Low Veg
                                        case 13:
                                            {
                                                outPut = new List<string>();

                                                result = "Low Veg  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"g " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("g", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                tw.WriteLine();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                    }
                                    rip += 1;
                                }
                                zone += 1;
                            }
                            tw.Close();
                             //System.Diagnostics.Process.Start(outFile);
                            break;
                        }
                    case 4: // 99
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\Appendix99.pdf";
                            Console.WriteLine("Processing pdf 99 for Riparian Crop values");
                            var header = new List<string>(new string[] { "Year 99 Riparian Crop values" });
                            string outFile = "U:\\Ripariandata_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            {
                                tw.Write(s);
                            }
                            tw.WriteLine();
                            int zone = 0;
                            int page = 0;
                            int rip = 0;
                            //tw.Close();
                            while (zone < 3)
                            {


                                switch (zone)
                                {

                                    case 0:
                                        {// Mohave area
                                            page = 19;
                                            tw.WriteLine("Mohave Area");
                                            break;

                                        }
                                    case 1:
                                        {// Parker area
                                            page = 118;

                                            tw.WriteLine("Parker Area");
                                            break;
                                        }
                                    case 2:
                                        {// Yuma Area
                                            page = 220;

                                            tw.WriteLine("Yuma Area");
                                            break;
                                        }

                                    
                                }
                                rip = 0;
                                var pdf = pdfText(fName, page);
                                string pattern = "";
                                string result = "";
                                while (rip <= 13)
                                {
                                    switch (rip)
                                    {
                                        case 0://Marsh
                                            {
                                                outPut = new List<string>();

                                                result = "Marsh  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Marsh " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Marsh ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //1 Desert Veg
                                        case 1:
                                            {
                                                /* outPut = new List<string>();

                                                 result = "Desert Veg  ";
                                                 string test = @"((\d+)+?(\.\d+)?)\s";

                                                 pattern = @"Desert Veg " + test + test + test + test
                                                 + test + test + test + test + test + test
                                                 + test + test + test;

                                                 MatchCollection matches = Regex.Matches(pdf, pattern);
                                                 if (matches.Count < 1)
                                                 {
                                                     result = result + " File Not Readable";

                                                 }
                                                 else
                                                 {
                                                     result = result + matches[0].Value.Replace("Desert Veg ", "").Trim();
                                                 }
                                                 outPut.Add(result);
                                                 foreach (String s in outPut)
                                                 {
                                                     tw.WriteLine(s);
                                                 }
                                                 //tw.Close();

                                                 //System.Diagnostics.Process.Start(outFile);*/
                                                break;
                                            }
                                        //2 Barren
                                        case 2:
                                            {
                                                outPut = new List<string>();

                                                result = "Barren  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Barren " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Barren ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //3 Sc-low
                                        case 3:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc-low  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc-low " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc-low ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;

                                            }
                                        //4 Sc-high
                                        case 4:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc-high  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc-high " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc-high ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;

                                            }
                                        //5 Sc/ms
                                        case 5:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc/ms  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc/ms " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc/ms ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //6 Sc/aw
                                        case 6:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc/aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc/aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc/aw ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //7 Sc/ms/aw
                                        case 7:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc/ms/aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc/ms/aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc/ms/aw ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //8 Ms-low
                                        case 8:
                                            {
                                                outPut = new List<string>();

                                                result = "Ms-low  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Ms-low " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Ms-low", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //9 Ms-high
                                        case 9:
                                            {
                                                outPut = new List<string>();

                                                result = "Ms-high  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Ms-high " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Ms-high", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //10 Ms/aw
                                        case 10:
                                            {
                                                outPut = new List<string>();

                                                result = "Ms/aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Ms/aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Ms/aw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //11 Aw
                                        case 11:
                                            {
                                                outPut = new List<string>();

                                                result = "Aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Aw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //12 Cw
                                        case 12:
                                            {
                                                outPut = new List<string>();

                                                result = "Cw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Cw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Cw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //13 Low Veg
                                        case 13:
                                            {
                                                outPut = new List<string>();

                                                result = "Low Veg  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"g " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("g", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                tw.WriteLine();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                    }
                                    rip += 1;
                                }
                                zone += 1;
                            }
                            tw.Close();
                            //System.Diagnostics.Process.Start(outFile);
                            break;
                        }
                    case 5: // 00
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\2000AppendixPart1.pdf";
                            Console.WriteLine("Processing pdf 00 for Riparian Crop values");
                            var header = new List<string>(new string[] { "Year 00 Riparian Crop values" });
                            string outFile = "U:\\Ripariandata_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            {
                                tw.Write(s);
                            }
                            tw.WriteLine();
                            int zone = 0;
                            int page = 0;
                            int rip = 0;
                            //tw.Close();
                            while (zone < 3)
                            {


                                switch (zone)
                                {

                                    case 0:
                                        {// Mohave area
                                            page = 67;
                                            tw.WriteLine("Mohave Area");
                                            break;

                                        }
                                    case 1:
                                        {// Parker area
                                            page = 152;

                                            tw.WriteLine("Parker Area");
                                            break;
                                        }
                                    case 2:
                                        {// Yuma Area
                                            page = 237;

                                            tw.WriteLine("Yuma Area");
                                            break;
                                        }


                                }
                                rip = 0;
                                var pdf = pdfText(fName, page);
                                string pattern = "";
                                string result = "";
                                while (rip <= 13)
                                {
                                    switch (rip)
                                    {
                                        case 0://Marsh
                                            {
                                                outPut = new List<string>();

                                                result = "Marsh  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Marsh " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Marsh ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //1 Desert Veg
                                        case 1:
                                            {
                                                /* outPut = new List<string>();

                                                 result = "Desert Veg  ";
                                                 string test = @"((\d+)+?(\.\d+)?)\s";

                                                 pattern = @"Desert Veg " + test + test + test + test
                                                 + test + test + test + test + test + test
                                                 + test + test + test;

                                                 MatchCollection matches = Regex.Matches(pdf, pattern);
                                                 if (matches.Count < 1)
                                                 {
                                                     result = result + " File Not Readable";

                                                 }
                                                 else
                                                 {
                                                     result = result + matches[0].Value.Replace("Desert Veg ", "").Trim();
                                                 }
                                                 outPut.Add(result);
                                                 foreach (String s in outPut)
                                                 {
                                                     tw.WriteLine(s);
                                                 }
                                                 //tw.Close();

                                                 //System.Diagnostics.Process.Start(outFile);*/
                                                break;
                                            }
                                        //2 Barren
                                        case 2:
                                            {
                                                outPut = new List<string>();

                                                result = "Barren  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Barren " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Barren ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //3 Sc-low
                                        case 3:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc-low  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc-low " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc-low ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;

                                            }
                                        //4 Sc-high
                                        case 4:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc-high  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc-high " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc-high ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;

                                            }
                                        //5 Sc/ms
                                        case 5:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc/ms  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc/ms " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc/ms ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //6 Sc/aw
                                        case 6:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc/aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc/aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc/aw ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //7 Sc/ms/aw
                                        case 7:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc/ms/aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc/ms/aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc/ms/aw ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //8 Ms-low
                                        case 8:
                                            {
                                                outPut = new List<string>();

                                                result = "Ms-low  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Ms-low " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Ms-low", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //9 Ms-high
                                        case 9:
                                            {
                                                outPut = new List<string>();

                                                result = "Ms-high  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Ms-high " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Ms-high", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //10 Ms/aw
                                        case 10:
                                            {
                                                outPut = new List<string>();

                                                result = "Ms/aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Ms/aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Ms/aw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //11 Aw
                                        case 11:
                                            {
                                                outPut = new List<string>();

                                                result = "Aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Aw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //12 Cw
                                        case 12:
                                            {
                                                outPut = new List<string>();

                                                result = "Cw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Cw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Cw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //13 Low Veg
                                        case 13:
                                            {
                                                outPut = new List<string>();

                                                result = "Low Veg  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"g " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("g", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                tw.WriteLine();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                    }
                                    rip += 1;
                                }
                                zone += 1;
                            }
                            tw.Close();
                            //System.Diagnostics.Process.Start(outFile);
                            break;
                        }
                    case 6: // 01
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\01AppendixPart1.pdf";
                            Console.WriteLine("Processing pdf 01 for Riparian Crop values");
                            var header = new List<string>(new string[] { "Year 01 Riparian Crop values" });
                            string outFile = "U:\\Ripariandata_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            {
                                tw.Write(s);
                            }
                            tw.WriteLine();
                            int zone = 0;
                            int page = 0;
                            int rip = 0;
                            //tw.Close();
                            while (zone < 3)
                            {


                                switch (zone)
                                {

                                    case 0:
                                        {// Mohave area
                                            page = 67;
                                            tw.WriteLine("Mohave Area");
                                            break;

                                        }
                                    case 1:
                                        {// Parker area
                                            page = 158;

                                            tw.WriteLine("Parker Area");
                                            break;
                                        }
                                    case 2:
                                        {// Yuma Area
                                            page = 249;

                                            tw.WriteLine("Yuma Area");
                                            break;
                                        }


                                }
                                rip = 0;
                                var pdf = pdfText(fName, page);
                                string pattern = "";
                                string result = "";
                                while (rip <= 13)
                                {
                                    switch (rip)
                                    {
                                        case 0://Marsh
                                            {
                                                outPut = new List<string>();

                                                result = "Marsh  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Marsh " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Marsh ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //1 Desert Veg
                                        case 1:
                                            {
                                                /* outPut = new List<string>();

                                                 result = "Desert Veg  ";
                                                 string test = @"((\d+)+?(\.\d+)?)\s";

                                                 pattern = @"Desert Veg " + test + test + test + test
                                                 + test + test + test + test + test + test
                                                 + test + test + test;

                                                 MatchCollection matches = Regex.Matches(pdf, pattern);
                                                 if (matches.Count < 1)
                                                 {
                                                     result = result + " File Not Readable";

                                                 }
                                                 else
                                                 {
                                                     result = result + matches[0].Value.Replace("Desert Veg ", "").Trim();
                                                 }
                                                 outPut.Add(result);
                                                 foreach (String s in outPut)
                                                 {
                                                     tw.WriteLine(s);
                                                 }
                                                 //tw.Close();

                                                 //System.Diagnostics.Process.Start(outFile);*/
                                                break;
                                            }
                                        //2 Barren
                                        case 2:
                                            {
                                                outPut = new List<string>();

                                                result = "Barren  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Barren " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Barren ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //3 Sc-low
                                        case 3:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc-low  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc-low " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc-low ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;

                                            }
                                        //4 Sc-high
                                        case 4:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc-high  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc-high " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc-high ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;

                                            }
                                        //5 Sc/ms
                                        case 5:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc/ms  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc/ms " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc/ms ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //6 Sc/aw
                                        case 6:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc/aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc/aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc/aw ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //7 Sc/ms/aw
                                        case 7:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc/ms/aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc/ms/aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc/ms/aw ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //8 Ms-low
                                        case 8:
                                            {
                                                outPut = new List<string>();

                                                result = "Ms-low  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Ms-low " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Ms-low", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //9 Ms-high
                                        case 9:
                                            {
                                                outPut = new List<string>();

                                                result = "Ms-high  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Ms-high " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Ms-high", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //10 Ms/aw
                                        case 10:
                                            {
                                                outPut = new List<string>();

                                                result = "Ms/aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Ms/aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Ms/aw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //11 Aw
                                        case 11:
                                            {
                                                outPut = new List<string>();

                                                result = "Aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Aw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //12 Cw
                                        case 12:
                                            {
                                                outPut = new List<string>();

                                                result = "Cw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Cw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Cw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //13 Low Veg
                                        case 13:
                                            {
                                                outPut = new List<string>();

                                                result = "Low Veg  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"g " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("g", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                tw.WriteLine();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                    }
                                    rip += 1;
                                }
                                zone += 1;
                            }
                            tw.Close();
                            //System.Diagnostics.Process.Start(outFile);
                            break;
                        }
                    case 7: // 02
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\02AppendixPart1.pdf";
                            Console.WriteLine("Processing pdf 02 for Riparian Crop values");
                            var header = new List<string>(new string[] { "Year 02 Riparian Crop values" });
                            string outFile = "U:\\Ripariandata_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            {
                                tw.Write(s);
                            }
                            tw.WriteLine();
                            int zone = 0;
                            int page = 0;
                            int rip = 0;
                            //tw.Close();
                            while (zone < 3)
                            {


                                switch (zone)
                                {

                                    case 0:
                                        {// Mohave area
                                            page = 66;
                                            tw.WriteLine("Mohave Area");
                                            break;

                                        }
                                    case 1:
                                        {// Parker area
                                            page = 157;

                                            tw.WriteLine("Parker Area");
                                            break;
                                        }
                                    case 2:
                                        {// Yuma Area
                                            page = 248;

                                            tw.WriteLine("Yuma Area");
                                            break;
                                        }


                                }
                                rip = 0;
                                var pdf = pdfText(fName, page);
                                string pattern = "";
                                string result = "";
                                while (rip <= 13)
                                {
                                    switch (rip)
                                    {
                                        case 0://Marsh
                                            {
                                                outPut = new List<string>();

                                                result = "Marsh  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Marsh " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Marsh ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //1 Desert Veg
                                        case 1:
                                            {
                                                /* outPut = new List<string>();

                                                 result = "Desert Veg  ";
                                                 string test = @"((\d+)+?(\.\d+)?)\s";

                                                 pattern = @"Desert Veg " + test + test + test + test
                                                 + test + test + test + test + test + test
                                                 + test + test + test;

                                                 MatchCollection matches = Regex.Matches(pdf, pattern);
                                                 if (matches.Count < 1)
                                                 {
                                                     result = result + " File Not Readable";

                                                 }
                                                 else
                                                 {
                                                     result = result + matches[0].Value.Replace("Desert Veg ", "").Trim();
                                                 }
                                                 outPut.Add(result);
                                                 foreach (String s in outPut)
                                                 {
                                                     tw.WriteLine(s);
                                                 }
                                                 //tw.Close();

                                                 //System.Diagnostics.Process.Start(outFile);*/
                                                break;
                                            }
                                        //2 Barren
                                        case 2:
                                            {
                                                outPut = new List<string>();

                                                result = "Barren  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Barren " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Barren ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //3 Sc-low
                                        case 3:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc-low  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc-low " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc-low ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;

                                            }
                                        //4 Sc-high
                                        case 4:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc-high  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc-high " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc-high ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;

                                            }
                                        //5 Sc/ms
                                        case 5:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc/ms  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc/ms " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc/ms ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //6 Sc/aw
                                        case 6:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc/aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc/aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc/aw ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //7 Sc/ms/aw
                                        case 7:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc/ms/aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc/ms/aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc/ms/aw ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //8 Ms-low
                                        case 8:
                                            {
                                                outPut = new List<string>();

                                                result = "Ms-low  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Ms-low " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Ms-low", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //9 Ms-high
                                        case 9:
                                            {
                                                outPut = new List<string>();

                                                result = "Ms-high  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Ms-high " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Ms-high", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //10 Ms/aw
                                        case 10:
                                            {
                                                outPut = new List<string>();

                                                result = "Ms/aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Ms/aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Ms/aw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //11 Aw
                                        case 11:
                                            {
                                                outPut = new List<string>();

                                                result = "Aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Aw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //12 Cw
                                        case 12:
                                            {
                                                outPut = new List<string>();

                                                result = "Cw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Cw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Cw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //13 Low Veg
                                        case 13:
                                            {
                                                outPut = new List<string>();

                                                result = "Low Veg  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"g " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("g", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                tw.WriteLine();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                    }
                                    rip += 1;
                                }
                                zone += 1;
                            }
                            tw.Close();
                           // System.Diagnostics.Process.Start(outFile);
                            break;
                        }
                    case 8: // 03
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\2003LCRAS.pdf";
                            Console.WriteLine("Processing pdf 03 for Riparian Crop values");
                            var header = new List<string>(new string[] { "Year 03 Riparian Crop values" });
                            string outFile = "U:\\Ripariandata_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            {
                                tw.Write(s);
                            }
                            tw.WriteLine();
                            int zone = 0;
                            int page = 0;
                            int rip = 0;
                            //tw.Close();
                            while (zone < 3)
                            {


                                switch (zone)
                                {

                                    case 0:
                                        {// Mohave area
                                            page = 105;
                                            tw.WriteLine("Mohave Area");
                                            break;

                                        }
                                    case 1:
                                        {// Parker area
                                            page = 196;

                                            tw.WriteLine("Parker Area");
                                            break;
                                        }
                                    case 2:
                                        {// Yuma Area
                                            page = 287;

                                            tw.WriteLine("Yuma Area");
                                            break;
                                        }


                                }
                                rip = 0;
                                var pdf = pdfText(fName, page);
                                string pattern = "";
                                string result = "";
                                while (rip <= 13)
                                {
                                    switch (rip)
                                    {
                                        case 0://Marsh
                                            {
                                                outPut = new List<string>();

                                                result = "Marsh  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Marsh " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Marsh ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //1 Desert Veg
                                        case 1:
                                            {
                                                /* outPut = new List<string>();

                                                 result = "Desert Veg  ";
                                                 string test = @"((\d+)+?(\.\d+)?)\s";

                                                 pattern = @"Desert Veg " + test + test + test + test
                                                 + test + test + test + test + test + test
                                                 + test + test + test;

                                                 MatchCollection matches = Regex.Matches(pdf, pattern);
                                                 if (matches.Count < 1)
                                                 {
                                                     result = result + " File Not Readable";

                                                 }
                                                 else
                                                 {
                                                     result = result + matches[0].Value.Replace("Desert Veg ", "").Trim();
                                                 }
                                                 outPut.Add(result);
                                                 foreach (String s in outPut)
                                                 {
                                                     tw.WriteLine(s);
                                                 }
                                                 //tw.Close();

                                                 //System.Diagnostics.Process.Start(outFile);*/
                                                break;
                                            }
                                        //2 Barren
                                        case 2:
                                            {
                                                outPut = new List<string>();

                                                result = "Barren  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Barren " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Barren ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //3 Sc-low
                                        case 3:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc-low  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc-low " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc-low ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;

                                            }
                                        //4 Sc-high
                                        case 4:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc-high  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc-high " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc-high ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;

                                            }
                                        //5 Sc/ms
                                        case 5:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc/ms  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc/ms " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc/ms ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //6 Sc/aw
                                        case 6:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc/aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc/aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc/aw ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //7 Sc/ms/aw
                                        case 7:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc/ms/aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc/ms/aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc/ms/aw ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //8 Ms-low
                                        case 8:
                                            {
                                                outPut = new List<string>();

                                                result = "Ms-low  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Ms-low " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Ms-low", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //9 Ms-high
                                        case 9:
                                            {
                                                outPut = new List<string>();

                                                result = "Ms-high  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Ms-high " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Ms-high", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //10 Ms/aw
                                        case 10:
                                            {
                                                outPut = new List<string>();

                                                result = "Ms/aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Ms/aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Ms/aw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //11 Aw
                                        case 11:
                                            {
                                                outPut = new List<string>();

                                                result = "Aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Aw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //12 Cw
                                        case 12:
                                            {
                                                outPut = new List<string>();

                                                result = "Cw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Cw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Cw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //13 Low Veg
                                        case 13:
                                            {
                                                outPut = new List<string>();

                                                result = "Low Veg  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"g " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("g", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                tw.WriteLine();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                    }
                                    rip += 1;
                                }
                                zone += 1;
                            }
                            tw.Close();
                           // System.Diagnostics.Process.Start(outFile);
                            break;
                        }
                    case 9: // 04
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\2004LCRAS.pdf";
                            Console.WriteLine("Processing pdf 04 for Riparian Crop values");
                            var header = new List<string>(new string[] { "Year 04 Riparian Crop values" });
                            string outFile = "U:\\Ripariandata_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            {
                                tw.Write(s);
                            }
                            tw.WriteLine();
                            int zone = 0;
                            int page = 0;
                            int rip = 0;
                            //tw.Close();
                            while (zone < 5)
                            {


                                switch (zone)
                                {

                                    case 0:
                                        {// Mohave area
                                            page = 115;
                                            tw.WriteLine("Mohave Area");
                                            break;

                                        }
                                    case 1:
                                        {// Parker area
                                            page = 206;

                                            tw.WriteLine("Parker Area");
                                            break;
                                        }
                                    case 2:
                                        {// Yuma Area
                                            page = 485;

                                            tw.WriteLine("Yuma Area");
                                            break;
                                        }
                                    case 3://Imeperial/Coachella
                                        {
                                            page = 388;
                                            tw.WriteLine("IDD/Coachella Valley Area");
                                            break;
                                        }
                                    case 4://Wellton-Hawk
                                        {
                                            page = 297;
                                            tw.WriteLine("Wellton-Mohawk Area");
                                            break;
                                        }


                                }
                                rip = 0;
                                var pdf = pdfText(fName, page);
                                string pattern = "";
                                string result = "";
                                while (rip <= 13)
                                {
                                    switch (rip)
                                    {
                                        case 0://Marsh
                                            {
                                                outPut = new List<string>();

                                                result = "Marsh  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"\[bamboo\]\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("[bamboo])", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //1 Desert Veg
                                        case 1:
                                            {
                                                /* outPut = new List<string>();

                                                 result = "Desert Veg  ";
                                                 string test = @"((\d+)+?(\.\d+)?)\s";

                                                 pattern = @"Desert Veg " + test + test + test + test
                                                 + test + test + test + test + test + test
                                                 + test + test + test;

                                                 MatchCollection matches = Regex.Matches(pdf, pattern);
                                                 if (matches.Count < 1)
                                                 {
                                                     result = result + " File Not Readable";

                                                 }
                                                 else
                                                 {
                                                     result = result + matches[0].Value.Replace("Desert Veg ", "").Trim();
                                                 }
                                                 outPut.Add(result);
                                                 foreach (String s in outPut)
                                                 {
                                                     tw.WriteLine(s);
                                                 }
                                                 //tw.Close();

                                                 //System.Diagnostics.Process.Start(outFile);*/
                                                break;
                                            }
                                        //2 Barren
                                        case 2:
                                            {
                                                outPut = new List<string>();

                                                result = "Barren  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                               
                                                if(zone ==1)
                                                    pattern = @"\% vegetation\)\n" + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                else
                                                    pattern = @"\% vegetation\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("% vegetation) ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //3 Sc-low
                                        case 3:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc-low  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"11-60\% salt cedar \& \<\= 25% \narrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if(zone == 0)
                                                {
                                                    pattern = @"11-60\% salt cedar \& \<\= \n25% arrowweed\) " + test + test + test + test
                                                            + test + test + test + test + test + test
                                                            + test + test + test;
                                                }
                                                else if (zone == 2||zone ==3 || zone == 4)
                                                {
                                                    pattern = @"Sc-low \(11-60% salt cedar \& \<\= 25% " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("(11-60% salt cedar & <= 25% arrowweed) ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;

                                            }
                                        //4 Sc-high
                                        case 4:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc-high  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";
                                                
                                                   pattern = @"61-100\% salt cedar \& \<\= 25% \narrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                if(zone == 0)
                                                {
                                                    pattern = @"Sc-high \(61-100% salt cedar & \n\<\= 25% arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("(61 - 100 % salt cedar & <= 25% \narrowweed)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;

                                            }
                                        //5 Sc/ms
                                        case 5:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc/ms  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc/ms " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if(zone == 0)
                                                {
                                                    pattern = @"60% mesquite \& \<\= 25% \narrowweed\) " + test + test + test + test
                                                    + test + test + test + test + test + test
                                                    + test + test + test;
                                                }
                                                else if (zone == 1||zone==2 ||zone == 4)
                                                {
                                                    pattern = @"Sc/ms \(11-60% salt cedar \& 11-60% mesquite \n\& \<\= 25% arrowweed\) " + test + test + test + test
                                                   + test + test + test + test + test + test
                                                   + test + test + test;
                                                }
                                                else if (zone == 3)
                                                {
                                                    pattern = @"Sc/ms \(11-60% salt cedar & 11-60% mesquite \n\& \<\= 25% arrowweed\)\n" + test + test + test + test
                                                   + test + test + test + test + test + test
                                                   + test + test + test;
                                                }
                                                

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc/ms ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //6 Sc/aw
                                        case 6:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc/aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc/aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if(zone == 0)
                                                {
                                                    pattern = @"Sc/aw \(\<\= 75% salt cedar \& \>\= \n25% arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 1||zone ==3 )
                                                {
                                                    pattern = @"Sc/aw \(\<\= 75% salt cedar \& \>\= 25% " + test + test + test + test
                                               + test + test + test + test + test + test
                                               + test + test + test;
                                                }
                                                else if (zone == 2 ||zone == 4)
                                                {
                                                    pattern = @"Sc/aw \(\<\= 75% salt cedar \& \>\= 25% \n" + test + test + test + test
                                               + test + test + test + test + test + test
                                               + test + test + test;
                                                }

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc/aw ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //7 Sc/ms/aw
                                        case 7:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc/ms/aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc/ms/aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if(zone == 0)
                                                {
                                                    pattern = @"Sc/ms/aw \(15-45% salt cedar \& \n15-45% mesquite \& 20-40% \narrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 1|| zone == 2 || zone == 3||zone == 4)
                                                {
                                                    pattern = @"Sc/ms/aw \(15-45% salt cedar \& 15-45% \nmesquite \& 20-40% arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                /*else if (zone == 2)
                                                {
                                                    pattern = @"Sc/ms/aw \(15-45% salt cedar \& 15-45% \nmesquite \& 20-40% arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }*/
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc/ms/aw ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //8 Ms-low
                                        case 8:
                                            {
                                                outPut = new List<string>();

                                                result = "Ms-low  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Ms-low " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if(zone == 0)
                                                {
                                                    pattern = @"screwbean/honey mesquite \& \n<= 25% arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 1 || zone == 2 || zone ==3 ||zone == 4)
                                                {
                                                    pattern = @"Ms-low \(11-60% screwbean/honey mesquite & \n\<\= 25% arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Ms-low", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //9 Ms-high
                                        case 9:
                                            {
                                                outPut = new List<string>();

                                                result = "Ms-high  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Ms-high " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if(zone == 0)
                                                {
                                                    pattern = @"Ms-high \(61-100% \nscrewbean/honey mesquite \& \n\<\= 25% arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 1|| zone == 2|| zone == 3||zone == 4)
                                                {
                                                    pattern = @"Ms-high \(61-100% screwbean/honey mesquite \n\& \<\= 25% arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Ms-high", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //10 Ms/aw
                                        case 10:
                                            {
                                                outPut = new List<string>();

                                                result = "Ms/aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Ms/aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if(zone == 0)
                                                {
                                                    pattern = @"Ms/aw \(21-60% mesquite & 31-\n60% arrowweed \& \<\= 20% salt \ncedar\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 1)
                                                {
                                                    pattern = @"Ms/aw \(21-60% mesquite \& 31-60% \narrowweed \& \<\= 20% salt cedar\)\n" + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if(zone == 2|| zone == 3||zone== 4)
                                                {
                                                    pattern = @"Ms/aw \(21-60% mesquite \& 31-60% arrowweed \n\& \<\= 20% salt cedar\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Ms/aw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //11 Aw
                                        case 11:
                                            {
                                                outPut = new List<string>();

                                                result = "Aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if(zone == 0)
                                                {
                                                    pattern = @"Aw \(51-100% arrowweed & <= \n10% any trees\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if(zone == 1||zone == 2 || zone == 3||zone == 4)
                                                {
                                                    pattern = @"Aw \(51-100% arrowweed \& \<\= 10% any trees\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Aw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //12 Cw
                                        case 12:
                                            {
                                                outPut = new List<string>();

                                                result = "Cw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Cw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 0)
                                                {
                                                    pattern = @"Cw \(61-100% cottonwood and \nwillow trees\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone ==1 ||zone ==2 ||zone == 3 ||zone  == 4)
                                                {
                                                    pattern = @"Cw \(61-100% cottonwood and willow trees\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Cw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //13 Low Veg
                                        case 13:
                                            {
                                                outPut = new List<string>();

                                                result = "Low Veg  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"g " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if(zone == 0||zone == 1||zone ==2||zone == 4)
                                                {
                                                    pattern = @"vegetation\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 3)
                                                {
                                                    pattern = @"riparian vegetation\)" + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("g", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                if(zone == 1)
                                                {
                                                    result = "Monthly Totals  ";
                                                    pattern = @"Monthly Totals " + test + test + test + test
                                                    + test + test + test + test + test + test
                                                    + test + test + test;
                                                    matches = Regex.Matches(pdf, pattern);
                                                    if (matches.Count < 1)
                                                    {
                                                        result = result + " File Not Readable";

                                                    }
                                                    else
                                                    {
                                                        result = result + matches[0].Value.Replace("Monthly Totals ", "").Trim();
                                                    }
                                                    outPut.Add(result);
                                                }
                                                //tw.Close();
                                                tw.WriteLine();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                    }
                                    rip += 1;
                                }
                                zone += 1;
                            }
                            tw.Close();
                            //System.Diagnostics.Process.Start(outFile);
                            break;
                        }
                    case 10: // 05
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\2005LCRAS.pdf";
                            Console.WriteLine("Processing pdf 05 for Riparian Crop values");
                            var header = new List<string>(new string[] { "Year 05 Riparian Crop values" });
                            string outFile = "U:\\Ripariandata_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            {
                                tw.Write(s);
                            }
                            tw.WriteLine();
                            int zone = 0;
                            int page = 0;
                            int rip = 0;
                            //tw.Close();
                            while (zone < 5)
                            {


                                switch (zone)
                                {

                                    case 0:
                                        {// Mohave area
                                            page = 111;
                                            tw.WriteLine("Mohave Area");
                                            break;

                                        }
                                    case 1:
                                        {// Parker area
                                            page = 203;

                                            tw.WriteLine("Parker Area");
                                            break;
                                        }
                                    case 2:
                                        {// Yuma Area
                                            page = 484;

                                            tw.WriteLine("Yuma Area");
                                            break;
                                        }
                                    case 3://Imeperial/Coachella
                                        {
                                            page = 387;
                                            tw.WriteLine("IDD/Coachella Valley Area");
                                            break;
                                        }
                                    case 4://Wellton-Hawk
                                        {
                                            page = 295;
                                            tw.WriteLine("Wellton-Mohawk Area");
                                            break;
                                        }


                                }
                                rip = 0;
                                var pdf = pdfText(fName, page);
                                string pattern = "";
                                string result = "";
                                while (rip <= 13)
                                {
                                    switch (rip)
                                    {
                                        case 0://Marsh
                                            {
                                                outPut = new List<string>();

                                                result = "Marsh  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"\[bamboo\]\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("[bamboo])", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //1 Desert Veg
                                        case 1:
                                            {
                                                /* outPut = new List<string>();

                                                 result = "Desert Veg  ";
                                                 string test = @"((\d+)+?(\.\d+)?)\s";

                                                 pattern = @"Desert Veg " + test + test + test + test
                                                 + test + test + test + test + test + test
                                                 + test + test + test;

                                                 MatchCollection matches = Regex.Matches(pdf, pattern);
                                                 if (matches.Count < 1)
                                                 {
                                                     result = result + " File Not Readable";

                                                 }
                                                 else
                                                 {
                                                     result = result + matches[0].Value.Replace("Desert Veg ", "").Trim();
                                                 }
                                                 outPut.Add(result);
                                                 foreach (String s in outPut)
                                                 {
                                                     tw.WriteLine(s);
                                                 }
                                                 //tw.Close();

                                                 //System.Diagnostics.Process.Start(outFile);*/
                                                break;
                                            }
                                        //2 Barren
                                        case 2:
                                            {
                                                outPut = new List<string>();

                                                result = "Barren  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";


                                                if (zone == 1)
                                                    pattern = @"Barren \(<= 10% vegetation\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                else
                                                    pattern = @"\% vegetation\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("% vegetation) ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //3 Sc-low
                                        case 3:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc-low  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"11-60\% salt cedar \& \<\= 25% \narrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                 if (zone == 2 || zone == 3 || zone == 4)
                                                {
                                                    pattern = @"Sc-low \(11-60% salt cedar \& \<\= 25% " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                 else if (zone == 1)
                                                {
                                                    pattern = @"41 arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("(11-60% salt cedar & <= 25% arrowweed) ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;

                                            }
                                        //4 Sc-high
                                        case 4:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc-high  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"61-100\% salt cedar \& \<\= 25% \narrowweed\) " + test + test + test + test
                                             + test + test + test + test + test + test
                                             + test + test + test;
                                                if(zone == 0)
                                                {
                                                    pattern = @"Sc-high \(61-100% salt cedar \& \<\= \n25% arrowweed\) " + test + test + test + test
                                             + test + test + test + test + test + test
                                             + test + test + test;
                                                }
                                               else if(zone == 1)
                                                {
                                                    pattern = @"42 arrowweed\) " + test + test + test + test
                                                                                                    + test + test + test + test + test + test
                                                                                                    + test + test + test;
                                                }

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("(61 - 100 % salt cedar & <= 25% \narrowweed)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;

                                            }
                                        //5 Sc/ms
                                        case 5:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc/ms  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc/ms " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 0)
                                                {
                                                    pattern = @"Sc/ms \(11-60% salt cedar & 11-60% \nmesquite & <= 25% arrowweed\) " + test + test + test + test
                                                    + test + test + test + test + test + test
                                                    + test + test + test;
                                                }
                                                else if (zone == 1)
                                                {
                                                    pattern = @"43 & <= 25% arrowweed\) " + test + test + test + test
                                                    + test + test + test + test + test + test
                                                    + test + test + test;
                                                }
                                                else if ( zone == 2 || zone == 4)
                                                {
                                                    pattern = @"Sc/ms \(11-60% salt cedar \& 11-60% mesquite \n\& \<\= 25% arrowweed\) " + test + test + test + test
                                                   + test + test + test + test + test + test
                                                   + test + test + test;
                                                }
                                                else if (zone == 3)
                                                {
                                                    pattern = @"Sc/ms \(11-60% salt cedar & 11-60% mesquite \n\& \<\= 25% arrowweed\)\n" + test + test + test + test
                                                   + test + test + test + test + test + test
                                                   + test + test + test;
                                                }


                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc/ms ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //6 Sc/aw
                                        case 6:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc/aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc/aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 0)
                                                {
                                                    pattern = @"Sc/aw \(<= 75% salt cedar & >= 25% \narrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 1 || zone == 3)
                                                {
                                                    pattern = @"Sc/aw \(\<\= 75% salt cedar \& \>\= 25% " + test + test + test + test
                                               + test + test + test + test + test + test
                                               + test + test + test;
                                                }
                                                else if (zone == 2 || zone == 4)
                                                {
                                                    pattern = @"Sc/aw \(\<\= 75% salt cedar \& \>\= 25% \n" + test + test + test + test
                                               + test + test + test + test + test + test
                                               + test + test + test;
                                                }

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc/aw ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //7 Sc/ms/aw
                                        case 7:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc/ms/aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc/ms/aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 0)
                                                {
                                                    pattern = @"45% mesquite & 20-40% \narrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if ( zone == 2 || zone == 3 || zone == 4)
                                                {
                                                    pattern = @"Sc/ms/aw \(15-45% salt cedar \& 15-45% \nmesquite \& 20-40% arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 1)
                                                {

                                                    pattern = @"arrowweed\)\n45 " + test + test + test + test
                                            + test + test + test + test + test + test;
                                                }
                                                /*else if (zone == 2)
                                                {
                                                    pattern = @"Sc/ms/aw \(15-45% salt cedar \& 15-45% \nmesquite \& 20-40% arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }*/
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc/ms/aw ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //8 Ms-low
                                        case 8:
                                            {
                                                outPut = new List<string>();

                                                result = "Ms-low  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Ms-low " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 0)
                                                {
                                                    pattern = @"Ms-low \(11-60% screwbean/honey \nmesquite & <= 25% arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 2 || zone == 3 || zone == 4)
                                                {
                                                    pattern = @"Ms-low \(11-60% screwbean/honey mesquite & \n\<\= 25% arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 1)
                                                {
                                                    pattern = @"46 <= 25% arrowweed\) " + test + test + test + test
                                                                                                    + test + test + test + test + test + test
                                                                                                    + test + test + test;
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Ms-low", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //9 Ms-high
                                        case 9:
                                            {
                                                outPut = new List<string>();

                                                result = "Ms-high  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                
                                                if (zone == 0)
                                                {
                                                    pattern = @"Ms-high \(61-100% screwbean/honey \nmesquite & <= 25% arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if ( zone == 2 || zone == 3 || zone == 4)
                                                {
                                                    pattern = @"Ms-high \(61-100% screwbean/honey mesquite \n\& \<\= 25% arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 1)
                                                {
                                                    pattern = @"47 & <= 25% arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Ms-high", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //10 Ms/aw
                                        case 10:
                                            {
                                                outPut = new List<string>();

                                                result = "Ms/aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                               
                                                if (zone == 0)
                                                {
                                                    pattern = @"Ms/aw \(21-60% mesquite & 31-60% \narrowweed & <= 20% salt cedar\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 1)
                                                {
                                                    pattern = @"48 arrowweed & <= 20% salt cedar\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 2 || zone == 3 || zone == 4)
                                                {
                                                    pattern = @"Ms/aw \(21-60% mesquite \& 31-60% arrowweed \n\& \<\= 20% salt cedar\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Ms/aw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //11 Aw
                                        case 11:
                                            {
                                                outPut = new List<string>();

                                                result = "Aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 0)
                                                {
                                                    pattern = @"Aw \(51-100% arrowweed & <= 10% \nany trees\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 1 || zone == 2 || zone == 3 || zone == 4)
                                                {
                                                    pattern = @"Aw \(51-100% arrowweed \& \<\= 10% any trees\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Aw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //12 Cw
                                        case 12:
                                            {
                                                outPut = new List<string>();

                                                result = "Cw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Cw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 0)
                                                {
                                                    pattern = @"Cw \(61-100% cottonwood and willow \ntrees\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 1 || zone == 2 || zone == 3 || zone == 4)
                                                {
                                                    pattern = @"Cw \(61-100% cottonwood and willow trees\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Cw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //13 Low Veg
                                        case 13:
                                            {
                                                outPut = new List<string>();

                                                result = "Low Veg  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"g " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 0 || zone == 1 || zone == 2 || zone == 4)
                                                {
                                                    pattern = @"vegetation\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 3)
                                                {
                                                    pattern = @"riparian vegetation\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("g", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                if (zone == 1)
                                                {
                                                    result = "Monthly Totals  ";
                                                    pattern = @"Monthly Totals " + test + test + test + test
                                                    + test + test + test + test + test + test
                                                    + test + test + test;
                                                    matches = Regex.Matches(pdf, pattern);
                                                    if (matches.Count < 1)
                                                    {
                                                        result = result + " File Not Readable";

                                                    }
                                                    else
                                                    {
                                                        result = result + matches[0].Value.Replace("Monthly Totals ", "").Trim();
                                                    }
                                                    outPut.Add(result);
                                                }
                                                //tw.Close();
                                                tw.WriteLine();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                    }
                                    rip += 1;
                                }
                                zone += 1;
                            }
                            tw.Close();
                            //System.Diagnostics.Process.Start(outFile);
                            break;
                        }
                    case 11: // 06
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\2006LCRAS.pdf";
                            Console.WriteLine("Processing pdf 06 for Riparian Crop values");
                            var header = new List<string>(new string[] { "Year 6 Riparian Crop values" });
                            string outFile = "U:\\Ripariandata_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            {
                                tw.Write(s);
                            }
                            tw.WriteLine();
                            int zone = 0;
                            int page = 0;
                            int rip = 0;
                            //tw.Close();
                            while (zone < 5)
                            {


                                switch (zone)
                                {

                                    case 0:
                                        {// Mohave area
                                            page = 111;
                                            tw.WriteLine("Mohave Area");
                                            break;

                                        }
                                    case 1:
                                        {// Parker area
                                            page = 203;

                                            tw.WriteLine("Parker Area");
                                            break;
                                        }
                                    case 2:
                                        {// Yuma Area
                                            page = 484;

                                            tw.WriteLine("Yuma Area");
                                            break;
                                        }
                                    case 3://Imeperial/Coachella
                                        {
                                            page = 387;
                                            tw.WriteLine("IDD/Coachella Valley Area");
                                            break;
                                        }
                                    case 4://Wellton-Hawk
                                        {
                                            page = 295;
                                            tw.WriteLine("Wellton-Mohawk Area");
                                            break;
                                        }


                                }
                                rip = 0;
                                var pdf = pdfText(fName, page);
                                string pattern = "";
                                string result = "";
                                while (rip <= 13)
                                {
                                    switch (rip)
                                    {
                                        case 0://Marsh
                                            {
                                                outPut = new List<string>();

                                                result = "Marsh  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"\[bamboo\]\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("[bamboo])", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //1 Desert Veg
                                        case 1:
                                            {
                                                /* outPut = new List<string>();

                                                 result = "Desert Veg  ";
                                                 string test = @"((\d+)+?(\.\d+)?)\s";

                                                 pattern = @"Desert Veg " + test + test + test + test
                                                 + test + test + test + test + test + test
                                                 + test + test + test;

                                                 MatchCollection matches = Regex.Matches(pdf, pattern);
                                                 if (matches.Count < 1)
                                                 {
                                                     result = result + " File Not Readable";

                                                 }
                                                 else
                                                 {
                                                     result = result + matches[0].Value.Replace("Desert Veg ", "").Trim();
                                                 }
                                                 outPut.Add(result);
                                                 foreach (String s in outPut)
                                                 {
                                                     tw.WriteLine(s);
                                                 }
                                                 //tw.Close();

                                                 //System.Diagnostics.Process.Start(outFile);*/
                                                break;
                                            }
                                        //2 Barren
                                        case 2:
                                            {
                                                outPut = new List<string>();

                                                result = "Barren  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";


                                                if (zone == 1)
                                                    pattern = @"Barren \(<= 10% vegetation\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                else
                                                    pattern = @"\% vegetation\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("% vegetation) ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //3 Sc-low
                                        case 3:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc-low  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"11-60\% salt cedar \& \<\= 25% \narrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if ( zone == 3 || zone == 4)
                                                {
                                                    pattern = @"Sc-low \(11-60% salt cedar \& \<\= 25% " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 1)
                                                {
                                                    pattern = @"41 arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if(zone == 2)
                                                {
                                                    pattern = @"Sc-low \(11-60% salt cedar & <= 25% arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("(11-60% salt cedar & <= 25% arrowweed) ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;

                                            }
                                        //4 Sc-high
                                        case 4:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc-high  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"61-100\% salt cedar \& \<\= 25% \narrowweed\) " + test + test + test + test
                                             + test + test + test + test + test + test
                                             + test + test + test;
                                                if (zone == 0)
                                                {
                                                    pattern = @"Sc-high \(61-100% salt cedar \& \<\= \n25% arrowweed\) " + test + test + test + test
                                             + test + test + test + test + test + test
                                             + test + test + test;
                                                }
                                                else if (zone == 1)
                                                {
                                                    pattern = @"42 arrowweed\) " + test + test + test + test
                                                                                                    + test + test + test + test + test + test
                                                                                                    + test + test + test;
                                                }

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("(61 - 100 % salt cedar & <= 25% \narrowweed)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;

                                            }
                                        //5 Sc/ms
                                        case 5:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc/ms  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc/ms " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 0)
                                                {
                                                    pattern = @"Sc/ms \(11-60% salt cedar & 11-60% \nmesquite & <= 25% arrowweed\) " + test + test + test + test
                                                    + test + test + test + test + test + test
                                                    + test + test + test;
                                                }
                                                else if (zone == 1)
                                                {
                                                    pattern = @"43 & <= 25% arrowweed\) " + test + test + test + test
                                                    + test + test + test + test + test + test
                                                    + test + test + test;
                                                }
                                                else if ( zone == 4)
                                                {
                                                    pattern = @"Sc/ms \(11-60% salt cedar \& 11-60% mesquite \n\& \<\= 25% arrowweed\) " + test + test + test + test
                                                   + test + test + test + test + test + test
                                                   + test + test + test;
                                                }
                                                else if (zone == 3)
                                                {
                                                    pattern = @"Sc/ms \(11-60% salt cedar & 11-60% mesquite & \n<= 25% arrowweed\) " + test + test + test + test
                                                   + test + test + test + test + test + test
                                                   + test + test + test;
                                                }
                                                else if (zone == 2)
                                                {
                                                    pattern = @"Sc/ms \(11-60% salt cedar & 11-60% mesquite & \n<= 25% arrowweed\) " + test + test + test + test
                                                   + test + test + test + test + test + test
                                                   + test + test + test;
                                                }

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc/ms ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //6 Sc/aw
                                        case 6:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc/aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc/aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 0)
                                                {
                                                    pattern = @"Sc/aw \(<= 75% salt cedar & >= 25% \narrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 1 || zone == 3)
                                                {
                                                    pattern = @"Sc/aw \(\<\= 75% salt cedar \& \>\= 25% " + test + test + test + test
                                               + test + test + test + test + test + test
                                               + test + test + test;
                                                }
                                                else if ( zone == 4)
                                                {
                                                    pattern = @"Sc/aw \(<= 75% salt cedar & >= 25% " + test + test + test + test
                                               + test + test + test + test + test + test
                                               + test + test + test;
                                                }
                                                else if (zone ==2)
                                                {
                                                    pattern = @"Sc/aw \(<= 75% salt cedar & >= 25% arrowweed\) " + test + test + test + test
                                               + test + test + test + test + test + test
                                               + test + test + test;
                                                }

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc/aw ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //7 Sc/ms/aw
                                        case 7:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc/ms/aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc/ms/aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 0)
                                                {
                                                    pattern = @"45% mesquite & 20-40% \narrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if ( zone == 3 || zone == 4)
                                                {
                                                    pattern = @"Sc/ms/aw \(15-45% salt cedar \& 15-45% \nmesquite \& 20-40% arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 1)
                                                {

                                                    pattern = @"arrowweed\)\n45 " + test + test + test + test
                                                         + test + test + test + test + test + test;
                                                }
                                                else if (zone == 2)
                                                {
                                                    pattern = @"Sc/ms/aw \(15-45% salt cedar & 15-45% mesquite \n& 20-40% arrowweed\) " + test + test + test + test
                                                         + test + test + test + test + test + test;
                                                }
                                                /*else if (zone == 2)
                                                {
                                                    pattern = @"Sc/ms/aw \(15-45% salt cedar \& 15-45% \nmesquite \& 20-40% arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }*/
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc/ms/aw ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //8 Ms-low
                                        case 8:
                                            {
                                                outPut = new List<string>();

                                                result = "Ms-low  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Ms-low " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 0)
                                                {
                                                    pattern = @"Ms-low \(11-60% screwbean/honey \nmesquite & <= 25% arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if ( zone == 3 || zone == 4)
                                                {
                                                    pattern = @"Ms-low \(11-60% screwbean/honey mesquite & \n\<\= 25% arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 1)
                                                {
                                                    pattern = @"46 <= 25% arrowweed\) " + test + test + test + test
                                                                                                    + test + test + test + test + test + test
                                                                                                    + test + test + test;
                                                }
                                                else if (zone == 2)
                                                {
                                                    pattern = @"Ms-low \(11-60% screwbean/honey mesquite & <= \n25% arrowweed\) " + test + test + test + test
                                                     + test + test + test + test + test + test
                                                     + test + test + test;
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Ms-low", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //9 Ms-high
                                        case 9:
                                            {
                                                outPut = new List<string>();

                                                result = "Ms-high  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";


                                                if (zone == 0)
                                                {
                                                    pattern = @"Ms-high \(61-100% screwbean/honey \nmesquite & <= 25% arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if ( zone == 3 || zone == 4)
                                                {
                                                    pattern = @"Ms-high \(61-100% screwbean/honey mesquite \n\& \<\= 25% arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 1)
                                                {
                                                    pattern = @"47 & <= 25% arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 2)
                                                {
                                                    pattern = @"Ms-high \(61-100% screwbean/honey mesquite & \n<= 25% arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Ms-high", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //10 Ms/aw
                                        case 10:
                                            {
                                                outPut = new List<string>();

                                                result = "Ms/aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";


                                                if (zone == 0)
                                                {
                                                    pattern = @"Ms/aw \(21-60% mesquite & 31-60% \narrowweed & <= 20% salt cedar\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 1)
                                                {
                                                    pattern = @"48 arrowweed & <= 20% salt cedar\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if ( zone == 4)
                                                {
                                                    pattern = @"Ms/aw \(21-60% mesquite \& 31-60% arrowweed \n\& \<\= 20% salt cedar\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 2)
                                                {
                                                    pattern = @"Ms/aw \(21-60% mesquite & 31-60% arrowweed & \n<= 20% salt cedar\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else
                                                    pattern = @"Ms/aw \(21-60% mesquite & 31-60% arrowweed \n& <= 20% salt cedar\)\n" + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Ms/aw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //11 Aw
                                        case 11:
                                            {
                                                outPut = new List<string>();

                                                result = "Aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 0)
                                                {
                                                    pattern = @"Aw \(51-100% arrowweed & <= 10% \nany trees\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 1 ||  zone == 3 || zone == 4)
                                                {
                                                    pattern = @"Aw \(51-100% arrowweed \& \<\= 10% any trees\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 2)
                                                {
                                                    pattern = @"Aw \(51-100% arrowweed & <= 10% any trees\)\n" + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Aw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //12 Cw
                                        case 12:
                                            {
                                                outPut = new List<string>();

                                                result = "Cw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Cw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 0)
                                                {
                                                    pattern = @"Cw \(61-100% cottonwood and willow \ntrees\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 1 || zone == 2 || zone == 3 || zone == 4)
                                                {
                                                    pattern = @"Cw \(61-100% cottonwood and willow trees\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Cw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //13 Low Veg
                                        case 13:
                                            {
                                                outPut = new List<string>();

                                                result = "Low Veg  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                
                                                
                                                    pattern = @"vegetation\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                
                                               

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("vegetation", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                if (zone == 1)
                                                {
                                                    result = "Monthly Totals  ";
                                                    pattern = @"Monthly Totals " + test + test + test + test
                                                    + test + test + test + test + test + test
                                                    + test + test + test;
                                                    matches = Regex.Matches(pdf, pattern);
                                                    if (matches.Count < 1)
                                                    {
                                                        result = result + " File Not Readable";

                                                    }
                                                    else
                                                    {
                                                        result = result + matches[0].Value.Replace("Monthly Totals ", "").Trim();
                                                    }
                                                    outPut.Add(result);
                                                }
                                                //tw.Close();
                                                tw.WriteLine();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                    }
                                    rip += 1;
                                }
                                zone += 1;
                            }
                            tw.Close();
                            //System.Diagnostics.Process.Start(outFile);
                            break;
                        }
                    case 12: // 07
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\2007LCRAS.pdf";
                            Console.WriteLine("Processing pdf 07 for Riparian Crop values");
                            var header = new List<string>(new string[] { "Year 7 Riparian Crop values" });
                            string outFile = "U:\\Ripariandata_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            {
                                tw.Write(s);
                            }
                            tw.WriteLine();
                            int zone = 0;
                            int page = 0;
                            int rip = 0;
                            //tw.Close();
                            while (zone < 5)
                            {


                                switch (zone)
                                {

                                    case 0:
                                        {// Mohave area
                                            page = 111;
                                            tw.WriteLine("Mohave Area");
                                            break;

                                        }
                                    case 1:
                                        {// Parker area
                                            page = 203;

                                            tw.WriteLine("Parker Area");
                                            break;
                                        }
                                    case 2:
                                        {// Yuma Area
                                            page = 484;

                                            tw.WriteLine("Yuma Area");
                                            break;
                                        }
                                    case 3://Imeperial/Coachella
                                        {
                                            page = 387;
                                            tw.WriteLine("IDD/Coachella Valley Area");
                                            break;
                                        }
                                    case 4://Wellton-Hawk
                                        {
                                            page = 295;
                                            tw.WriteLine("Wellton-Mohawk Area");
                                            break;
                                        }


                                }
                                rip = 0;
                                var pdf = pdfText(fName, page);
                                string pattern = "";
                                string result = "";
                                while (rip <= 13)
                                {
                                    switch (rip)
                                    {
                                        case 0://Marsh
                                            {
                                                outPut = new List<string>();

                                                result = "Marsh  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"\[bamboo\]\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("[bamboo])", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //1 Desert Veg
                                        case 1:
                                            {
                                                /* outPut = new List<string>();

                                                 result = "Desert Veg  ";
                                                 string test = @"((\d+)+?(\.\d+)?)\s";

                                                 pattern = @"Desert Veg " + test + test + test + test
                                                 + test + test + test + test + test + test
                                                 + test + test + test;

                                                 MatchCollection matches = Regex.Matches(pdf, pattern);
                                                 if (matches.Count < 1)
                                                 {
                                                     result = result + " File Not Readable";

                                                 }
                                                 else
                                                 {
                                                     result = result + matches[0].Value.Replace("Desert Veg ", "").Trim();
                                                 }
                                                 outPut.Add(result);
                                                 foreach (String s in outPut)
                                                 {
                                                     tw.WriteLine(s);
                                                 }
                                                 //tw.Close();

                                                 //System.Diagnostics.Process.Start(outFile);*/
                                                break;
                                            }
                                        //2 Barren
                                        case 2:
                                            {
                                                outPut = new List<string>();

                                                result = "Barren  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";


                                                if (zone == 1)
                                                    pattern = @"Barren \(<= 10% vegetation\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                else
                                                    pattern = @"\% vegetation\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("% vegetation) ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //3 Sc-low
                                        case 3:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc-low  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"11-60\% salt cedar \& \<\= 25% \narrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 3 || zone == 4)
                                                {
                                                    pattern = @"Sc-low \(11-60% salt cedar \& \<\= 25% " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 1)
                                                {
                                                    pattern = @"41 arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 2)
                                                {
                                                    pattern = @"Sc-low \(11-60% salt cedar & <= 25% arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("(11-60% salt cedar & <= 25% arrowweed) ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;

                                            }
                                        //4 Sc-high
                                        case 4:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc-high  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"61-100\% salt cedar \& \<\= 25% \narrowweed\) " + test + test + test + test
                                             + test + test + test + test + test + test
                                             + test + test + test;
                                                if (zone == 0)
                                                {
                                                    pattern = @"Sc-high \(61-100% salt cedar \& \<\= \n25% arrowweed\) " + test + test + test + test
                                             + test + test + test + test + test + test
                                             + test + test + test;
                                                }
                                                else if (zone == 1)
                                                {
                                                    pattern = @"42 arrowweed\) " + test + test + test + test
                                                                                                    + test + test + test + test + test + test
                                                                                                    + test + test + test;
                                                }

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("(61 - 100 % salt cedar & <= 25% \narrowweed)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;

                                            }
                                        //5 Sc/ms
                                        case 5:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc/ms  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc/ms " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 0)
                                                {
                                                    pattern = @"Sc/ms \(11-60% salt cedar & 11-60% \nmesquite & <= 25% arrowweed\) " + test + test + test + test
                                                    + test + test + test + test + test + test
                                                    + test + test + test;
                                                }
                                                else if (zone == 1)
                                                {
                                                    pattern = @"43 & <= 25% arrowweed\) " + test + test + test + test
                                                    + test + test + test + test + test + test
                                                    + test + test + test;
                                                }
                                                else if (zone == 4)
                                                {
                                                    pattern = @"Sc/ms \(11-60% salt cedar \& 11-60% mesquite \n\& \<\= 25% arrowweed\) " + test + test + test + test
                                                   + test + test + test + test + test + test
                                                   + test + test + test;
                                                }
                                                else if (zone == 3)
                                                {
                                                    pattern = @"Sc/ms \(11-60% salt cedar & 11-60% mesquite & \n<= 25% arrowweed\) " + test + test + test + test
                                                   + test + test + test + test + test + test
                                                   + test + test + test;
                                                }
                                                else if (zone == 2)
                                                {
                                                    pattern = @"Sc/ms \(11-60% salt cedar & 11-60% mesquite & \n<= 25% arrowweed\) " + test + test + test + test
                                                   + test + test + test + test + test + test
                                                   + test + test + test;
                                                }

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc/ms ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //6 Sc/aw
                                        case 6:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc/aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc/aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 0)
                                                {
                                                    pattern = @"Sc/aw \(<= 75% salt cedar & >= 25% \narrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 1 || zone == 3)
                                                {
                                                    pattern = @"Sc/aw \(\<\= 75% salt cedar \& \>\= 25% " + test + test + test + test
                                               + test + test + test + test + test + test
                                               + test + test + test;
                                                }
                                                else if (zone == 4)
                                                {
                                                    pattern = @"Sc/aw \(<= 75% salt cedar & >= 25% " + test + test + test + test
                                               + test + test + test + test + test + test
                                               + test + test + test;
                                                }
                                                else if (zone == 2)
                                                {
                                                    pattern = @"Sc/aw \(<= 75% salt cedar & >= 25% arrowweed\) " + test + test + test + test
                                               + test + test + test + test + test + test
                                               + test + test + test;
                                                }

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc/aw ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //7 Sc/ms/aw
                                        case 7:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc/ms/aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc/ms/aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 0)
                                                {
                                                    pattern = @"45% mesquite & 20-40% \narrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 3 || zone == 4)
                                                {
                                                    pattern = @"Sc/ms/aw \(15-45% salt cedar \& 15-45% \nmesquite \& 20-40% arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 1)
                                                {

                                                    pattern = @"arrowweed\)\n45 " + test + test + test + test
                                                         + test + test + test + test + test + test;
                                                }
                                                else if (zone == 2)
                                                {
                                                    pattern = @"Sc/ms/aw \(15-45% salt cedar & 15-45% mesquite \n& 20-40% arrowweed\) " + test + test + test + test
                                                         + test + test + test + test + test + test;
                                                }
                                                /*else if (zone == 2)
                                                {
                                                    pattern = @"Sc/ms/aw \(15-45% salt cedar \& 15-45% \nmesquite \& 20-40% arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }*/
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc/ms/aw ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //8 Ms-low
                                        case 8:
                                            {
                                                outPut = new List<string>();

                                                result = "Ms-low  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Ms-low " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 0)
                                                {
                                                    pattern = @"Ms-low \(11-60% screwbean/honey \nmesquite & <= 25% arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 3 || zone == 4)
                                                {
                                                    pattern = @"Ms-low \(11-60% screwbean/honey mesquite & \n\<\= 25% arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 1)
                                                {
                                                    pattern = @"46 <= 25% arrowweed\) " + test + test + test + test
                                                                                                    + test + test + test + test + test + test
                                                                                                    + test + test + test;
                                                }
                                                else if (zone == 2)
                                                {
                                                    pattern = @"Ms-low \(11-60% screwbean/honey mesquite & <= \n25% arrowweed\) " + test + test + test + test
                                                     + test + test + test + test + test + test
                                                     + test + test + test;
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Ms-low", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //9 Ms-high
                                        case 9:
                                            {
                                                outPut = new List<string>();

                                                result = "Ms-high  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";


                                                if (zone == 0)
                                                {
                                                    pattern = @"Ms-high \(61-100% screwbean/honey \nmesquite & <= 25% arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 3 || zone == 4)
                                                {
                                                    pattern = @"Ms-high \(61-100% screwbean/honey mesquite \n\& \<\= 25% arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 1)
                                                {
                                                    pattern = @"47 & <= 25% arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 2)
                                                {
                                                    pattern = @"Ms-high \(61-100% screwbean/honey mesquite & \n<= 25% arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Ms-high", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //10 Ms/aw
                                        case 10:
                                            {
                                                outPut = new List<string>();

                                                result = "Ms/aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";


                                                if (zone == 0)
                                                {
                                                    pattern = @"Ms/aw \(21-60% mesquite & 31-60% \narrowweed & <= 20% salt cedar\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 1)
                                                {
                                                    pattern = @"48 arrowweed & <= 20% salt cedar\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 4)
                                                {
                                                    pattern = @"Ms/aw \(21-60% mesquite \& 31-60% arrowweed \n\& \<\= 20% salt cedar\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 2)
                                                {
                                                    pattern = @"Ms/aw \(21-60% mesquite & 31-60% arrowweed & \n<= 20% salt cedar\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else
                                                    pattern = @"Ms/aw \(21-60% mesquite & 31-60% arrowweed \n& <= 20% salt cedar\)\n" + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Ms/aw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //11 Aw
                                        case 11:
                                            {
                                                outPut = new List<string>();

                                                result = "Aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 0)
                                                {
                                                    pattern = @"Aw \(51-100% arrowweed & <= 10% \nany trees\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 1 || zone == 3 || zone == 4)
                                                {
                                                    pattern = @"Aw \(51-100% arrowweed \& \<\= 10% any trees\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 2)
                                                {
                                                    pattern = @"Aw \(51-100% arrowweed & <= 10% any trees\)\n" + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Aw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //12 Cw
                                        case 12:
                                            {
                                                outPut = new List<string>();

                                                result = "Cw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Cw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 0)
                                                {
                                                    pattern = @"Cw \(61-100% cottonwood and willow \ntrees\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 1 || zone == 2 || zone == 3 || zone == 4)
                                                {
                                                    pattern = @"Cw \(61-100% cottonwood and willow trees\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Cw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //13 Low Veg
                                        case 13:
                                            {
                                                outPut = new List<string>();

                                                result = "Low Veg  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";



                                                pattern = @"vegetation\) " + test + test + test + test
                                            + test + test + test + test + test + test
                                            + test + test + test;



                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("vegetation", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                if (zone == 1)
                                                {
                                                    result = "Monthly Totals  ";
                                                    pattern = @"Monthly Totals " + test + test + test + test
                                                    + test + test + test + test + test + test
                                                    + test + test + test;
                                                    matches = Regex.Matches(pdf, pattern);
                                                    if (matches.Count < 1)
                                                    {
                                                        result = result + " File Not Readable";

                                                    }
                                                    else
                                                    {
                                                        result = result + matches[0].Value.Replace("Monthly Totals ", "").Trim();
                                                    }
                                                    outPut.Add(result);
                                                }
                                                //tw.Close();
                                                tw.WriteLine();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                    }
                                    rip += 1;
                                }
                                zone += 1;
                            }
                            tw.Close();
                            //System.Diagnostics.Process.Start(outFile);
                            break;
                        }
                    case 13: // 08
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\2008LCRAS.pdf";
                            Console.WriteLine("Processing pdf 08 for Riparian Crop values");
                            var header = new List<string>(new string[] { "Year 08 Riparian Crop values" });
                            string outFile = "U:\\Ripariandata_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            {
                                tw.Write(s);
                            }
                            tw.WriteLine();
                            int zone = 0;
                            int page = 0;
                            int rip = 0;
                            //tw.Close();
                            while (zone < 5)
                            {


                                switch (zone)
                                {

                                    case 0:
                                        {// Mohave area
                                            page = 104;
                                            tw.WriteLine("Mohave Area");
                                            break;

                                        }
                                    case 1:
                                        {// Parker area
                                            page = 196;

                                            tw.WriteLine("Parker Area");
                                            break;
                                        }
                                    case 2:
                                        {// Yuma Area
                                            page = 477;

                                            tw.WriteLine("Yuma Area");
                                            break;
                                        }
                                    case 3://Imeperial/Coachella
                                        {
                                            page = 380;
                                            tw.WriteLine("IDD/Coachella Valley Area");
                                            break;
                                        }
                                    case 4://Wellton-Hawk
                                        {
                                            page = 288;
                                            tw.WriteLine("Wellton-Mohawk Area");
                                            break;
                                        }


                                }
                                rip = 0;
                                var pdf = pdfText(fName, page);
                                string pattern = "";
                                string result = "";
                                while (rip <= 14)
                                {
                                    switch (rip)
                                    {
                                        case 0://Marsh
                                            {
                                                outPut = new List<string>();

                                                result = "Marsh  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"\[bamboo\]\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if(zone == 0)
                                                {
                                                    pattern = @"\[bamboo\]\)\n" + test + test + test + test
                                                    + test + test + test + test + test + test
                                                    + test + test + test;
                                                }

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("[bamboo])", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //1 Desert Veg
                                        case 1:
                                            {
                                                /* outPut = new List<string>();

                                                 result = "Desert Veg  ";
                                                 string test = @"((\d+)+?(\.\d+)?)\s";

                                                 pattern = @"Desert Veg " + test + test + test + test
                                                 + test + test + test + test + test + test
                                                 + test + test + test;

                                                 MatchCollection matches = Regex.Matches(pdf, pattern);
                                                 if (matches.Count < 1)
                                                 {
                                                     result = result + " File Not Readable";

                                                 }
                                                 else
                                                 {
                                                     result = result + matches[0].Value.Replace("Desert Veg ", "").Trim();
                                                 }
                                                 outPut.Add(result);
                                                 foreach (String s in outPut)
                                                 {
                                                     tw.WriteLine(s);
                                                 }
                                                 //tw.Close();

                                                 //System.Diagnostics.Process.Start(outFile);*/
                                                break;
                                            }
                                        //2 Barren
                                        case 2:
                                            {
                                                outPut = new List<string>();

                                                result = "Barren  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                if(zone == 4)
                                                {
                                                    pattern = @"% vegetation\)\n" + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 1)
                                                    pattern = @"% vegetation\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                else
                                                    pattern = @"% vegetation\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("% vegetation) ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //3 Sc-low
                                        case 3:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc-low  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"11-60\% salt cedar \& \<\= 25% \narrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 3 || zone == 4)
                                                {
                                                    pattern = @"Sc-low \(11-60% salt cedar & <= 25% arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 1)
                                                {
                                                    pattern = @"Sc-low \(11-60% salt cedar & <= 25% arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 2)
                                                {
                                                    pattern = @"Sc-low \(11-60% salt cedar & <= 25% arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc-low (11-60% salt cedar & <= 25% arrowweed) ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;

                                            }
                                        //4 Sc-high
                                        case 4:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc-high  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                               
                                                if (zone == 0)
                                                {
                                                    pattern = @"Sc-high \(61-100% salt cedar & <= 25% \narrowweed\) " + test + test + test + test
                                             + test + test + test + test + test + test
                                             + test + test + test;
                                                }
                                                else if (zone == 1)
                                                {
                                                    pattern = @"Sc-high \(61-100% salt cedar & <= 25% arrowweed\) " + test + test + test + test
                                                                                                    + test + test + test + test + test + test
                                                                                                    + test + test + test;
                                                }
                                                else
                                                    pattern = @"Sc-high \(61-100% salt cedar & <= 25% arrowweed\) " + test + test + test + test
                                                    + test + test + test + test + test + test
                                                    + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc-high (61-100% salt cedar & <= 25% arrowweed)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;

                                            }
                                        //5 Sc/ms
                                        case 5:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc/ms  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc/ms " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 0)
                                                {
                                                    pattern = @"Sc/ms \(11-60% salt cedar & 11-60% \nmesquite & <= 25% arrowweed\) " + test + test + test + test
                                                    + test + test + test + test + test + test
                                                    + test + test + test;
                                                }
                                                else if (zone == 1)
                                                {
                                                    pattern = @"Sc/ms \(11-60% salt cedar & 11-60% mesquite & <= \n25% arrowweed\) " + test + test + test + test
                                                    + test + test + test + test + test + test
                                                    + test + test + test;
                                                }
                                                else if (zone == 4)
                                                {
                                                    pattern = @"Sc/ms \(11-60% salt cedar & 11-60% mesquite & <= 25% \narrowweed\)\n" + test + test + test + test
                                                   + test + test + test + test + test + test
                                                   + test + test + test;
                                                }
                                                else if (zone == 3)
                                                {
                                                    pattern = @"Sc/ms \(11-60% salt cedar & 11-60% mesquite & <= 25% \narrowweed\)\n" + test + test + test + test
                                                   + test + test + test + test + test + test
                                                   + test + test + test;
                                                }
                                                else if (zone == 2)
                                                {
                                                    pattern = @"Sc/ms \(11-60% salt cedar & 11-60% mesquite & <= 25% \narrowweed\)\n" + test + test + test + test
                                                   + test + test + test + test + test + test
                                                   + test + test + test;
                                                }

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc/ms (11-60% salt cedar & 11-60% mesquite & <= 25% arrowweed) ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //6 Sc/aw
                                        case 6:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc/aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc/aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 0)
                                                {
                                                    pattern = @"Sc/aw \(<= 75% salt cedar & >= 25% \narrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 1)
                                                {
                                                    pattern = @"Sc/aw \(<= 75% salt cedar & >= 25% arrowweed\) " + test + test + test + test
                                               + test + test + test + test + test + test
                                               + test + test + test;
                                                }
                                                else if (zone == 4)
                                                {
                                                    pattern = @"Sc/aw \(<= 75% salt cedar & >= 25% arrowweed\) " + test + test + test + test
                                               + test + test + test + test + test + test
                                               + test + test + test;
                                                }
                                                else if (zone == 2||zone == 3)
                                                {
                                                    pattern = @"Sc/aw \(<= 75% salt cedar & >= 25% arrowweed\)\n" + test + test + test + test
                                               + test + test + test + test + test + test
                                               + test + test + test;
                                                }
                                                

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc/aw (<= 75% salt cedar & >= 25% arrowweed) ", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //7 Sc/ms/aw
                                        case 7:
                                            {
                                                outPut = new List<string>();

                                                result = "Sc/ms/aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Sc/ms/aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 0)
                                                {
                                                    pattern = @"Sc/ms/aw \(15-45% salt cedar & 15-45% \nmesquite & 20-40% arrowweed\)\n" + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if ( zone == 4)
                                                {
                                                    pattern = @"Sc/ms/aw \(15-45% salt cedar & 15-45% mesquite & 20-\n40% arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 1|| zone == 3)
                                                {

                                                    pattern = @"Sc/ms/aw \(15-45% salt cedar & 15-45% mesquite & 20-\n40% arrowweed\) " + test + test + test + test
                                                         + test + test + test + test + test + test;
                                                }
                                                else if (zone == 2)
                                                {
                                                    pattern = @"Sc/ms/aw \(15-45% salt cedar & 15-45% mesquite & 20-\n40% arrowweed\)\n" + test + test + test + test
                                                         + test + test + test + test + test + test;
                                                }
                                                /*else if (zone == 2)
                                                {
                                                    pattern = @"Sc/ms/aw \(15-45% salt cedar \& 15-45% \nmesquite \& 20-40% arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }*/
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Sc/ms/aw (15-45% salt cedar & 15-45% mesquite & 20-40% arrowweed)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //8 Ms-low
                                        case 8:
                                            {
                                                outPut = new List<string>();

                                                result = "Ms-low  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Ms-low " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 0)
                                                {
                                                    pattern = @"Ms-low \(11-60% screwbean/honey \nmesquite & <= 25% arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 3 )
                                                {
                                                    pattern = @"Ms-low \(11-60% screwbean/honey mesquite & <= 25% \narrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 1||zone == 2)
                                                {
                                                    pattern = @"Ms-low \(11-60% screwbean/honey mesquite & <= 25% \narrowweed\) " + test + test + test + test
                                                                                                    + test + test + test + test + test + test
                                                                                                    + test + test + test;
                                                }else if (zone == 4)
                                                {
                                                    pattern = @"Ms-low \(11-60% screwbean/honey mesquite & <= 25% \narrowweed\)\n" + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                /*else if (zone == 2)
                                                {
                                                    pattern = @"Ms-low \(11-60% screwbean/honey mesquite & <= \n25% arrowweed\) " + test + test + test + test
                                                     + test + test + test + test + test + test
                                                     + test + test + test;
                                                }*/
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Ms-low (11-60% screwbean/honey mesquite & <= 25% arrowweed)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //9 Ms-high
                                        case 9:
                                            {
                                                outPut = new List<string>();

                                                result = "Ms-high  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";


                                                if (zone == 0)
                                                {
                                                    pattern = @"Ms-high \(61-100% screwbean/honey \nmesquite & <= 25% arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 3 || zone == 4)
                                                {
                                                    pattern = @"Ms-high \(61-100% screwbean/honey mesquite & <= 25% \narrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 1 )
                                                {
                                                    pattern = @"Ms-high \(61-100% screwbean/honey mesquite & <= \n25% arrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 2)
                                                {
                                                    pattern = @"Ms-high \(61-100% screwbean/honey mesquite & <= 25% \narrowweed\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Ms-high (61-100% screwbean/honey mesquite & <= 25% arrowweed)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //10 Ms/aw
                                        case 10:
                                            {
                                                outPut = new List<string>();

                                                result = "Ms/aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";


                                                if (zone == 0)
                                                {
                                                    pattern = @"arrowweed & <= 20% salt cedar\)\n" + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 1)
                                                {
                                                    pattern = @"Ms/aw \(21-60% mesquite & 31-60% arrowweed & <= \n20% salt cedar\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 4)
                                                {
                                                    pattern = @"Ms/aw \(21-60% mesquite & 31-60% arrowweed & <= \n20% salt cedar\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 2)
                                                {
                                                    pattern = @"Ms/aw \(21-60% mesquite & 31-60% arrowweed & <= 20% \nsalt cedar\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else
                                                    pattern = @"Ms/aw \(21-60% mesquite & 31-60% arrowweed & <= \n20% salt cedar\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Ms/aw (21-60% mesquite & 31-60% arrowweed & <= 20% salt cedar)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //11 Aw
                                        case 11:
                                            {
                                                outPut = new List<string>();

                                                result = "Aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 0)
                                                {
                                                    pattern = @"Aw \(51-100% arrowweed & <= 10% any \ntrees\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 1 || zone == 3  ||zone == 2)
                                                {
                                                    pattern = @"Aw \(51-100% arrowweed \& \<\= 10% any trees\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 4)
                                                {
                                                    pattern = @"Aw \(51-100% arrowweed \& \<\= 10% any trees\)\n" + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                /*else if (zone == 2)
                                                {
                                                    pattern = @"Aw \(51-100% arrowweed & <= 10% any trees\)\n" + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }*/
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Aw (51-100% arrowweed & <= 10% any trees)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //12 Cw
                                        case 12:
                                            {
                                                outPut = new List<string>();

                                                result = "Cw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Cw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if (zone == 0)
                                                {
                                                    pattern = @"Cw \(61-100% cottonwood and willow trees\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }
                                                else if (zone == 1 || zone == 2 || zone == 4)
                                                {
                                                    pattern = @"Cw \(61-100% cottonwood and willow trees\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }else if (zone == 3)
                                                {
                                                    pattern = @"Cw \(61-100% cottonwood and willow trees\)\n" + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                }

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Cw (61-100% cottonwood and willow trees)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //13 Low Veg
                                        case 13:
                                            {
                                                outPut = new List<string>();

                                                result = "Low Veg  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";



                                                pattern = @"vegetation\) " + test + test + test + test
                                            + test + test + test + test + test + test
                                            + test + test + test;



                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("vegetation)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                if (zone == 1)
                                                {
                                                    result = "Monthly Totals  ";
                                                    pattern = @"Monthly Totals " + test + test + test + test
                                                    + test + test + test + test + test + test
                                                    + test + test + test;
                                                    matches = Regex.Matches(pdf, pattern);
                                                    if (matches.Count < 1)
                                                    {
                                                        result = result + " File Not Readable";

                                                    }
                                                    else
                                                    {
                                                        result = result + matches[0].Value.Replace("Monthly Totals ", "").Trim();
                                                    }
                                                    outPut.Add(result);
                                                }
                                                //tw.Close();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //Evaporation (Not Maintained Open Water)
                                        case 14:
                                            {
                                                outPut = new List<string>();

                                                result = "Evaporation (Not Maintained Open Water)  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Evaporation \(Not Maintained Open Water\) " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                if(zone == 1 || zone == 4)
                                                    pattern = @"Evaporation \(Not Maintained Open Water\)\n" + test + test + test + test
                                                    + test + test + test + test + test + test
                                                    + test + test + test;
                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Evaporation (Not Maintained Open Water)", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                tw.WriteLine();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                    }
                                    rip += 1;
                                }
                                zone += 1;
                            }
                            tw.Close();
                            //System.Diagnostics.Process.Start(outFile);
                            break;
                        }
                    case 14: // 09
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\report09.pdf";
                            Console.WriteLine("Processing pdf 09 for Riparian Crop values");
                            var header = new List<string>(new string[] { "Year 09 Riparian Crop values" });
                            string outFile = "U:\\Ripariandata_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            {
                                tw.Write(s);
                            }
                            tw.WriteLine();
                            int zone = 0;
                            int page = 0;
                            int rip = 0;
                            //tw.Close();
                            while (zone < 5)
                            {


                                switch (zone)
                                {

                                    case 0:
                                        {// Mohave area
                                            page = 97;
                                            tw.WriteLine("Mohave Area");
                                            break;

                                        }
                                    case 1:
                                        {// Parker area
                                            page = 98;

                                            tw.WriteLine("Parker Area");
                                            break;
                                        }
                                    case 2:
                                        {// Wellton-Mohawk
                                            page = 99;

                                            tw.WriteLine("Wellton-Mohawk Area");
                                            break;
                                        }
                                    case 3:
                                        {// Yuma Area
                                            page = 100;
                                            tw.WriteLine("Yuma Area");
                                            break;
                                        }
                                    case 4:
                                        {// Imeperial/Coachella
                                            page = 101;
                                            tw.WriteLine("IID/Coachella Area");
                                            break;
                                        }


                                }
                                rip = 0;
                                var pdf = pdfText(fName, page);
                                string pattern = "";
                                string result = "";
                                while (rip <= 14)
                                {
                                    if (zone == 4)
                                    {
                                        rip = 14;

                                    }
                                    switch (rip)
                                    {
                                        
                                        case 0://0 aw
                                            {
                                                outPut = new List<string>();

                                                result = "aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;
                                                

                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("aw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //1 barren
                                        case 1:
                                            {
                                                
                                                outPut = new List<string>();

                                                result = "barren  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"barren " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;


                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("barren", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //2 cw
                                        case 2:
                                            {
                                                if (zone == 4)
                                                    break;
                                                outPut = new List<string>();

                                                result = "cw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"cw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;


                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("cw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //3 low veg
                                        case 3:
                                            {
                                                outPut = new List<string>();

                                                result = "low veg  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"low veg " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;


                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("low veg", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //4 marsh
                                        case 4:
                                            {
                                                outPut = new List<string>();

                                                result = "marsh  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"marsh " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;


                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("marsh", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //5 ms_aw
                                        case 5:
                                            {
                                                outPut = new List<string>();

                                                result = "ms_aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"ms_aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;


                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("ms_aw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //6 ms high
                                        case 6:
                                            {
                                                outPut = new List<string>();

                                                result = "ms_high  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"ms_high " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;


                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("ms_high", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //7 ms_low
                                        case 7:
                                            {
                                                outPut = new List<string>();

                                                result = "ms_low  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"ms_low " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;


                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("ms_low", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //8 sc/ms
                                        case 8:
                                            {
                                                outPut = new List<string>();

                                                result = "sc/ms  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"sc/ms " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;


                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("sc/ms", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //9 sc_aw
                                        case 9:
                                            {
                                                outPut = new List<string>();

                                                result = "sc_aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"sc_aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;


                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("sc_aw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //10 sc_high
                                        case 10:
                                            {
                                                outPut = new List<string>();

                                                result = "sc_high  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"sc_high " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;


                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("sc_high", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //11 sc_low
                                        case 11:
                                            {
                                                outPut = new List<string>();

                                                result = "sc_low  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"sc_low " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;


                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("sc_low", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //12 sc_ms_aw
                                        case 12:
                                            {
                                                outPut = new List<string>();

                                                result = "sc_ms_aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"sc_ms_aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;


                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("sc_ms_aw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //13 aw
                                        case 13:
                                            {
                                                outPut = new List<string>();

                                                result = "aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;


                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("aw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                tw.WriteLine();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        // All American Canal*
                                        case 14:
                                            {
                                                if (zone == 0 || zone == 1 || zone == 2 || zone == 3)
                                                    break;
                                                outPut = new List<string>();

                                                result = "All American Canal*  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"All American Canal\* " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;


                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("All American Canal*", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                tw.WriteLine();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                    }
                                    rip += 1;
                                }
                                zone += 1;
                            }
                            tw.Close();
                            //System.Diagnostics.Process.Start(outFile);
                            break;
                        }
                    case 15: // 10
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\report10.pdf";
                            Console.WriteLine("Processing pdf 10 for Riparian Crop values");
                            var header = new List<string>(new string[] { "Year 10 Riparian Crop values" });
                            string outFile = "U:\\Ripariandata_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            {
                                tw.Write(s);
                            }
                            tw.WriteLine();
                            int zone = 0;
                            int page = 0;
                            int rip = 0;
                            //tw.Close();
                            while (zone < 5)
                            {


                                switch (zone)
                                {

                                    case 0:
                                        {// Mohave area
                                            page = 95;
                                            tw.WriteLine("Mohave Area");
                                            break;

                                        }
                                    case 1:
                                        {// Parker area
                                            page = 96;

                                            tw.WriteLine("Parker Area");
                                            break;
                                        }
                                    case 2:
                                        {// Wellton-Mohawk
                                            page = 97;

                                            tw.WriteLine("Wellton-Mohawk Area");
                                            break;
                                        }
                                    case 3:
                                        {// Yuma Area
                                            page = 98;
                                            tw.WriteLine("Yuma Area");
                                            break;
                                        }
                                    case 4:
                                        {// Imeperial/Coachella
                                            page = 99;
                                            tw.WriteLine("IID/Coachella Area");
                                            break;
                                        }


                                }
                                rip = 0;
                                var pdf = pdfText(fName, page);
                                string pattern = "";
                                string result = "";
                                while (rip <= 14)
                                {
                                    if (zone == 4)
                                    {
                                        rip = 14;

                                    }
                                    switch (rip)
                                    {

                                        case 0://0 aw
                                            {
                                                outPut = new List<string>();

                                                result = "aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;


                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("aw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //1 barren
                                        case 1:
                                            {

                                                outPut = new List<string>();

                                                result = "barren  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"barren " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;


                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("barren", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //2 cw
                                        case 2:
                                            {
                                                if (zone == 4)
                                                    break;
                                                outPut = new List<string>();

                                                result = "cw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"cw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;


                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("cw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //3 low veg
                                        case 3:
                                            {
                                                outPut = new List<string>();

                                                result = "low veg  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"low veg " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;


                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("low veg", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //4 marsh
                                        case 4:
                                            {
                                                outPut = new List<string>();

                                                result = "marsh  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"marsh " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;


                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("marsh", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //5 ms_aw
                                        case 5:
                                            {
                                                outPut = new List<string>();

                                                result = "ms_aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"ms_aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;


                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("ms_aw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //6 ms high
                                        case 6:
                                            {
                                                outPut = new List<string>();

                                                result = "ms_high  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"ms_high " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;


                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("ms_high", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //7 ms_low
                                        case 7:
                                            {
                                                outPut = new List<string>();

                                                result = "ms_low  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"ms_low " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;


                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("ms_low", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //8 sc/ms
                                        case 8:
                                            {
                                                outPut = new List<string>();

                                                result = "sc/ms  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"sc/ms " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;


                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("sc/ms", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //9 sc_aw
                                        case 9:
                                            {
                                                outPut = new List<string>();

                                                result = "sc_aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"sc_aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;


                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("sc_aw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //10 sc_high
                                        case 10:
                                            {
                                                outPut = new List<string>();

                                                result = "sc_high  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"sc_high " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;


                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("sc_high", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //11 sc_low
                                        case 11:
                                            {
                                                outPut = new List<string>();

                                                result = "sc_low  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"sc_low " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;


                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("sc_low", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //12 sc_ms_aw
                                        case 12:
                                            {
                                                outPut = new List<string>();

                                                result = "sc_ms_aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"sc_ms_aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;


                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("sc_ms_aw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //13 aw
                                        case 13:
                                            {
                                                outPut = new List<string>();

                                                result = "aw  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"aw " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;


                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("aw", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                tw.WriteLine();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        // All American Canal*
                                        case 14:
                                            {
                                                if (zone == 0 || zone == 1 || zone == 2 || zone == 3)
                                                    break;
                                                outPut = new List<string>();

                                                result = "All American Canal*  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"All American Canal\* " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;


                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("All American Canal*", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                tw.WriteLine();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                    }
                                    rip += 1;
                                }
                                zone += 1;
                            }
                            tw.Close();
                            //System.Diagnostics.Process.Start(outFile);
                            break;
                        }
                    case 16: // 11
                        {
                            var outPut = new List<string>();
                            string fName = "C:\\Users\\mmiranda\\Downloads\\report11.pdf";
                            Console.WriteLine("Processing pdf 11 for Riparian Crop values");
                            var header = new List<string>(new string[] { "Year 11 Riparian Crop values" });
                            string outFile = "U:\\Ripariandata_95to11.txt";
                            TextWriter tw = new StreamWriter(outFile, true);
                            foreach (String s in header)
                            {
                                tw.Write(s);
                            }
                            tw.WriteLine();
                            int zone = 0;
                            int page = 0;
                            int rip = 0;
                            //tw.Close();
                            while (zone < 5)
                            {


                                switch (zone)
                                {

                                    case 0:
                                        {// Mohave area
                                            page = 107;
                                            tw.WriteLine("Mohave Area");
                                            break;

                                        }
                                    case 1:
                                        {// Parker area
                                            page = 109;

                                            tw.WriteLine("Parker Area");
                                            break;
                                        }
                                    case 2:
                                        {// Wellton-Mohawk
                                            page = 111;

                                            tw.WriteLine("Wellton-Mohawk Area");
                                            break;
                                        }
                                    case 3:
                                        {// Yuma Area
                                            page = 113;
                                            tw.WriteLine("Yuma Area");
                                            break;
                                        }
                                    case 4:
                                        {// Imeperial/Coachella
                                            page = 115;
                                            tw.WriteLine("IID/Coachella Area");
                                            break;
                                        }


                                }
                                rip = 0;
                                var pdf = pdfText(fName, page);
                                string pattern = "";
                                string result = "";
                                while (rip <= 6)
                                {
                                    if (zone == 4)
                                        rip = 6;
                                    switch (rip)
                                    {
                                        
                                        case 0://0 Barren
                                            {
                                                outPut = new List<string>();

                                                result = "Barren  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Barren " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;


                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Barren", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //1 Cottonwood/Willow
                                        case 1:
                                            {
                                                outPut = new List<string>();

                                                result = "Cottonwood/Willow  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Cottonwood/Willow " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;


                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Cottonwood/Willow", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //2 Marsh 
                                        case 2:
                                            {
                                                outPut = new List<string>();

                                                result = "Marsh  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Marsh " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;


                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Marsh", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //3 Mixed Veg Low
                                        case 3:
                                            {
                                                outPut = new List<string>();

                                                result = "Mixed Veg Low  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Mixed Veg Low " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;


                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Mixed Veg Low", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //4 Mixed Veg Medium
                                        case 4:
                                            {
                                                outPut = new List<string>();

                                                result = "Mixed Veg Medium  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Mixed Veg Medium " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;


                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Mixed Veg Medium", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();

                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //5 Salt Cedar Dense
                                        case 5:
                                            {
                                                outPut = new List<string>();

                                                result = "Salt Cedar Dense  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"Salt Cedar Dense " + test + test + test + test
                                                + test + test + test + test + test + test
                                                + test + test + test;


                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("Salt Cedar Dense", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                tw.WriteLine();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }
                                        //6  All American Canal*
                                        case 6:
                                            {
                                                if(zone == 0|| zone==1||zone==2||zone==3)
                                                {
                                                    break;
                                                }
                                                outPut = new List<string>();

                                                result = "All American Canal*  ";
                                                string test = @"((\d+)+?(\.\d+)?)\s";

                                                pattern = @"All American Canal\* " + test + test + test + test + test + test + test + test + test + test + test + test + test; 


                                                MatchCollection matches = Regex.Matches(pdf, pattern);
                                                if (matches.Count < 1)
                                                {
                                                    result = result + " File Not Readable";

                                                }
                                                else
                                                {
                                                    result = result + matches[0].Value.Replace("All American Canal*", "").Trim();
                                                }
                                                outPut.Add(result);
                                                foreach (String s in outPut)
                                                {
                                                    tw.WriteLine(s);
                                                }
                                                //tw.Close();
                                                tw.WriteLine();
                                                //System.Diagnostics.Process.Start(outFile);
                                                break;
                                            }

                                    }
                                    rip += 1;
                                }
                                zone += 1;
                            }
                            tw.Close();
                            System.Diagnostics.Process.Start(outFile);
                            break;
                        }
                }
                pdfnum += 1;
            }//bracket for main while loop for Riparian Crop data 95-2011    
        }

		// This function reads the PDF into a string
		public static string pdfText(string path, int page)
		{
			PdfReader reader = new PdfReader(path); // that for pdf
			string text = string.Empty; // empty string for pdf  
            //reads a certain page and puts into a string 
            text += PdfTextExtractor.GetTextFromPage(reader, page);  

			reader.Close(); //closes file
			return text; //return string 
		}
	}
}